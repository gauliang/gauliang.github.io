{"pageProps":{"id":["posts","2017","debugging-laravel-in-homestead-with-visual-studio-code"],"post":{"id":["posts","2017","debugging-laravel-in-homestead-with-visual-studio-code"],"contentHtml":"<div class=\"image-widget\"><img src=\"/attachments/posts/2017/debugging-laravel-in-homestead-with-visual-studio-code.files/634103-20170205214846386-672049439.jpg\" alt=\"\"></div>\n<p>由于之前做 .net 开发比较熟悉 visualstudio，所以自 visualstudio code 发布后就一直在不同场合使用 vscode ，比如前端、node等等。最近在做 laravel 项目，需要通过 vscode 来调试 homestead 中的 laravel 代码。做了一些有关 laravel 调试环境安装部署的尝试，本文是一个简要记录。</p>\n<h2 id=\"hash-基本环境\">基本环境</h2>\n<p>阅读本文之前，你应该安装好了基本的开发环境，比如 visualstudio code、VirtualBox 、vagrant、homestead、laravel 等等。原则上本文只讨论如何通过配置这些应用以实现对 laravel 项目的 debug ，不讨论安装相关软件的细节。</p>\n<ul>\n<li>laravel 版本 5.3</li>\n<li>homestead 版本 v1.0.1</li>\n<li>php 版本 7.1（homestead已集成）</li>\n<li>xdebug 版本 2.5（homestead已集成）</li>\n<li>vscode 版本 1.9.0</li>\n<li>vagrant 版本 1.9.1</li>\n<li>VirtualBox版本 5.1.12</li>\n</ul>\n<h2 id=\"hash-安装和配置-vscode-插件-PHP-Debug\">安装和配置 vscode 插件 PHP Debug</h2>\n<p>通过marketplace 平台安装插件 phpdebug。 1.9.0 版的 vscode 集成了插件管理功能在左侧的菜单栏，\n点击扩展按钮 > 输入 PHP Debug > 在搜索结果中找到 PHP debug > 点击安装，安装后重启 vscode 使其生效。</p>\n<p>打开调试界面。点击右上角的齿轮按钮配置 launch.json 文件，选择 PHP 选项。此时会生成 launch.json 文件，\n左侧的 debug 类型默认选中了 listen for xdebug 选项。修改 launch.json 配置如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0.2.0\"</span>,\n    <span class=\"token string\">\"configurations\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>        \n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Listen for XDebug\"</span>,\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"php\"</span>,\n            <span class=\"token string\">\"request\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"launch\"</span>,\n            <span class=\"token string\">\"port\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">9000</span>,\n            <span class=\"token string\">\"stopOnEntry\"</span>:false,\n            <span class=\"token string\">\"localSourceRoot\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"<span class=\"token variable\">${workspaceRoot}</span>/public\"</span>,\n            <span class=\"token string\">\"serverSourceRoot\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/home/vagrant/Code/Laravel/public\"</span>,\n            <span class=\"token string\">\"log\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Launch currently open script\"</span>,\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"php\"</span>,\n            <span class=\"token string\">\"request\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"launch\"</span>,\n            <span class=\"token string\">\"program\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"<span class=\"token variable\">${workspaceRoot}</span>/public/index.php\"</span>,\n            <span class=\"token string\">\"cwd\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"<span class=\"token variable\">${workspaceRoot}</span>/public/\"</span>,\n            <span class=\"token string\">\"port\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">9000</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这里主要添加了 <code>localSourceRoot</code> 和 <code>serverSourceRoot</code> 两个配置项：</p>\n<ol>\n<li><code>localSourceRoot</code> 配置的是 laravel 项目程序入口位置，<code>${workspaceRoot}</code> 表示当前工程项目根目录，所以取值 <code>\"${workspaceRoot}/public\"</code> ；</li>\n<li><code>serverSourceRoot</code> 配置的是远程服务器端 laravel 站点根目录位置，该目录必须与 <code>localSourceRoot</code> 位置对应。\n根据 homestead 环境，这里取值 <code>\"/home/vagrant/Code/Laravel/public\"</code>；</li>\n</ol>\n<h2 id=\"hash-启动Homestead\">启动Homestead</h2>\n<p>打开命令行终端，依次执行下列命令：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">vagrant up \nvagrant <span class=\"token function\">ssh</span>\n</code></pre></div>\n<h2 id=\"hash-安装-XDebug\">安装 XDebug</h2>\n<blockquote>\n<p>注：homestead 已集成了 XDebug，文件位置在 /usr/lib/php/20160303/xdebug.so 目录中。如果你不需要更新版本的 Xdebug 功能，可以忽略此步骤。</p>\n</blockquote>\n<p>建议你在 laravel 项目程序入口目录 public 下创建一个临时文件（如 test.php），输入 <code>phpinfo()</code>。\n把 PHPinfo 的执行结果复制并粘贴到 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://xdebug.org/wizard.php\">XDebug installation wizard</a>，程序会根据你的系统环境给出相应的安装向导。</p>\n<ol>\n<li>下载 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://xdebug.org/files/xdebug-2.5.0.tgz\">xdebug-2.5.0.tgz</a></li>\n<li>解压 <code>tar -xvzf xdebug-2.5.0.tgz</code></li>\n<li>执行 <code>cd xdebug-2.5.0</code></li>\n<li>执行 <code>./configure</code></li>\n<li>执行 <code>make</code></li>\n<li>执行 <code>cp modules/xdebug.so /usr/lib/php/20160303</code></li>\n</ol>\n<h2 id=\"hash-配置-XDebug\">配置 XDebug</h2>\n<p>打开文件 <code>/etc/php/7.1/fpm/php.ini</code>， 添加如下配置：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">zend_extension <span class=\"token operator\">=</span> /usr/lib/php/20160303/xdebug.so\n<span class=\"token punctuation\">[</span>XDebug<span class=\"token punctuation\">]</span>\nxdebug.remote_enable <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nxdebug.remote_autostart <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nxdebug.remote_host <span class=\"token operator\">=</span> <span class=\"token number\">192.168</span>.10.1\nxdebug.remote_port <span class=\"token operator\">=</span> <span class=\"token number\">9000</span>\n</code></pre></div>\n<p>主要有五项配置：</p>\n<ul>\n<li><code>zend_extension</code> 指定要加载的 xdebug 扩展文件；</li>\n<li><code>xdebug.remote_enable</code> 启用远程调试；</li>\n<li><code>xdebug.remote_autostart</code> 默认情况下需要通过指定 HTTP GET/POST 变量来启用远程调试，\n通过把该选项配置为 1 可以使所有请求自动连接至调试终端而无需指定专属变量信息。详情见：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://xdebug.org/docs/remote\">Remote Debugging</a>；</li>\n<li><code>xdebug.remote_host</code> 默认取值 localhost ，由于我们的 homestead 在虚拟机中，\n并且以 <code>config.vm.network \"private_network\"</code> 形式配置了IP，所以这里不能配置 localhost。需要手动指定 PC 机 IP 192.168.10.1；</li>\n<li><code>xdebug.remote_port</code> 默认端口号是 9000，这个在前面的 vscode 配置文件 launch.json 中有设置，与其对应即可。</li>\n</ul>\n<h2 id=\"hash-重启web服务-Nginx\">重启web服务 Nginx</h2>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">nginx -s reload\n</code></pre></div>\n<h2 id=\"hash-启动-xdebug-调试\">启动 xdebug 调试</h2>\n<p>在 vscode 中进入 debug 界面，点击 <strong>开始调试</strong> 按钮，PHPdebug 插件将在本机的 9000 端口监听来自 192.168.10.10 的网络请求；\n在项目文件 public/index.php 文件中打个断点，然后通过浏览器访问 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://homestead.app\">http://homestead.app</a> ；\n一旦 homestead 中有网络请求到 laravel 站点 ，vscode 编辑器即可接收到debug信息并在断点位置暂停下来，同时打印出相关的执行环境上下文信息。</p>\n","words":2824,"toc":[{"depth":2,"value":"基本环境","id":"hash-基本环境"},{"depth":2,"value":"安装和配置 vscode 插件 PHP Debug","id":"hash-安装和配置-vscode-插件-PHP-Debug"},{"depth":2,"value":"启动Homestead","id":"hash-启动Homestead"},{"depth":2,"value":"安装 XDebug","id":"hash-安装-XDebug"},{"depth":2,"value":"配置 XDebug","id":"hash-配置-XDebug"},{"depth":2,"value":"重启web服务 Nginx","id":"hash-重启web服务-Nginx"},{"depth":2,"value":"启动 xdebug 调试","id":"hash-启动-xdebug-调试"}],"title":"用 Visual Studio Code 调试运行在 homestead 环境中的 laravel 程序","author":"高国良","type":"posts","series":false,"date":"2017-02-05T21:58:00.791Z","tags":["laravel","php","vagrant","Nginx","debug","vscode"],"description":"通过 visualstudio 实现对基于 homestead 环境的 laravel 项目进行开发调试。本文重点讨论如何通过配置 visualstudio code、 homestead、Xdebug 以实现对 laravel 项目的调试，并不讨论涉本文中涉及到的其他软件的安装及部署细节。","draft":false,"cover":false},"prev":{"title":"开发人员解决问题的艺术：如何优雅的向别人提出你不懂的问题","author":"高国良","type":"posts","series":false,"date":1483805880791,"tags":["调试","laravel","vagrant","方法论"],"description":"如何优雅的向别人提出你不懂的问题？1.背景说明：尽可能详细的描述你做了什么；2.问题本身：尽可能详细的描述问题本身；3.环境信息：尽可能详细的提供有利于别人判断问题所在的关键点。","draft":false,"cover":false,"path":"/blogs/2017/how-to-ask-questions","slug":"2017/how-to-ask-questions"},"next":{"title":"通过 Chrome 调试运行在 IOS-safari 上的页面","author":"高国良","type":"posts","series":false,"date":1487181060791,"tags":["ios_webkit_debug_proxy","调试","debug"],"description":"ios-webkit-debug-proxy 是一个 DevTools proxy  ，项目托管在 Github 上。其使得开发者发送命令到真实（或虚拟）IOS设备中的 Safari 浏览器或 UIWebViews 中,以实现对 IOS 中 Safari 页面的调试。","draft":false,"cover":false,"path":"/blogs/2017/debugging-web-page-on-ios-safari-via-chrome","slug":"2017/debugging-web-page-on-ios-safari-via-chrome"}},"__N_SSG":true}