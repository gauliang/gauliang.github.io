{"pageProps":{"id":["posts","2016","git-submodule"],"post":{"id":["posts","2016","git-submodule"],"contentHtml":"<p>有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你 独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在 一个项目中使用另一个。</p>\n<p>Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>\n<h2 id=\"hash-开始使用子模块\">开始使用子模块</h2>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> submodule <span class=\"token function\">add</span> remotePath <span class=\"token punctuation\">[</span>localPath<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<h2 id=\"hash-克隆含有子模块的项目\">克隆含有子模块的项目</h2>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone remotePath\n<span class=\"token function\">git</span> submodule init      <span class=\"token comment\"># 初始化本地配置文件</span>\n<span class=\"token function\">git</span> submodule update    <span class=\"token comment\"># 从该项目中抓取所有数据并检出父项目中列出的合适的提交。</span>\n</code></pre></div>\n<h2 id=\"hash-在包含子模块的项目上工作\">在包含子模块的项目上工作</h2>\n<ol>\n<li>进入子模块目录中手动抓取与合并\n<ul>\n<li>进入子模块目录</li>\n<li><code>git fetch</code></li>\n<li><code>git merger origin/master</code></li>\n<li>进入主仓库目录</li>\n</ul>\n</li>\n<li>直接在主仓库里抓取与合并子模块\n<ul>\n<li><code>git submodule update --remote</code></li>\n</ul>\n</li>\n<li>在子模块上工作<br>\n当我们运行 git submodule update 从子模块仓库中抓取修改时，Git 将会获得这些改动并 更新子目录中的文件，但是会将子仓库留在一个称作 “游离的 HEAD” 的状态。 这意味着没有本 地工作分支（例如 “master”）跟踪改动。 所以你做的任何改动都不会被跟踪。</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout stable                       进入子模块并检出相应的工作分支\n<span class=\"token function\">git</span> submodule update --remote             从上游拉取数据\n<span class=\"token function\">git</span> submodule update --remote --merge     从上游拉取数据并合并\n</code></pre></div>\n<ol start=\"4\">\n<li>发布子模块改动</li>\n</ol>\n<blockquote>\n<p>如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到 麻烦，因为他们无法得到依赖的子模块改动。 那些改动只存在于我们本地的拷贝中。</p>\n</blockquote>\n<p>为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。 git push 命令接受可以设置为 <code>check</code> 或 <code>on-demand</code> 的 --recurse-submodules 参数。 如果任何提交的子模块改动没有推送那么 <code>check</code> 选项会直接使 push 操作失败。</p>\n<ul>\n<li>提交主项目时自动检测子模块是否有未提交的改动 <code>git push --recurse-submodules=check</code></li>\n<li>提交主项目时，尝试自动推送一改动的子模块 <code>git push --recurse-submodules=on-demand</code></li>\n</ul>\n<h2 id=\"hash-子模块技巧\">子模块技巧</h2>\n<ol>\n<li><strong>子模块遍历</strong><br>\n有一个 foreach 子模块命令，它能在每一个子模块中运行任意命令。 如果项目中包含了大量子模块，这会非常有用。</li>\n<li><strong>有用的别名</strong><br>\n你可能想为其中一些命令设置别名，因为它们可能会非常长而你又不能 设置选项作为它们的默认选项。</li>\n</ol>\n<h2 id=\"hash-子模块的问题\">子模块的问题</h2>\n<p>例如在有子模块的项目中切换分支可能会造成麻烦。 如果你创建一个新分支， 在其中添加一个子模块，之后切换到没有该子模块的分支上时，你仍然会有一个还未跟踪的子模块目录。</p>\n","words":1311,"toc":[{"depth":2,"value":"开始使用子模块","id":"hash-开始使用子模块"},{"depth":2,"value":"克隆含有子模块的项目","id":"hash-克隆含有子模块的项目"},{"depth":2,"value":"在包含子模块的项目上工作","id":"hash-在包含子模块的项目上工作"},{"depth":2,"value":"子模块技巧","id":"hash-子模块技巧"},{"depth":2,"value":"子模块的问题","id":"hash-子模块的问题"}],"title":"Git 子模块 - submodule","author":"高国良","type":"posts","series":false,"date":"2016-09-29T09:15:00.791Z","tags":["git"],"description":"有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你 独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在 一个项目中使用另一个。","draft":false,"cover":false},"prev":{"title":"Linux 内核概述 - Linux Kernel","author":"高国良","type":"posts","series":false,"date":1472217300791,"tags":["linux","Kernel","C"],"description":"Linux 内核学习笔记整理。 Unix unix 已有40历史，但计算机科学家仍认为其是现存操作系统中最大和最优秀的系统，它已成为一种传奇的存在，历经时间的考验却依然声名不坠。 1973 年，在用 C 语言重写了 Unix 系统后，大量的Unix衍生版本开始出现，许多公司把 unix 移植到新的机","draft":false,"cover":false,"path":"/blogs/2016/linux-kernel","slug":"2016/linux-kernel"},"next":{"title":"数学思想：为何我们把 x² 读作 x 平方","author":"高国良","type":"posts","series":false,"date":1478961480791,"tags":["无理数","古希腊","几何"],"description":"要弄清楚这个问题，我们得先认识一个人。古希腊大数学家 欧多克索斯，其在整个古代仅次于阿基米德，是一位天文学家、医生、几何学家、立法家和地理学家。","draft":false,"cover":false,"path":"/blogs/2016/mathematical-thought-why-do-we-read-x²-as-x-square","slug":"2016/mathematical-thought-why-do-we-read-x²-as-x-square"}},"__N_SSG":true}