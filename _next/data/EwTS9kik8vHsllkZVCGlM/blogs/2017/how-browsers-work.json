{"pageProps":{"id":["posts","2017","how-browsers-work"],"post":{"id":["posts","2017","how-browsers-work"],"contentHtml":"<p>英文原文</p>\n<p><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\">http://taligarsiel.com/Projects/howbrowserswork1.htm</a></p>\n<h1 id=\"hash-引言\">引言</h1>\n<p>浏览器可能是最广泛使用的软件了，本书我将介绍浏览器是如何在幕后工作的。\n我们会了解到从你在浏览器地址栏中输入 google.com 直至浏览器屏幕上显示 Google 页面的整个过程中都发生了什么。</p>\n<h2 id=\"hash-本书涉及的浏览器\">本书涉及的浏览器</h2>\n<p>目前有五大主流的浏览器，它们分别是 IE、Firefox、Safari、Chrome 和 Opera。我将从开源浏览器举例，如 Firefox、Chrome 和 Safari，\n这些部分是开源的。根据 W3C 的统计，目前开源浏览器的市场份额已占很大比重。</p>\n<h2 id=\"hash-浏览器主要功能\">浏览器主要功能</h2>\n<p>浏览器主要功能是呈现您在网络上选择的资源，从服务器端请求您需要的资源并最终显示在您的显示器中。\n这些资源通常是 HTML ，但也可能是 PDF、图片或其他类型，资源位置由用户通过 URI 指定。更多相关信息可参考网络相关章节。</p>\n<p>HTML 和 CSS 规范指定了浏览器该如何解析和显示 THML 文件，这些规范由 W3C(world wide web consortium) 进行维护，W3C 是制定 web 标准的组织。\n当前最新版本的 HTML 版本是 5 ，最新的 CSS 版本是 3 。</p>\n<p>旧版本的古老浏览器都只实现了规范中的某一部分，并且开发了自己独有的扩展（规范），这给网络开发者造成了很大麻烦 —— 许多兼容性问题。\n就目前而言，大多数新版本浏览器都遵守并实现了大量的规范，但由于种种原因仍有浏览器或多或少的与标准规范存在出入。</p>\n<p>各大厂商的浏览器界面其实大同小异，都具备一些通用的界面元素：</p>\n<ul>\n<li>用于输入网址的地址栏</li>\n<li>返回和前进按钮</li>\n<li>书签选项</li>\n<li>用于刷新和停止当前页面的刷新和停止按钮</li>\n<li>主页按钮</li>\n</ul>\n<p>浏览器界面并没有在任何形式的规范中被提及，但存在一些最佳实践，这建立在浏览器多年的发展和相互之间的大量借鉴模仿之上。 HTML 规范并没有定义浏览器必须具备哪些界面元素，但列出了一些公共的清单。其中有地址栏、状态栏和工具条。当然，各浏览器也会有一些自己独有的功能实现，比如 Firefox 的下载管理。更多相��信息可参考 用户界面章节 。</p>\n<h2 id=\"hash-浏览器整体架构\">浏览器整体架构</h2>\n<p>浏览器主要组件包括：</p>\n<ol>\n<li>用户操作界面 - 这包括地址栏、前进/后退按钮、书签栏菜单等等。</li>\n<li>浏览器引擎 - 用于查询和处理渲染引擎的接口</li>\n<li>渲染引擎 - 负责显示请求的内容。比如，你请求的内容是HTML，它负责解析HTML和CSS并在屏幕上显示出来。</li>\n<li>网络 - 用于处理网络连接，比如HTTP请求。它具有平台无关性及在各平台下的实现。</li>\n<li>UI后端- 用于绘制基本部件、如组合框和窗口。它公开了一个不针对特定平台的通用接口。在底层他调用操作系统的UI方法。</li>\n<li>javascript 解释器 - 解析和执行 javascript 代码。</li>\n<li>数据存储 - 这是一个持久层。用于存储浏览器需要存储到本地硬盘的所有数据，如cookie、HTML5 定义的 web database 等等。</li>\n</ol>\n<div class=\"image-widget\"><img src=\"/attachments/posts/2017/how-browsers-work.files/634103-20151122224614874-165784236.png\" alt=\"\"></div>\n<p>图 1：浏览器主要组件</p>\n<p>需要注意的是chrome浏览器，他与大多数浏览器不同， 它的每一个标签页都单独拥有一个进程并拥有独立的渲染引擎实例。</p>\n<h2 id=\"hash-组件间的通信\">组件间的通信</h2>\n<p>Firefox 和 chrome 都开发了自己特有的组建通信机制，这将会在特殊的章节中讨论。</p>\n<h1 id=\"hash-渲染引擎\">渲染引擎</h1>\n<p>未完待续</p>\n","words":1369,"toc":[{"depth":2,"value":"本书涉及的浏览器","id":"hash-本书涉及的浏览器"},{"depth":2,"value":"浏览器主要功能","id":"hash-浏览器主要功能"},{"depth":2,"value":"浏览器整体架构","id":"hash-浏览器整体架构"},{"depth":2,"value":"组件间的通信","id":"hash-组件间的通信"}],"title":"浏览器是如何工作的 - 译文","author":"高国良","type":"posts","series":false,"date":"2017-07-11T08:31:00.791Z","tags":["browser"],"description":"我们会了解到从你在浏览器地址栏中输 google.com 直至浏览器屏幕上显示 Google 页面的整个过程中都发生了什么。","draft":false,"cover":false},"prev":{"title":"ES 2015/6 新特性汇总","author":"高国良","type":"posts","series":false,"date":1497831600791,"tags":["javascript","web","ES6"],"description":"ES 2015/6 新增内容还是比较多的，这里仅大纲性的列举一下这些特性。其实，每个点挖进去都会有很多学问在里头，本文旨在汇总，所以不对这些特性进行深层次的讨论及研究。随后有时间的话，在单独写几篇博客对常用的点进行深挖，与大家进行深度交流。","draft":false,"cover":false,"path":"/blogs/2017/es-2015-6-features","slug":"2017/es-2015-6-features"},"next":{"title":"配置同时使用 Gitlab 和 Github 的开发环境","author":"高国良","type":"posts","series":false,"date":1516810860791,"tags":["git","ssh"],"description":"Git 客户端与服务器端的通信支持多种协议，ssh 最常用。ssh的公钥登录流程：用户将自己的公钥存储在远程主机，登录时，远程主机会向用户发送一条消息，用户用自己的私钥加密后，再发给服务器。远程主机用事先存储的公钥进行解密，如果成功，就证明用户可信。 生成公私密钥 用户必须事先提供自己的公钥给服务器","draft":false,"cover":false,"path":"/blogs/2018/configure-the-development-environment-both-gitlab-and-github","slug":"2018/configure-the-development-environment-both-gitlab-and-github"}},"__N_SSG":true}