{"pageProps":{"id":["posts","2019","installation-and-configuration-harbor"],"post":{"id":["posts","2019","installation-and-configuration-harbor"],"contentHtml":"<p>Harbor can be installed by one of three approaches:</p>\n<ul>\n<li>\n<p><strong>Online installer:</strong> The installer downloads Harbor's images from Docker hub. For this reason, the installer is very small in size.</p>\n</li>\n<li>\n<p><strong>Offline installer:</strong> Use this installer when the host does not have an Internet connection. The installer contains pre-built images so its size is larger.</p>\n</li>\n</ul>\n<p>All installers can be downloaded from the <strong><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/goharbor/harbor/releases\">official release</a></strong> page.</p>\n<p>This guide describes the steps to install and configure Harbor by using the online or offline installer. The installation processes are almost the same.</p>\n<p>If you run a previous version of Harbor, you may need to update <code>harbor.cfg</code> and migrate the data to fit the new database schema.</p>\n<p>In addition, the deployment instructions on Kubernetes has been created by the community.</p>\n<h2 id=\"hash-Prerequisites-for-the-target-host\">Prerequisites for the target host</h2>\n<p>Harbor is deployed as several Docker containers, and, therefore, can be deployed on any Linux distribution that supports Docker. The target host requires Python, Docker, and Docker Compose to be installed.</p>\n<h3 id=\"hash-Hardware\">Hardware</h3>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th>Resource</th>\n<th>Capacity</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>minimal 2 CPU</td>\n<td>4 CPU is preferred</td>\n</tr>\n<tr>\n<td>Mem</td>\n<td>minimal 4GB</td>\n<td>8GB is preferred</td>\n</tr>\n<tr>\n<td>Disk</td>\n<td>minimal 40GB</td>\n<td>160GB is preferred</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id=\"hash-Software\">Software</h3>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th>Software</th>\n<th>Version</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Python</td>\n<td>version 2.7 or higher</td>\n<td>Note that you may have to install Python on Linux distributions (Gentoo, Arch) that do not come with a Python interpreter installed by default</td>\n</tr>\n<tr>\n<td>Docker engine</td>\n<td>version 17.03.0-ce+ or higher</td>\n<td>For installation instructions, please refer to: <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://docs.docker.com/engine/installation/\">https://docs.docker.com/engine/installation/</a></td>\n</tr>\n<tr>\n<td>Docker Compose</td>\n<td>version 1.18.0 or higher</td>\n<td>For installation instructions, please refer to: <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://docs.docker.com/compose/install/\">https://docs.docker.com/compose/install/</a></td>\n</tr>\n<tr>\n<td>Openssl</td>\n<td>latest is preferred</td>\n<td>Generate certificate and keys for Harbor</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id=\"hash-Network-ports\">Network ports</h3>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th>Port</th>\n<th>Protocol</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>443</td>\n<td>HTTPS</td>\n<td>Harbor portal and core API will accept requests on this port for https protocol</td>\n</tr>\n<tr>\n<td>4443</td>\n<td>HTTPS</td>\n<td>Connections to the Docker Content Trust service for Harbor, only needed when Notary is enabled</td>\n</tr>\n<tr>\n<td>80</td>\n<td>HTTP</td>\n<td>Harbor portal and core API will accept requests on this port for http protocol</td>\n</tr>\n</tbody>\n</table></div>\n<h2 id=\"hash-Installation-Steps\">Installation Steps</h2>\n<p>The installation steps boil down to the following</p>\n<ol>\n<li>Download the installer;</li>\n<li>Configure <strong>harbor.cfg</strong>;</li>\n<li>Run <strong>install.sh</strong> to install and start Harbor;</li>\n</ol>\n<h3 id=\"hash-Downloading-the-installer:\">Downloading the installer:</h3>\n<p>The binary of the installer can be downloaded from the <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/goharbor/harbor/releases\">release</a> page. Choose either online or offline installer. Use <em>tar</em> command to extract the package.</p>\n<p>Online installer:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">    $ tar xvf harbor-online-installer-&#x26;lt;version&#x26;gt;.tgz</code></pre></div>\n<p>Offline installer:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">    $ tar xvf harbor-offline-installer-&#x26;lt;version&#x26;gt;.tgz</code></pre></div>\n<h3 id=\"hash-Configuring-Harbor\">Configuring Harbor</h3>\n<p>Configuration parameters are located in the file <strong>harbor.cfg</strong>.</p>\n<p>There are two categories of parameters in harbor.cfg, <strong>required parameters</strong> and <strong>optional parameters</strong>.</p>\n<ul>\n<li>\n<p><strong>required parameters</strong>: These parameters are required to be set in the configuration file. They will take effect if a user updates them in <code>harbor.cfg</code> and run the <code>install.sh</code> script to reinstall Harbor.</p>\n</li>\n<li>\n<p><strong>optional parameters</strong>: These parameters are optional for updating, i.e. user can leave them as default and update them on Web Portal after Harbor is started.  If they are set in <code>harbor.cfg</code>, they only take effect in the first launch of Harbor.\r\nSubsequent update to these parameters in <code>harbor.cfg</code> will be ignored.</p>\n<p><strong>Note:</strong> If you choose to set these parameters via the Portal, be sure to do so right after Harbor\r\nis started. In particular, you must set the desired <strong>auth_mode</strong> before registering or creating any new users in Harbor. When there are users in the system (besides the default admin user),\r\n<strong>auth_mode</strong> cannot be changed.</p>\n</li>\n</ul>\n<p>The parameters are described below - note that at the very least, you will need to change the <strong>hostname</strong> attribute.</p>\n<h4 id=\"hash-Required-parameters:\">Required parameters:</h4>\n<ul>\n<li><strong>hostname</strong>: The target host's hostname, which is used to access the Portal and the registry service. It should be the IP address or the fully qualified domain name (FQDN) of your target machine, e.g., <code>192.168.1.10</code> or <code>reg.yourdomain.com</code>. <em>Do NOT use <code>localhost</code> or <code>127.0.0.1</code> for the hostname - the registry service needs to be accessible by external clients!</em></li>\n<li><strong>ui_url_protocol</strong>: (<strong>http</strong> or <strong>https</strong>.  Default is <strong>http</strong>) The protocol used to access the Portal and the token/notification service.  If Notary is enabled, this parameter has to be <em>https</em>.  By default, this is <em>http</em>. To set up the https protocol, refer to <strong><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"configure_https.md\">Configuring Harbor with HTTPS Access</a></strong>.</li>\n<li><strong>db_password</strong>: The root password for the PostgreSQL database used for <strong>db_auth</strong>. <em>Change this password for any production use!</em></li>\n<li><strong>max_job_workers</strong>: (default value is <strong>10</strong>) The maximum number of replication workers in job service. For each image replication job, a worker synchronizes all tags of a repository to the remote destination. Increasing this number allows more concurrent replication jobs in the system. However, since each worker consumes a certain amount of network/CPU/IO resources, please carefully pick the value of this attribute based on the hardware resource of the host.</li>\n<li><strong>customize_crt</strong>: (<strong>on</strong> or <strong>off</strong>.  Default is <strong>on</strong>) When this attribute is <strong>on</strong>, the prepare script creates private key and root certificate for the generation/verification of the registry's token. Set this attribute to <strong>off</strong> when the key and root certificate are supplied by external sources. Refer to <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"customize_token_service.md\">Customize Key and Certificate of Harbor Token Service</a> for more info.</li>\n<li><strong>ssl_cert</strong>: The path of SSL certificate, it's applied only when the protocol is set to https.</li>\n<li><strong>ssl_cert_key</strong>: The path of SSL key, it's applied only when the protocol is set to https.</li>\n<li><strong>secretkey_path</strong>: The path of key for encrypt or decrypt the password of a remote registry in a replication policy.</li>\n<li><strong>log_rotate_count</strong>: Log files are rotated <strong>log_rotate_count</strong> times before being removed. If count is 0, old versions are removed rather than rotated.</li>\n<li><strong>log_rotate_size</strong>: Log files are rotated only if they grow bigger than <strong>log_rotate_size</strong> bytes. If size is followed by k, the size is assumed to be in kilobytes. If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G are all valid.</li>\n<li><strong>http_proxy</strong>: Config http proxy for Clair, e.g. <code>http://my.proxy.com:3128</code>.</li>\n<li><strong>https_proxy</strong>: Config https proxy for Clair, e.g. <code>http://my.proxy.com:3128</code>.</li>\n<li><strong>no_proxy</strong>: Config no proxy for Clair, e.g. <code>127.0.0.1,localhost,core,registry</code>.</li>\n<li><strong>harbor_admin_password</strong>: The administrator's initial password. This password only takes effect for the first time Harbor launches. After that, this setting is ignored and the administrator's password should be set in the Portal. <em>Note that the default username/password are <strong>admin/Harbor12345</strong> .</em></li>\n</ul>\n<h3 id=\"hash-Configuring-storage-backend-optional-\">Configuring storage backend (optional)</h3>\n<p>By default, Harbor stores images on your local filesystem. In a production environment, you may consider\r\nusing other storage backend instead of the local filesystem, like S3, OpenStack Swift, Ceph, etc.\r\nThese parameters are configurations for registry.</p>\n<ul>\n<li><strong>registry_storage_provider_name</strong>:  Storage provider name of registry, it can be filesystem, s3, gcs, azure, etc. Default is filesystem.</li>\n<li><strong>registry_storage_provider_config</strong>: Comma separated \"key: value\" pairs for storage provider config, e.g. \"key1: value, key2: value2\". Default is empty string.</li>\n<li><strong>registry_custom_ca_bundle</strong>:  The path to the custom root ca certificate, which will be injected into the truststore of registry's and chart repository's containers.  This is usually needed when the user hosts a internal storage with self signed certificate.</li>\n</ul>\n<p>For example, if you use Openstack Swift as your storage backend, the parameters may look like this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">registry_storage_provider_name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">swift</span>\n<span class=\"token key attr-name\">registry_storage_provider_config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">username: admin, password: ADMIN_PASS, authurl: http://keystone_addr:35357/v3/auth, tenant: admin, domain: default, region: regionOne, container: docker_images</span>\"</span>\n</code></pre></div>\n<p><em>NOTE: For detailed information on storage backend of a registry, refer to <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://docs.docker.com/registry/configuration/\">Registry Configuration Reference</a> .</em></p>\n<h3 id=\"hash-Finishing-installation-and-starting-Harbor\">Finishing installation and starting Harbor</h3>\n<p>Once <strong>harbor.cfg</strong> and storage backend (optional) are configured, install and start Harbor using the <code>install.sh</code> script.  Note that it may take some time for the online installer to download Harbor images from Docker hub.</p>\n<h3 id=\"hash-Default-installation-without-Notary/Clair-\">Default installation (without Notary/Clair)</h3>\n<p>Harbor has integrated with Notary and Clair (for vulnerability scanning). However, the default installation does not include Notary or Clair service.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">    $ sudo ./install.sh</code></pre></div>\n<p>If everything worked properly, you should be able to open a browser to visit the admin portal at <strong><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://reg.yourdomain.com\">http://reg.yourdomain.com</a></strong> (change <em>reg.yourdomain.com</em> to the hostname configured in your <code>harbor.cfg</code>). Note that the default administrator username/password are admin/Harbor12345 .</p>\n<p>Log in to the admin portal and create a new project, e.g. <code>myproject</code>. You can then use docker commands to login and push images (By default, the registry server listens on port 80):</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker login reg.yourdomain.com\r\n$ docker push reg.yourdomain.com/myproject/myrepo:mytag</code></pre></div>\n<p><strong>IMPORTANT:</strong> The default installation of Harbor uses <em>HTTP</em> - as such, you will need to add the option <code>--insecure-registry</code> to your client's Docker daemon and restart the Docker service.</p>\n<h3 id=\"hash-Installation-with-Notary\">Installation with Notary</h3>\n<p>To install Harbor with Notary service, add a parameter when you run <code>install.sh</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">    $ sudo ./install.sh --with-notary</code></pre></div>\n<p><strong>Note</strong>: For installation with Notary the parameter <strong>ui_url_protocol</strong> must be set to \"https\". For configuring HTTPS please refer to the following sections.</p>\n<p>More information about Notary and Docker Content Trust, please refer to Docker's documentation:\r\n<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://docs.docker.com/engine/security/trust/content_trust/\">https://docs.docker.com/engine/security/trust/content_trust/</a></p>\n<h3 id=\"hash-Installation-with-Clair\">Installation with Clair</h3>\n<p>To install Harbor with Clair service, add a parameter when you run <code>install.sh</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">    $ sudo ./install.sh --with-clair</code></pre></div>\n<p>For more information about Clair, please refer to Clair's documentation:\r\n<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://coreos.com/clair/docs/2.0.1/\">https://coreos.com/clair/docs/2.0.1/</a></p>\n<h3 id=\"hash-Installation-with-chart-repository-service\">Installation with chart repository service</h3>\n<p>To install Harbor with chart repository service, add a parameter when you run <code>install.sh</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">    $ sudo ./install.sh --with-chartmuseum</code></pre></div>\n<p><strong>Note</strong>: If you want to install Notary, Clair and chart repository service, you must specify all the parameters in the same command:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">    $ sudo ./install.sh --with-notary --with-clair --with-chartmuseum</code></pre></div>\n<p>For information on how to use Harbor, please refer to <strong><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"user_guide.md\">User Guide of Harbor</a></strong> .</p>\n<h3 id=\"hash-Configuring-Harbor-with-HTTPS-access\">Configuring Harbor with HTTPS access</h3>\n<p>Harbor does not ship with any certificates, and, by default, uses HTTP to serve requests. While this makes it relatively simple to set up and run - especially for a development or testing environment - it is <strong>not</strong> recommended for a production environment.  To enable HTTPS, please refer to <strong><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"configure_https.md\">Configuring Harbor with HTTPS Access</a></strong>.</p>\n<h3 id=\"hash-Managing-Harbor&#x27;s-lifecycle\">Managing Harbor's lifecycle</h3>\n<p>You can use docker-compose to manage the lifecycle of Harbor. Some useful commands are listed as follows (must run in the same directory as <em>docker-compose.yml</em>).</p>\n<p>Stopping Harbor:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> stop\nStopping nginx              <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping harbor-portal      <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping harbor-jobservice  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping harbor-core        <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping registry           <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping redis              <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping registryctl        <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping harbor-db          <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping harbor-log         <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\n</code></pre></div>\n<p>Restarting Harbor after stopping:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> start\nStarting log         <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting registry    <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting registryctl <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting postgresql  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting core        <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting portal      <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting redis       <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting jobservice  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting proxy       <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\n</code></pre></div>\n<p>To change Harbor's configuration, first stop existing Harbor instance and update <code>harbor.cfg</code>. Then run <code>prepare</code> script to populate the configuration. Finally re-create and start Harbor's instance:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> down -v\n$ <span class=\"token function\">vim</span> harbor.cfg\n$ <span class=\"token function\">sudo</span> prepare\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> up -d\n</code></pre></div>\n<p>Removing Harbor's containers while keeping the image data and Harbor's database files on the file system:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> down -v\n</code></pre></div>\n<p>Removing Harbor's database and image data (for a clean re-installation):</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">rm</span> -r /data/database\n$ <span class=\"token function\">rm</span> -r /data/registry\n</code></pre></div>\n<h4><em>Managing lifecycle of Harbor when it's installed with Notary</em></h4>\n<p>When Harbor is installed with Notary, an extra template file <code>docker-compose.notary.yml</code> is needed for docker-compose commands. The docker-compose commands to manage the lifecycle of Harbor are:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> -f ./docker-compose.yml -f ./docker-compose.notary.yml <span class=\"token punctuation\">[</span> up<span class=\"token operator\">|</span>down<span class=\"token operator\">|</span><span class=\"token function\">ps</span><span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>start <span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>For example, if you want to change configuration in <code>harbor.cfg</code> and re-deploy Harbor when it's installed with Notary, the following commands should be used:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> -f ./docker-compose.yml -f ./docker-compose.notary.yml down -v\n$ <span class=\"token function\">vim</span> harbor.cfg\n$ <span class=\"token function\">sudo</span> prepare --with-notary\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> -f ./docker-compose.yml -f ./docker-compose.notary.yml up -d\n</code></pre></div>\n<h4><em>Managing lifecycle of Harbor when it's installed with Clair</em></h4>\n<p>When Harbor is installed with Clair, an extra template file <code>docker-compose.clair.yml</code> is needed for docker-compose commands. The docker-compose commands to manage the lifecycle of Harbor are:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.clair.yml [ up|down|ps|stop|start ]</code></pre></div>\n<p>For example, if you want to change configuration in <code>harbor.cfg</code> and re-deploy Harbor when it's installed with Clair, the following commands should be used:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.clair.yml down -v\r\n$ vim harbor.cfg\r\n$ sudo prepare --with-clair\r\n$ sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.clair.yml up -d</code></pre></div>\n<h4><em>Managing lifecycle of Harbor when it's installed with chart repository service</em></h4>\n<p>When Harbor is installed with chart repository service, an extra template file <code>docker-compose.chartmuseum.yml</code> is needed for docker-compose commands. The docker-compose commands to manage the lifecycle of Harbor are:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.chartmuseum.yml [ up|down|ps|stop|start ]</code></pre></div>\n<p>For example, if you want to change configuration in <code>harbor.cfg</code> and re-deploy Harbor when it's installed with chart repository service, the following commands should be used:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.chartmuseum.yml down -v\r\n$ vim harbor.cfg\r\n$ sudo prepare --with-chartmuseum\r\n$ sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.chartmuseum.yml up -d</code></pre></div>\n<h4><em>Managing lifecycle of Harbor when it's installed with Notary, Clair and chart repository service</em></h4>\n<p>If you want to install Notary, Clair and chart repository service together, you should include all the components in the docker-compose and prepare commands:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.notary.yml -f ./docker-compose.clair.yml -f ./docker-compose.chartmuseum.yml down -v\r\n$ vim harbor.cfg\r\n$ sudo prepare --with-notary --with-clair --with-chartmuseum\r\n$ sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.notary.yml -f ./docker-compose.clair.yml -f ./docker-compose.chartmuseum.yml up -d</code></pre></div>\n<p>Please check the <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://docs.docker.com/compose/reference/\">Docker Compose command-line reference</a> for more on docker-compose.</p>\n<h3 id=\"hash-Persistent-data-and-log-files\">Persistent data and log files</h3>\n<p>By default, registry data is persisted in the host's <code>/data/</code> directory.  This data remains unchanged even when Harbor's containers are removed and/or recreated.</p>\n<p>In addition, Harbor uses <em>rsyslog</em> to collect the logs of each container. By default, these log files are stored in the directory <code>/var/log/harbor/</code> on the target host for troubleshooting.</p>\n<h2 id=\"hash-Configuring-Harbor-listening-on-a-customized-port\">Configuring Harbor listening on a customized port</h2>\n<p>By default, Harbor listens on port 80(HTTP) and 443(HTTPS, if configured) for both admin portal and docker commands, you can configure it with a customized one.</p>\n<h3 id=\"hash-For-HTTP-protocol\">For HTTP protocol</h3>\n<p>1.Modify docker-compose.yml<br>\nReplace the first \"80\" to a customized port, e.g. 8888:80.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">proxy:\r\n    image: goharbor/nginx-photon:v1.6.0\r\n    container_name: nginx\r\n    restart: always\r\n    volumes:\r\n      - ./common/config/nginx:/etc/nginx:z\r\n    ports:\r\n      - 8888:80\r\n      - 443:443\r\n    depends_on:\r\n      - postgresql\r\n      - registry\r\n      - core\r\n      - portal\r\n      - log\r\n    logging:\r\n      driver: &#x26;quot;syslog&#x26;quot;\r\n      options:  \r\n        syslog-address: &#x26;quot;tcp://127.0.0.1:1514&#x26;quot;\r\n        tag: &#x26;quot;proxy&#x26;quot;</code></pre></div>\n<p>2.Modify harbor.cfg, add the port to the parameter \"hostname\"</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">hostname = 192.168.0.2:8888</code></pre></div>\n<p>3.Re-deploy Harbor referring to previous section \"Managing Harbor's lifecycle\".</p>\n<h3 id=\"hash-For-HTTPS-protocol\">For HTTPS protocol</h3>\n<p>1.Enable HTTPS in Harbor by following this <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\">guide</a>.<br>\n2.Modify docker-compose.yml<br>\nReplace the first \"443\" to a customized port, e.g. 8888:443.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">proxy:\r\n    image: goharbor/nginx-photon:v1.6.0\r\n    container_name: nginx\r\n    restart: always\r\n    volumes:\r\n      - ./common/config/nginx:/etc/nginx:z\r\n    ports:\r\n      - 80:80\r\n      - 8888:443\r\n    depends_on:\r\n      - postgresql\r\n      - registry\r\n      - core\r\n      - portal\r\n      - log\r\n    logging:\r\n      driver: &#x26;quot;syslog&#x26;quot;\r\n      options:  \r\n        syslog-address: &#x26;quot;tcp://127.0.0.1:1514&#x26;quot;\r\n        tag: &#x26;quot;proxy&#x26;quot;</code></pre></div>\n<p>3.Modify harbor.cfg, add the port to the parameter \"hostname\"</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">hostname = 192.168.0.2:8888</code></pre></div>\n<p>4.Re-deploy Harbor referring to previous section \"Managing Harbor's lifecycle\".</p>\n<h2 id=\"hash-Configuring-Harbor-using-the-external-database\">Configuring Harbor using the external database</h2>\n<p>Currently, only PostgreSQL database is supported by Harbor.<br>\nTo user an external database, just uncomment the <code>external_database</code> section in <code>harbor.yml</code> and fill the necessary information. Four databases are needed to be create first by users for Harbor core, Clair, Notary server and Notary signer. And the tables will be generated automatically when Harbor starting up.</p>\n<h2 id=\"hash-Manage-user-settings\">Manage user settings</h2>\n<p>After release 1.8.0, User settings are separated with system settings, and all user settings should be configured in web console or by HTTP request.\r\nPlease refer <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"configure_user_settings.md\">Configure User Settings</a> to config user settings.</p>\n<h2 id=\"hash-Performance-tuning\">Performance tuning</h2>\n<p>By default, Harbor limits the CPU usage of Clair container to 150000 and avoids its using up all the CPU resources. This is defined in the docker-compose.clair.yml file. You can modify it based on your hardware configuration.</p>\n<h2 id=\"hash-Troubleshooting\">Troubleshooting</h2>\n<ol>\n<li>When Harbor does not work properly, run the below commands to find out if all containers of Harbor are in <strong>UP</strong> status:</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">    $ sudo docker-compose ps\r\n        Name                     Command               State                    Ports                   \r\n  -----------------------------------------------------------------------------------------------------------------------------\r\n  harbor-core         /harbor/start.sh                 Up\r\n  harbor-db           /entrypoint.sh postgres          Up      5432/tcp\r\n  harbor-jobservice   /harbor/start.sh                 Up\r\n  harbor-log          /bin/sh -c /usr/local/bin/ ...   Up      127.0.0.1:1514-&#x26;gt;10514/tcp\r\n  harbor-portal       nginx -g daemon off;             Up      80/tcp\r\n  nginx               nginx -g daemon off;             Up      0.0.0.0:443-&#x26;gt;443/tcp, 0.0.0.0:4443-&#x26;gt;4443/tcp, 0.0.0.0:80-&#x26;gt;80/tcp\r\n  redis               docker-entrypoint.sh redis ...   Up      6379/tcp\r\n  registry            /entrypoint.sh /etc/regist ...   Up      5000/tcp\r\n  registryctl         /harbor/start.sh                 Up</code></pre></div>\n<p>If a container is not in <strong>UP</strong> state, check the log file of that container in directory <code>/var/log/harbor</code>. For example, if the container <code>harbor-core</code> is not running, you should look at the log file <code>core.log</code>.</p>\n<p>2.When setting up Harbor behind an nginx proxy or elastic load balancing, look for the line below, in <code>common/templates/nginx/nginx.http.conf</code> and remove it from the sections if the proxy already has similar settings: <code>location /</code>, <code>location /v2/</code> and <code>location /service/</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">proxy_set_header X-Forwarded-Proto $scheme;</code></pre></div>\n<p>and re-deploy Harbor refer to the previous section \"Managing Harbor's lifecycle\".</p>\n","words":17342,"toc":[{"depth":2,"value":"Prerequisites for the target host","id":"hash-Prerequisites-for-the-target-host"},{"depth":2,"value":"Installation Steps","id":"hash-Installation-Steps"},{"depth":2,"value":"Configuring Harbor listening on a customized port","id":"hash-Configuring-Harbor-listening-on-a-customized-port"},{"depth":2,"value":"Configuring Harbor using the external database","id":"hash-Configuring-Harbor-using-the-external-database"},{"depth":2,"value":"Manage user settings","id":"hash-Manage-user-settings"},{"depth":2,"value":"Performance tuning","id":"hash-Performance-tuning"},{"depth":2,"value":"Troubleshooting","id":"hash-Troubleshooting"}],"title":"Harbor — Installation and Configuration Guide","author":"高国良","type":"posts","series":false,"date":"2019-05-12T22:54:00.791Z","tags":["docker"],"description":"Harbor is an open source trusted cloud native registry project that stores, signs, and scans content.","draft":false,"cover":false},"prev":{"title":"Fedora 30 安装 Gradle","author":"高国良","type":"posts","series":false,"date":1557673620791,"tags":["Gradle","java","linux"],"description":"Gradle 能够在所有主流操作系统上运行，只要具备 Java JDK/JRE 环境即可，Java 版本必须为 8或更高。","draft":false,"cover":false,"path":"/blogs/2019/install-gradle-on-fedora30","slug":"2019/install-gradle-on-fedora30"},"next":{"title":"MySql 5.7 重置root密码","author":"高国良","type":"posts","series":false,"date":1557773280791,"tags":["mysql","password"],"description":false,"draft":false,"cover":false,"path":"/blogs/2019/reset-mysql-5.7-password","slug":"2019/reset-mysql-5.7-password"}},"__N_SSG":true}