{"pageProps":{"id":["series","react","react-glossary"],"post":{"id":["series","react","react-glossary"],"contentHtml":"<p>收集、整理 React 相关术语及其解释，本文将持续更新。</p>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th>版本</th>\n<th>状态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>React 17</td>\n<td>收录中</td>\n</tr>\n<tr>\n<td>React 18</td>\n<td>收录中</td>\n</tr>\n</tbody>\n</table></div>\n<h2 id=\"hash-Elements\">Elements</h2>\n<p>在 React 中，元素是描述组件实例或 DOM 节点及其所需属性的普通对象。它仅包含有关组件类型（例如 a Button）、\n其属性（例如 its color）以及其中的任何子元素的信息。</p>\n<p>当一个元素的 type 是一个字符串时，它代表一个具有该标签名称的 DOM 节点，props 对应于它的属性。例如：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'button button-blue'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'OK!'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>此元素只是将以下 HTML 表示为普通对象的一种方式：</p>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>button button-blue<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>b</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">OK!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>b</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>当 <code>type</code> 是一个 <code>function</code> 或 <code>class</code> 时，它是 React 组建，React 组建的描述与此相通。如：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Button</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'OK!'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 当 React 渲染 Button 元素时，Button 将返回如下</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'button button-blue'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'OK!'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>一个用于描述组件的元素也是一个元素，就像一个用于描述 DOM 节点的元素一样。它们可以彼此嵌套，互相混合。\nReact 将重复这个过程直到它知道了页面上每一个组件之下的 DOM 标签元素。</p>\n<p>[摘自] <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://zh-hans.reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html\">https://zh-hans.reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html</a></p>\n<h2 id=\"hash-Renderer\">Renderer</h2>\n<p>React 最初只是服务于 DOM，但是这之后被改编成也能同时支持原生平台的 React Native。\n因此，在 React 内部机制中引入了 <strong>渲染器</strong> 这个概念。</p>\n<p>渲染器位于 <code>packages/</code> 目录下：</p>\n<ul>\n<li><code>React DOM Renderer</code> 将 React 组件渲染成 DOM。它实现了全局 ReactDOMAPI，这在npm上作为 react-dom 包。\n这也可以作为单独浏览器版本使用，称为 react-dom.js，导出一个 ReactDOM 的全局对象.</li>\n<li><code>React Native Renderer</code> 将 React 组件渲染为 Native 视图。此渲染器在 React Native 内部使用。</li>\n<li><code>React Test Renderer</code> 将 React 组件渲染为 JSON 树。这用于 Jest 的快照测试特性。在 npm 上作为 react-test-renderer 包发布。</li>\n</ul>\n<p>[摘自]<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://zh-hans.reactjs.org/docs/codebase-overview.html#renderers\">https://zh-hans.reactjs.org/docs/codebase-overview.html#renderers</a></p>\n<h2 id=\"hash-Reconcilers\">Reconcilers</h2>\n<p>即便 React DOM 和 React Native 渲染器的区别很大，但也需要共享一些逻辑。\n特别是 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://zh-hans.reactjs.org/docs/reconciliation.html\">协调</a> 算法需要尽可能相似，\n这样可以让声明式渲染，自定义组件，state，生命周期方法和 refs 等特性，保持跨平台工作一致。</p>\n<h3 id=\"hash->-Stack-reconciler\">> Stack reconciler</h3>\n<p>Stack reconciler 是 React 15 及更早的解决方案。虽然已经停止了对它的使用,\n但是这在 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://zh-hans.reactjs.org/docs/implementation-notes.html\">implementation-notes</a> 有详细的文档。</p>\n<h3 id=\"hash->-Fiber-reconciler\">> Fiber reconciler</h3>\n<p>Fiber reconciler 是一个新尝试，致力于解决 stack reconciler 中固有的问题，同时解决一些历史遗留问题。Fiber 从 React 16 开始变成了默认的 reconciler。</p>\n<p>源代码在 <code>packages/react-reconciler</code> 目录下</p>\n<p>Fiber 相关资料：\n<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">React Fiber Architecture</a>\n<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\">Inside Fiber</a></p>\n<h2 id=\"hash-Event-System\">Event System</h2>\n<p>React 在原生事件基础上进行了封装，以抹平浏览器间差异。其源码在 <code>packages/react-dom/src/events</code> 目录下。</p>\n<h2 id=\"hash-参考\">参考</h2>\n<ul>\n<li><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://reactjs.org/docs/codebase-overview.html#renderers\">https://reactjs.org/docs/codebase-overview.html#renderers</a></li>\n<li><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://reactjs.org/docs/implementation-notes.html\">https://reactjs.org/docs/implementation-notes.html</a></li>\n</ul>\n","words":2166,"toc":[{"depth":2,"value":"Elements","id":"hash-Elements"},{"depth":2,"value":"Renderer","id":"hash-Renderer"},{"depth":2,"value":"Reconcilers","id":"hash-Reconcilers"},{"depth":2,"value":"Event System","id":"hash-Event-System"},{"depth":2,"value":"参考","id":"hash-参考"}],"title":"React 术语表","author":"GauLiang","type":"series","series":"react","date":"2022-06-25T00:46:37.294Z","tags":["react","fiber","renderer"],"description":"收集、整理 React 相关术语及其解释。","draft":false,"cover":false},"prev":null,"next":null},"__N_SSG":true}