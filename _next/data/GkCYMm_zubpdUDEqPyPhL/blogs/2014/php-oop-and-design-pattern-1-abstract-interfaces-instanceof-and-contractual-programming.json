{"pageProps":{"id":["posts","2014","php-oop-and-design-pattern-1-abstract-interfaces-instanceof-and-contractual-programming"],"post":{"id":["posts","2014","php-oop-and-design-pattern-1-abstract-interfaces-instanceof-and-contractual-programming"],"contentHtml":"<p>PHP高级程序设计 学习笔记 2014.06.09</p>\n<h2 id=\"hash-什么是面向对象编程\">什么是面向对象编程</h2>\n<p>面向对象编程（Object Oriented Programming，OOP）是一种计算机编程架构。OOP 的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。OOP 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。</p>\n<h2 id=\"hash-PHP中的抽象类\">PHP中的抽象类</h2>\n<p>PHP 5 支持抽象类和抽象方法。定义为抽象的类不能被实例化。任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。在类的声明中使用 abstract 修饰符可以将某个类声明为抽象的。</p>\n<p>可以这样理解，抽象类作为一个基类，它把特定的细节留给继承者来实现。通过抽象概念，可以在开发项目中创建扩展性很好的架构。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">AbstractClass</span><span class=\"token punctuation\">{</span>\n    code<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"hash-抽象类的抽象方法\">抽象类的抽象方法</h2>\n<p>使用 abstract 关键字定义抽象方法。抽象方法只保留方法原型(方法的定义中剔除了方法体之后的签名），它包括存取级别、函数关键字、函数名称和参数。他不包含（{}）或者括号内部的任何代码。例如下面的代码就是一个抽象方法定义：</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">prototypeName</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$protoParam</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。此外方法的调用方式必须匹配，即类型和所需参数数量必须一致。</p>\n<h2 id=\"hash-关于抽象类\">关于抽象类</h2>\n<ol>\n<li>某个类只要包含至少一个抽象方法就必须声明为抽象类</li>\n<li>声明为抽象的方法，在实现的时候必须包含相同的或者更低的访问级别。</li>\n<li>不能使用 new 关键字创建抽象类的实例。</li>\n<li>被声明为抽象的方法不能包含函数体。</li>\n<li>如果将扩展的类也声明为抽象类，在扩展抽象类时，可以不用实现所有的抽象方法。（如果某个类从抽象类继承，当它没有实现基类中所声明的所有抽象方法时，它就必须也被声明为抽象的。）</li>\n</ol>\n<h2 id=\"hash-使用抽象类\">使用抽象类</h2>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Car</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getMaxSpeend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Roadster</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$Speend</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">SetSpeend</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$speend</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">Speend</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$speend</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getMaxSpeend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">Speend</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Street</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$Cars</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$SpeendLimit</span> <span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$speendLimit</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this keyword\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">SpeendLimit</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$speendLimit</span><span class=\"token punctuation\">;</span>\n        <span class=\"token this keyword\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">Cars</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">IsStreetLegal</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$car</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$car</span><span class=\"token operator\">-></span><span class=\"token function\">getMaxSpeend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token this keyword\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">SpeendLimit</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">AddCar</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$car</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">IsStreetLegal</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$car</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'The Car was allowed on the road.'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">Cars</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$car</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'The Car is too fast and was not allowed on the road.'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$Porsche911</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Roadster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$Porsche911</span><span class=\"token operator\">-></span><span class=\"token function\">SetSpeend</span><span class=\"token punctuation\">(</span><span class=\"token number\">340</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$FuWaiStreet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Street</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$FuWaiStreet</span><span class=\"token operator\">-></span><span class=\"token function\">AddCar</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$Porsche911</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n *\n * <span class=\"token keyword\">@result</span>\n * \n * The Car is too fast and was not allowed on the road.[Finished in 0.1s]\n *\n */</span>\n</code></pre></div>\n<h2 id=\"hash-对象接口\">对象接口</h2>\n<p>使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。</p>\n<p>接口是通过<em>interface</em>关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。</p>\n<p>接口中定义的所有方法都必须是公有，这是接口的特性。</p>\n<p>接口是一种类似于类的结构，可用于声明实现类所必须声明的方法。例如，接口通常用来声明API,而不用定义如何实现这个API。</p>\n<blockquote>\n<p>大多数开发人员选择在接口名称前加上大写字母I作为前缀，以便在代码和生成的文档中将其与类区别开来。</p>\n</blockquote>\n<h2 id=\"hash-接口实现（implements）\">接口实现（implements）</h2>\n<p>要实现一个接口，使用<em>implements</em>操作符（继承抽象类需要使用 extends 关键字不同），类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。</p>\n<ol>\n<li>实现多个接口时，接口中的方法不能有重名。</li>\n<li>接口也可以继承，通过使用 extends 操作符。</li>\n<li>类要实现接口，必须使用和接口中所定义的方法完全一致的方式。否则会导致致命错误。</li>\n<li>接口中也可以定义常量。接口常量和类常量的使用完全相同，但是不能被子类或子接口所覆盖。</li>\n</ol>\n<h2 id=\"hash-使用接口的案例\">使用接口的案例</h2>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Car</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">SetSpeend</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$speend</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name-definition class-name\">ISpeendInfo</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">GetMaxSpeend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Roadster</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Car</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ISpeendInfo</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$Speend</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">SetSpeend</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$speend</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">Speend</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$speend</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getMaxSpeend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">Speend</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Street</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$Cars</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$SpeendLimit</span> <span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$speendLimit</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this keyword\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">SpeendLimit</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$speendLimit</span><span class=\"token punctuation\">;</span>\n        <span class=\"token this keyword\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">Cars</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">IsStreetLegal</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$car</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$car</span><span class=\"token operator\">-></span><span class=\"token function\">getMaxSpeend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token this keyword\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">SpeendLimit</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">AddCar</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$car</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">IsStreetLegal</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$car</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'The Car was allowed on the road.'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">Cars</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$car</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'The Car is too fast and was not allowed on the road.'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token variable\">$Porsche911</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Roadster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$Porsche911</span><span class=\"token operator\">-></span><span class=\"token function\">SetSpeend</span><span class=\"token punctuation\">(</span><span class=\"token number\">340</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$FuWaiStreet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Street</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$FuWaiStreet</span><span class=\"token operator\">-></span><span class=\"token function\">AddCar</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$Porsche911</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n *\n * <span class=\"token keyword\">@result</span>\n * \n * The Car is too fast and was not allowed on the road.[Finished in 0.1s]\n *\n */</span>\n</code></pre></div>\n<h2 id=\"hash-类型运算符-instanceof\">类型运算符 instanceof</h2>\n<p>instanceof 运算符是 PHP5 中的一个比较操作符。他接受左右两边的参数，并返回一个boolean值。</p>\n<ol>\n<li>确定一个 PHP 变量是否属于某个一类 CLASS 的实例</li>\n<li>检查对象是不是从某个类型继承</li>\n<li>检查对象是否属于某个类的实例</li>\n<li>确定一个变量是不是实现了某个接口的对象的实例</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">echo</span> <span class=\"token variable\">$Porsche911</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//result：1</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$Porsche911</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ISpeendInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//result：1</span>\n</code></pre></div>\n<h2 id=\"hash-契约式编程\">契约式编程</h2>\n<p>契约式设计或者Design by Contract (DbC)是一种设计计算机软件的方法。这种方法要求软件设计者为软件组件定义正式的，精确的并且可验证的接口，这样，为传统的抽象数据类型又增加了先验条件、后验条件和不变式。这种方法的名字里用到的“契约”或者说“契约”是一种比喻，因为它和商业契约的情况有点类似。</p>\n<p>在编写类之前实现声明接口的一种编程实践。这种方法在保证类的封装性方面非常有用。使用契约式编程技术，我们可以在创建应用程序之前定义出视图实现的功能，这和建筑师在修建大楼之前先画好蓝图的做法非常相似。</p>\n<h2 id=\"hash-总结\">总结</h2>\n<p>抽象类是使用 abstract 关键字声明的类。通过将某个类标记为抽象类，我们可以推迟实现所声明的方法。要将某个方法声明为抽象方法，只要去掉包含所有大括号的方法实体，将方法声明的代码行用分号结束即可。</p>\n<p>抽象类不能直接实例化，他们必须被继承。</p>\n<p>如果某个类从抽象类继承，当它没有实现基类中所声明的所有抽象方法时，它就必须也被声明为抽象的。</p>\n<p>在接口中，我们可以声明没有方法体的方法原型，这点与抽象类很相似。他们之间的区别在于，接口不能声明任何具有方法体的方法；并且他们使用的语法也不一样。为了将揭开规则强制加到某个类上，我们需要使用implements关键字，而不是extends关键字。</p>\n<p>有些情况下我们需要确定某个类是否是特定类的类型，或者是否实现了特定的接口。 instanceof 分成适合完成这个任务。instanceof 检查三件事情：实例是否是某个特定的类型，实例是否从某个特定的类型继承，实例或者他的任何祖先类是否实现类特定的接口。</p>\n<p>某些语言具有从多个类继承的能力，这称为多重继承。PHP不支持多重继承。想法，他提供了为一个类声明多个接口的功能。</p>\n<p>接口在声明类必须遵循的规则时非常有用。契约式编程技术使用这一功能来增强封装性，优化工作流。</p>\n","words":4138,"toc":[{"depth":2,"value":"什么是面向对象编程","id":"hash-什么是面向对象编程"},{"depth":2,"value":"PHP中的抽象类","id":"hash-PHP中的抽象类"},{"depth":2,"value":"抽象类的抽象方法","id":"hash-抽象类的抽象方法"},{"depth":2,"value":"关于抽象类","id":"hash-关于抽象类"},{"depth":2,"value":"使用抽象类","id":"hash-使用抽象类"},{"depth":2,"value":"对象接口","id":"hash-对象接口"},{"depth":2,"value":"接口实现（implements）","id":"hash-接口实现（implements）"},{"depth":2,"value":"使用接口的案例","id":"hash-使用接口的案例"},{"depth":2,"value":"类型运算符 instanceof","id":"hash-类型运算符-instanceof"},{"depth":2,"value":"契约式编程","id":"hash-契约式编程"},{"depth":2,"value":"总结","id":"hash-总结"}],"title":"PHP 面向对象编程和设计模式 (1/5) - 抽象类、对象接口、instanceof 和契约式编程","author":"高国良","type":"posts","series":false,"date":"2014-06-09T01:31:00.791Z","tags":["php"],"description":"本文将介绍抽象类、接口和一种称为契约式编程的技术。使用这些 OPP 机制，所编写的代码就不限于只能计算或者输出内容了。这些机制能够在概念层次上定义类之间交互作用的规则，也为应用程序的扩展和定制提供了基础。","draft":false,"cover":false},"prev":{"title":"为 Sublime Text 3059 配置 PHP 编译环境","author":"高国良","type":"posts","series":false,"date":1402013820791,"tags":["php","development"],"description":"为 sublime Text 配置 PHP 编译环境，首先要确保系统安装了PHP,并把PHP设置到环境变量里。","draft":false,"cover":false,"path":"/blogs/2014/configure-the-php-compilation-environment-for-the-sublimetext-3059","slug":"2014/configure-the-php-compilation-environment-for-the-sublimetext-3059"},"next":{"title":"PHP 面向对象编程和设计模式 (2/5) - 静态变量、属性和方法及延迟绑定","author":"高国良","type":"posts","series":false,"date":1402360080791,"tags":["php"],"description":"当希望指向最终的实现功能的类时，就可以使用 static，这个限定符会在代码执行之前立即计算出继承层次结构上最后那个类的成员。这一过程被称作延迟绑定。","draft":false,"cover":false,"path":"/blogs/2014/php-oop-and-design-pattern-2-static-variables-properties-methods-and-delayed-binding","slug":"2014/php-oop-and-design-pattern-2-static-variables-properties-methods-and-delayed-binding"}},"__N_SSG":true}