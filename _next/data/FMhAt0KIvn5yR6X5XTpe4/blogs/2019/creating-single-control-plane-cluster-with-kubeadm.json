{"pageProps":{"id":["posts","2019","creating-single-control-plane-cluster-with-kubeadm"],"post":{"id":["posts","2019","creating-single-control-plane-cluster-with-kubeadm"],"contentHtml":"<div class=\"image-widget\"><img src=\"/attachments/posts/2019/creating-single-control-plane-cluster-with-kubeadm.files/cover.png\" alt=\"部署单控制平面 k8s 集群，安装 Dashboard 和 ingress-nginx 使外部浏览器可以访问集群。\"><div class=\"figcaption\">部署单控制平面 k8s 集群，安装 Dashboard 和 ingress-nginx 使外部浏览器可以访问集群。</div></div>\n<h2 id=\"hash-一、拓扑结构\">一、拓扑结构</h2>\n<p>本文主要介绍如何使用 kubeadm 安装部署单控制平面 Kubernetes v1.17.0 集群，所谓单控制平面，顾名思义就是由一个 Control-plane Node 和多个 Work Node 组成的 Kubernetes 集群。高可用集群与此不同，其由多个 Control-plane Node 和多个 Work Node 组成，高可用集群部署中，根据 etcd 数据库部署位置的不同，又分为栈内 etcd 数据库部署和外部独立 etcd 数据库集群部署两种模式。\n下面展示了不同部署模式的拓扑结构：</p>\n<div class=\"image-widget\"><img src=\"/attachments/posts/2019/creating-single-control-plane-cluster-with-kubeadm.files/kubeadm-scp-topology.svg\" alt=\"单控制平面拓扑结构\"><div class=\"figcaption\">单控制平面拓扑结构</div></div>\n<div class=\"image-widget\"><img src=\"/attachments/posts/2019/creating-single-control-plane-cluster-with-kubeadm.files/kubeadm-ha-topology-stacked-etcd.svg\" alt=\"高可用拓扑结构（栈内 etcd 数据库）\"><div class=\"figcaption\">高可用拓扑结构（栈内 etcd 数据库）</div></div>\n<div class=\"image-widget\"><img src=\"/attachments/posts/2019/creating-single-control-plane-cluster-with-kubeadm.files/kubeadm-ha-topology-external-etcd.svg\" alt=\"高可用拓扑结构（外部独立 etcd 数据库集群）\"><div class=\"figcaption\">高可用拓扑结构（外部独立 etcd 数据库集群）</div></div>\n<p>高可用部署与单控制平面部署不同，不过，除负载均衡及多 kube-apiserver 部分外，其他流程大同小异。\n有关高可用安装的更多信息请参考 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/\">Creating Highly Available clusters with kubeadm</a>。</p>\n<h2 id=\"hash-二、准备工作\">二、准备工作</h2>\n<p>硬件要求，建议 4 核以上 CPU，8GB 以上内存，Ubuntu 16.04 以上或 CentOS 7 以上版本的操作系统，\n确保所有服务器间网络通信正常，1 台服务器作为控制平面节点，其余若干台服务器作为工作节点，我这里准备了4个工作节点。基本信息如下：</p>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>CPU</th>\n<th>内存</th>\n<th>IP</th>\n<th>OS</th>\n<th>安装</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPN-1</td>\n<td>4U</td>\n<td>8GB</td>\n<td>10.163.10.6</td>\n<td>ubuntu18.04</td>\n<td>docker , kubeadm, kubelet , kubectl</td>\n<td>Control Plane Node</td>\n</tr>\n<tr>\n<td>WN-1</td>\n<td>4U</td>\n<td>8GB</td>\n<td>10.163.10.7</td>\n<td>ubuntu18.04</td>\n<td>docker , kubeadm, kubelet</td>\n<td>Worker Node</td>\n</tr>\n<tr>\n<td>WN-2</td>\n<td>4U</td>\n<td>8GB</td>\n<td>10.163.10.8</td>\n<td>ubuntu18.04</td>\n<td>docker , kubeadm, kubelet</td>\n<td>Worker Node</td>\n</tr>\n<tr>\n<td>WN-2</td>\n<td>4U</td>\n<td>8GB</td>\n<td>10.163.10.9</td>\n<td>ubuntu18.04</td>\n<td>docker , kubeadm, kubelet</td>\n<td>Worker Node</td>\n</tr>\n<tr>\n<td>WN-2</td>\n<td>4U</td>\n<td>8GB</td>\n<td>10.163.10.10</td>\n<td>ubuntu18.04</td>\n<td>docker , kubeadm, kubelet</td>\n<td>Worker Node</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id=\"hash-安装-docker\">安装 docker</h3>\n<p>K8S 支持多种容器运行时环境，我们选择 docker，首先为所有节点服务器安装 docker，目前 kubernetes 最新版(v1.17.0) 可以完全兼容支持的 docker 最高版本为 v19.03，我们选择 Docker 的最新稳定版本 v19.03 作为容器运行时环境。安装细节可参考 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">Get Docker Engine - Community for Ubuntu</a>。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 删除旧版本docker</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove <span class=\"token function\">docker</span> docker-engine docker.io containerd runc\n\n<span class=\"token comment\"># 更新 apt </span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n\n<span class=\"token comment\"># 安装工具包</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token punctuation\">\\</span>\n    apt-transport-https <span class=\"token punctuation\">\\</span>\n    ca-certificates <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">curl</span> <span class=\"token punctuation\">\\</span>\n    gnupg-agent <span class=\"token punctuation\">\\</span>\n    software-properties-common\n\n<span class=\"token comment\"># 添加Docker官方 GPG key</span>\n$ <span class=\"token function\">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n\n<span class=\"token comment\"># 添加 stable apt 源</span>\n$ <span class=\"token function\">sudo</span> add-apt-repository <span class=\"token punctuation\">\\</span>\n   <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> \\\n   stable\"</span>\n\n<span class=\"token comment\"># 安装 Docker CE</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token punctuation\">\\</span>\n  containerd.io<span class=\"token operator\">=</span><span class=\"token number\">1.2</span>.10-3 <span class=\"token punctuation\">\\</span>\n  docker-ce<span class=\"token operator\">=</span><span class=\"token number\">5</span>:19.03.4~3-0~ubuntu-<span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> <span class=\"token punctuation\">\\</span>\n  docker-ce-cli<span class=\"token operator\">=</span><span class=\"token number\">5</span>:19.03.4~3-0~ubuntu-<span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span>\n</code></pre></div>\n<p>如果你的网络环境从官方仓库安装速度较慢，可以使用阿里云镜像仓库安装。步骤如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># step 1: 安装必要的一些系统工具</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> -y <span class=\"token function\">install</span> apt-transport-https ca-certificates <span class=\"token function\">curl</span> software-properties-common\n\n<span class=\"token comment\"># step 2: 安装GPG证书</span>\n<span class=\"token function\">curl</span> -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n\n<span class=\"token comment\"># Step 3: 写入软件源信息</span>\n<span class=\"token function\">sudo</span> add-apt-repository <span class=\"token string\">\"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> stable\"</span>\n\n<span class=\"token comment\"># Step 4: 更新并安装 Docker-CE</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> -y update\n\n<span class=\"token comment\"># Step 5: 选择安装版本</span>\n<span class=\"token function\">apt-cache</span> madison docker-ce\n\n<span class=\"token comment\"># Step 6: 安装</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token punctuation\">\\</span>\n  containerd.io<span class=\"token operator\">=</span><span class=\"token number\">1.2</span>.10-3 <span class=\"token punctuation\">\\</span>\n  docker-ce<span class=\"token operator\">=</span><span class=\"token number\">5</span>:19.03.4~3-0~ubuntu-<span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> <span class=\"token punctuation\">\\</span>\n  docker-ce-cli<span class=\"token operator\">=</span><span class=\"token number\">5</span>:19.03.4~3-0~ubuntu-<span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span>  \n</code></pre></div>\n<h3 id=\"hash-后续操作\">后续操作</h3>\n<p><strong>1、当前用户加入\"docker\"用户组</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG <span class=\"token function\">docker</span> <span class=\"token environment constant\">$USER</span>\n</code></pre></div>\n<p><strong>2、 配置 cgroup 驱动为 systemd，同时，增加 docker 仓库镜像配置。</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#  创建文件 /etc/docker/daemon.json ，内容如下：</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"exec-opts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"native.cgroupdriver=systemd\"</span><span class=\"token punctuation\">]</span>,\n  <span class=\"token string\">\"registry-mirrors\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://docker.mirrors.ustc.edu.cn/\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><strong>3、重启服务生效配置</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl daemon-reload\n<span class=\"token function\">sudo</span> systemctl restart docker.service\n</code></pre></div>\n<p><strong>4、检查配置是否生效</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> info <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> Cgroup\n\n<span class=\"token comment\"># ECHO ------</span>\nCgroup Driver: systemd\n\n</code></pre></div>\n<h3 id=\"hash-关闭-swap\">关闭 swap</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">swapoff -a <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">sed</span> -i <span class=\"token string\">'s/^.*swap/#&#x26;/g'</span> /etc/fstab\n</code></pre></div>\n<h3 id=\"hash-安装-kubelet-kubeadm-kubectl\">安装 kubelet kubeadm kubectl</h3>\n<p>由于网络原因，直接 APT-GET 安装可能安装不了，这里需要配置一下镜像仓库。</p>\n<p><strong>1、配置阿里云 kubernetes 镜像仓库</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y apt-transport-https\n\n<span class=\"token function\">curl</span> https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n</code></pre></div>\n<p><strong>2、创建文件 <code>/etc/apt/sources.list.d/kubernetes.list</code>， 内容如下：</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\n</code></pre></div>\n<p><strong>3、安装 kubelet kubectl kubeadm</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y kubelet kubeadm kubectl\n</code></pre></div>\n<p><strong>4、设置 kubelet 开机启动</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> kubelet\n</code></pre></div>\n<h2 id=\"hash-三、部署控制平面节点\">三、部署控制平面节点</h2>\n<p>过程中会用到一系列来自 Google 的 docker 镜像，可以通过 <code>kubeadm config images pull</code> 命令验证网络是否能够正常拉取镜像。如果无法访问，可从其他镜像仓库下载，然后再修改镜像标签，以启动相关 pod。</p>\n<h3 id=\"hash-准备镜像\">准备镜像</h3>\n<p>列出安装过程中需要用到的镜像文件，命令为</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubeadm config images list\n\n<span class=\"token comment\"># ECHO ------</span>\nk8s.gcr.io/kube-apiserver:v1.17.0\nk8s.gcr.io/kube-controller-manager:v1.17.0\nk8s.gcr.io/kube-scheduler:v1.17.0\nk8s.gcr.io/kube-proxy:v1.17.0\nk8s.gcr.io/pause:3.1\nk8s.gcr.io/etcd:3.4.3-0\nk8s.gcr.io/coredns:1.6.5\n</code></pre></div>\n<p>这里选择从 Docker hub 的 gotok8s 仓库拉取镜像副本，然后再修改 tag 名称，脚本如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">images=(kube-apiserver:v1.17.0 kube-controller-manager:v1.17.0 kube-scheduler:v1.17.0 kube-proxy:v1.17.0 pause:3.1 etcd:3.4.3-0 coredns:1.6.5)\nfor imageName in ${images[@]} ; do\n  docker pull gotok8s/$imageName  \n  docker tag gotok8s/$imageName k8s.gcr.io/$imageName  \n  docker rmi gotok8s/$imageName\ndone\n</code></pre></div>\n<h3 id=\"hash-初始化控制平面节点\">初始化控制平面节点</h3>\n<p>控制平面节点是运行控制平面组件的机器，包括 etcd（集群数据库）和 API Server （kubectl CLI 与之通信）。</p>\n<p>需要安装 Pod 网络插件，才能使得集群 Pod 间可以相互通信，必须在任何应用程序之前部署 Pod 网络。此外，CoreDNS 将不会在安装网络之前启动。kubeadm 仅支持基于容器网络接口（CNI）的网络，有几个项目使用 CNI 提供了 Kubernetes Pod 网络，其中一些还支持网络策略。有关可用的网络加载项列表，请参阅<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network\">网络组件页面</a>。</p>\n<p>另外，请注意，Pod 网络不得与任何主机网络重叠，因为这可能会导致问题。如果发现网络插件的首选 Pod 网络与某些主机网络之间发生冲突，在执行命令 kubeadm init 时应通过指定 --pod-network-cidr 参数配置网络，并在网络插件的 YAML 中修改相应信息。</p>\n<p>这里选择 <code>calico</code> 网络插件，根据 Calico 文档说明，我们需为 <code>kubeadm init</code> 指定 <code>--pod-network-cidr=192.168.0.0/16</code> 参数。现在运行 <code>kubeadm init &#x3C;args> </code>，命令如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> kubeadm init <span class=\"token punctuation\">\\</span>\n    --kubernetes-version<span class=\"token operator\">=</span>v1.17.0 <span class=\"token punctuation\">\\</span>\n    --apiserver-advertise-address<span class=\"token operator\">=</span><span class=\"token number\">10.163</span>.10.6 <span class=\"token punctuation\">\\</span>\n    --pod-network-cidr<span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.0.0/16\n</code></pre></div>\n<p>如果一切正常，安装成功，将输入类似下面的结果信息：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">Your Kubernetes control-plane has initialized successfully<span class=\"token operator\">!</span>\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  <span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube\n  <span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config\n  <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun <span class=\"token string\">\"kubectl apply -f [podnetwork].yaml\"</span> with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can <span class=\"token function\">join</span> any number of worker nodes by running the following on each as root:\n\nkubeadm <span class=\"token function\">join</span> <span class=\"token number\">10.163</span>.10.6:6443 --token xxxxxx.xxxxxxxxxxxxxxxx <span class=\"token punctuation\">\\</span>\n    --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre></div>\n<p>根据提示消息，依次执行以下命令：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube\n  <span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config\n  <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config\n</code></pre></div>\n<p>注意记录输出结果中的 <code>kubeadm join ***</code> 信息，随后在添加工作节点到集群时需要用到，可以复制后暂存在某个地方。</p>\n<h3 id=\"hash-安装网络\">安装网络</h3>\n<p>此时，我们通过 <code>kubectl get pods --all-namespaces</code> 命令，应该可以看到 CoreDNS pod  处于 pending 状态，安装网络以后，它才能处于 running 状态。我们选择 calico 为 pod 提供网络，pod 网络组件本身以 k8s 应用的形式运行，执行下面命令进行安装。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f https://docs.projectcalico.org/v3.11/manifests/calico.yaml\n</code></pre></div>\n<p>安装了 Pod 网络后，可以通过检查 CoreDNS Pod 的运行状态来确认它是否正常工作 <code>kubectl get pods --all-namespaces</code>。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl get pods --all-namespaces\n\n<span class=\"token comment\"># ECHO ----</span>\nNAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE\nkube-system   calico-kube-controllers-7bd78b474d-vmq2w   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          4m57s\nkube-system   calico-node-2cwtx                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          4m57s\nkube-system   coredns-5c98db65d4-gv2j6                   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          10m\nkube-system   coredns-5c98db65d4-n6lpj                   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          10m\nkube-system   etcd-vm-10-13-ubuntu                       <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          8m54s\nkube-system   kube-apiserver-vm-10-13-ubuntu             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          9m10s\nkube-system   kube-controller-manager-vm-10-13-ubuntu    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          9m3s\nkube-system   kube-proxy-qbk66                           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          10m\nkube-system   kube-scheduler-vm-10-13-ubuntu             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          9m8s\n</code></pre></div>\n<p>pod 启动需要时间，请耐心等待。</p>\n<h2 id=\"hash-四、加入工作节点\">四、加入工作节点</h2>\n<p>CoreDNS Pod 启动并运行后，我们可以为集群添加工作节点。工作节点服务器需安装 Docker 、kubeadm 和 kubelet，安装过程请参考前面相关小节。</p>\n<h3 id=\"hash-拉取镜像\">拉取镜像</h3>\n<p>工作节点服务器需要至少启动两个 pod ，用到的镜像为 <code>kube-proxy</code> 和 <code>pause</code> ，同理我们无法直接从 k8s.grc.io 下载，需要提前拉取镜像并修改 tag ，执行下面命令：</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">images=(kube-proxy:v1.17.0 pause:3.1)\nfor imageName in ${images[@]} ; do\n  docker pull gotok8s/$imageName  \n  docker tag gotok8s/$imageName k8s.gcr.io/$imageName  \n  docker rmi gotok8s/$imageName\ndone\n</code></pre></div>\n<h3 id=\"hash-加入集群\">加入集群</h3>\n<p>执行控制平面节点初始化完成后提供的添加工作节点命令，格式如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubeadm <span class=\"token function\">join</span> --token <span class=\"token operator\">&#x3C;</span>token<span class=\"token operator\">></span> <span class=\"token operator\">&#x3C;</span>master-ip<span class=\"token operator\">></span>:<span class=\"token operator\">&#x3C;</span>master-port<span class=\"token operator\">></span> --discovery-token-ca-cert-hash sha256:<span class=\"token operator\">&#x3C;</span>hash<span class=\"token operator\">></span>\n</code></pre></div>\n<p>命令中的 <code>--token</code> 和 <code>--discovery-token-ca-cert-hash</code> 在集群 kube-apiserver 节点部署完成后的结果信息中有体现，直接复制出来即可使用。</p>\n<p>可以通过在控制平面节点执行 <code>kubeadm token list</code> 来获取 token 信息，token 令牌会在 24 小时候失效，如果要创建新的令牌，使用 <code>kubeadm token create</code> 命令。</p>\n<p>可以通过下面命令获取 <code>--discovery-token-ca-cert-hash</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt <span class=\"token operator\">|</span> openssl rsa -pubin -outform der <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n   openssl dgst -sha256 -hex <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/^.* //'</span>\n</code></pre></div>\n<p>注意，如果需要重新执行 <code>kubeadm join</code> ，需在控制平面节点删除该节点 <code>kubectl delete node node-name</code>，并在工作节点上执行 <code>kubeadm reset</code> 进行清理工作。</p>\n<p>节点执行完 join 命令后，可以在控制平面节点检查 pod 启动进度 <code>watch kubectl get pods --all-namespaces -o wide</code>，观察新节点服务器上的 Pod 状态，正常启动则加入成功且节点状态为 <code>Ready</code>。参照上述步骤，依次将所有工作节点加入集群。</p>\n<h3 id=\"hash-检查工作节点状态\">检查工作节点状态</h3>\n<p>工作节点加入集群后，随着工作节点上相应 Pod 的正常启动，工作节点状态会由 <code>NotReady</code> 切换到 <code>Ready</code>，Pod 启动需要时间，请耐心等待。所有节点正常加入集群后，可以通过命令查看节点状态：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl get nodes\n\n<span class=\"token comment\"># ECHO ------</span>\nNAME              STATUS   ROLES    AGE    VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME\nvm-10-6-ubuntu    Ready    master   9h     v1.15.2   <span class=\"token number\">10.163</span>.10.6    <span class=\"token operator\">&#x3C;</span>none<span class=\"token operator\">></span>        Ubuntu <span class=\"token number\">18.04</span>.1 LTS   <span class=\"token number\">4.15</span>.0-54-generic   docker://18.6.3\nvm-10-7-ubuntu    Ready    <span class=\"token operator\">&#x3C;</span>none<span class=\"token operator\">></span>   9h     v1.15.2   <span class=\"token number\">10.163</span>.10.7    <span class=\"token operator\">&#x3C;</span>none<span class=\"token operator\">></span>        Ubuntu <span class=\"token number\">18.04</span>.1 LTS   <span class=\"token number\">4.15</span>.0-54-generic   docker://18.6.3\nvm-10-8-ubuntu    Ready    <span class=\"token operator\">&#x3C;</span>none<span class=\"token operator\">></span>   9h     v1.15.2   <span class=\"token number\">10.163</span>.10.8    <span class=\"token operator\">&#x3C;</span>none<span class=\"token operator\">></span>        Ubuntu <span class=\"token number\">18.04</span>.1 LTS   <span class=\"token number\">4.15</span>.0-54-generic   docker://18.6.3\nvm-10-9-ubuntu    Ready    <span class=\"token operator\">&#x3C;</span>none<span class=\"token operator\">></span>   8h     v1.15.2   <span class=\"token number\">10.163</span>.10.9    <span class=\"token operator\">&#x3C;</span>none<span class=\"token operator\">></span>        Ubuntu <span class=\"token number\">18.04</span>.1 LTS   <span class=\"token number\">4.15</span>.0-54-generic   docker://18.6.3\nvm-10-10-ubuntu   Ready    <span class=\"token operator\">&#x3C;</span>none<span class=\"token operator\">></span>   120m   v1.15.2   <span class=\"token number\">10.163</span>.10.20   <span class=\"token operator\">&#x3C;</span>none<span class=\"token operator\">></span>        Ubuntu <span class=\"token number\">18.04</span>.1 LTS   <span class=\"token number\">4.15</span>.0-54-generic   docker://18.6.3\n</code></pre></div>\n<h2 id=\"hash-五、安装-Dashboard\">五、安装 Dashboard</h2>\n<p>Dashboard 不会随集群一起安装，需要单独部署，执行下面命令安装：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc2/aio/deploy/recommended.yaml\n</code></pre></div>\n<p>这里要注意 Dashboard 的版本，并非所有版本的 Dashboard 都能和任意版本的 k8s 集群完全兼容。引用官网对照表</p>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th>Kubernetes version</th>\n<th>1.11</th>\n<th>1.12</th>\n<th>1.13</th>\n<th>1.14</th>\n<th>1.15</th>\n<th>1.16</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Compatibility</td>\n<td>?</td>\n<td>?</td>\n<td>?</td>\n<td>?</td>\n<td>?</td>\n<td>✓</td>\n</tr>\n</tbody>\n</table></div>\n<ul>\n<li><strong>✓</strong> 完全支持。</li>\n<li><strong>?</strong> 由于 Kubernetes API 版本之间的变化，部分功能无法正确地在 Dashboard 中工作。</li>\n</ul>\n<p>默认情况下，Dashboard 使用最小 RBAC 配置进行部署。目前，Dashboard 仅支持使用 Bearer Token 登录。可以按照<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/kubernetes/dashboard/wiki/Creating-sample-user\">关于创建示例用户的指南</a> 进行操作。</p>\n<p>关于 Dashboard 的使用，随后会抽时间再详细写一篇进行介绍。</p>\n<h2 id=\"hash-六、Inress-nginx\">六、Inress-nginx</h2>\n<ol>\n<li>\n<p>选择一个节点，打上 <code>node.k8s.xx.cn/role: ingress</code> 标签，以便于下一步进行 Pod 调度。</p>\n</li>\n<li>\n<p>下载 ingress-nginx 资源信息</p>\n</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml\n<span class=\"token function\">wget</span> https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml\n</code></pre></div>\n<ol>\n<li>修改配置信息</li>\n</ol>\n<p>修改 ingress-nginx 安装文件 <code>mandatory.yaml</code>，以确保 nginx-ingress-controller 运行在指定节点上。</p>\n<div class=\"remark-highlight\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">...</span>\n      <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">kubernetes.io/os</span><span class=\"token punctuation\">:</span> linux\n        <span class=\"token key atrule\">node.k8s.xx.cn/role</span><span class=\"token punctuation\">:</span> ingress\n      <span class=\"token key atrule\">serviceAccountName</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>serviceaccount\n<span class=\"token punctuation\">...</span>\n</code></pre></div>\n<p>配置 service 为集群 IP 类型，并配置 <code>externalIPs</code> 以对外暴露服务。</p>\n<div class=\"remark-highlight\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP\n  <span class=\"token key atrule\">externalIPs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> 10.163.10.7\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> https\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app.kubernetes.io/name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n    <span class=\"token key atrule\">app.kubernetes.io/part-of</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>nginx\n<span class=\"token punctuation\">---</span>\n</code></pre></div>\n<ol>\n<li>安装 ingress-nginx</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f mandatory.yaml\nkubectl apply -f service-nodeport.yaml\n</code></pre></div>\n<h2 id=\"hash-七、访问-Dashboard\">七、访问 Dashboard</h2>\n<p>现在有了 Dashboard 和 Ingress 我们可以通过一些简单的配置使 dashbaord 可从外部访问。</p>\n<p><strong>1、创建 Service 以将外部流量倒向 Dashboard</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> kubernetes<span class=\"token punctuation\">-</span>dashboard\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> kubernetes<span class=\"token punctuation\">-</span>dashboard\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> kubernetes<span class=\"token punctuation\">-</span>dashboard\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8443</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> kubernetes<span class=\"token punctuation\">-</span>dashboard\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP\n  <span class=\"token key atrule\">sessionAffinity</span><span class=\"token punctuation\">:</span> None\n</code></pre></div>\n<p><strong>2、创建存储 TLS 数字证书的 Secret</strong></p>\n<p>Dashboard 只能通过 HTTPS 访问，我们需要准备一个域名并为其签发数字证书。以 <code>www.yourdomain.com</code> 域名为例，在命名空间 <code>kubernetes-dashboard</code> 创建 Secret。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl create secret tls cloud.jfjbapp.cn --cert<span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/certs/dashboard.crt --key<span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/certs/dashboard.key -n kubernetes-dashboard\n</code></pre></div>\n<p><strong>3、创建 Ingerss 将外部流量倒入集群</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dashboard<span class=\"token punctuation\">-</span>ingress\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> kubernetes<span class=\"token punctuation\">-</span>dashboard\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nginx.ingress.kubernetes.io/backend-protocol</span><span class=\"token punctuation\">:</span> HTTPS\n    <span class=\"token key atrule\">nginx.ingress.kubernetes.io/rewrite-target</span><span class=\"token punctuation\">:</span> /$2\n    <span class=\"token key atrule\">nginx.ingress.kubernetes.io/use-regex</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'true'</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tls</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> www.yourdomain.com\n      <span class=\"token key atrule\">secretName</span><span class=\"token punctuation\">:</span> www.yourdomain.com\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> www.yourdomain.com\n      <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /kube(/<span class=\"token punctuation\">|</span>$)(.<span class=\"token important\">*)</span>\n            <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> kubernetes<span class=\"token punctuation\">-</span>dashboard\n              <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n</code></pre></div>\n<p>浏览器访问 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://www.yourdomain.com/kube/%EF%BC%8C%E8%BE%93%E5%85%A5%E7%99%BB%E9%99%86%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8D%B3%E5%8F%AF%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8\">https://www.yourdomain.com/kube/，输入登陆信息，即可正常使用</a> Kubernetes Dashboard 。</p>\n<h2 id=\"hash-八、完成\">八、完成</h2>\n<p>现在我们已经拥有一个 4 工作节点的单控制平面 k8s 集群，本文仅简单介绍了部署过程，关于集群的管理、使用还会涉及到非常多 k8s 概念及领域知识，官网文档基本上很详细的介绍了各类概念，还有详尽的操作演示，可以多看、多实践。</p>\n","words":11589,"toc":[{"depth":2,"value":"一、拓扑结构","id":"hash-一、拓扑结构"},{"depth":2,"value":"二、准备工作","id":"hash-二、准备工作"},{"depth":2,"value":"三、部署控制平面节点","id":"hash-三、部署控制平面节点"},{"depth":2,"value":"四、加入工作节点","id":"hash-四、加入工作节点"},{"depth":2,"value":"五、安装 Dashboard","id":"hash-五、安装-Dashboard"},{"depth":2,"value":"六、Inress-nginx","id":"hash-六、Inress-nginx"},{"depth":2,"value":"七、访问 Dashboard","id":"hash-七、访问-Dashboard"},{"depth":2,"value":"八、完成","id":"hash-八、完成"}],"title":"使用 kubeadm 安装单控制平面 Kubernetes 集群","date":"2020-01-19T12:30:54.000Z","draft":false,"description":"所谓单控制平面，顾名思义就是由一个 Control-plane Node 和多个 Work Node 组成的 Kubernetes 集群。","type":"posts","tags":["kubernetes","docker","ingress-nginx"],"series":false,"author":"GauLiang","cover":"cover.png"},"prev":{"title":"微服务 API 网关 KrakenD","date":1578727693000,"draft":false,"description":"KrakenD 是一个高性能无状态、分布式、微服务 API 网关，其不仅可以轻松将客户端请求转发到后端服务，还具备强大的数据处理功能，支持转换、聚合和修剪来自后端服务甚至第三方服务的返回数据，从而消除处理多个 REST 服务的必要性，使客户端与微服务的实现细节隔离开来。这一切通过简单的配置即可实现，本文介绍 KrakendD 如何安装部署并快速投入应用。","type":"posts","tags":["service-mesh","krakend","api-getway"],"series":false,"author":"GauLiang","cover":false,"path":"/blogs/2020/microservice-api-gateway-krakend","slug":"2020/microservice-api-gateway-krakend"},"next":{"title":"Ubuntu 18.04 安装 Java 环境 - OpenJDK","date":1579537208000,"draft":false,"description":"Java 和 JVM（Java 的虚拟机）被广泛使用，本文介绍如何使用 apt-get 安装不同版本的 Open JRE 和 Open JDK。JRE 仅用于提供 Java 应用程序执行环境，如果要编译 Java 应用程序，则要安装 JDK。","type":"posts","tags":["Java"],"series":false,"author":"GauLiang","cover":false,"path":"/blogs/2020/how-to-install-java-with-apt-get-on-ubuntu","slug":"2020/how-to-install-java-with-apt-get-on-ubuntu"}},"__N_SSG":true}