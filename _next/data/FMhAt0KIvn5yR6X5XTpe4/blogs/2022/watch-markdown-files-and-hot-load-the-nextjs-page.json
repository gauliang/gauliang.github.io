{"pageProps":{"id":["posts","2022","watch-markdown-files-and-hot-load-the-nextjs-page"],"post":{"id":["posts","2022","watch-markdown-files-and-hot-load-the-nextjs-page"],"contentHtml":"<p>Next.js 提供了 Fast-Refresh 能力，它可以为您对 React 组件所做的编辑提供即时反馈。\n但是，当你通过 Markdown 文件提供网站内容时，由于 Markdown 不是 React 组件，热更新将失效。</p>\n<h2 id=\"hash-怎么做\">怎么做</h2>\n<p>解决该问题可从以下几方面思考：</p>\n<ol>\n<li>服务器如何监控文件更新</li>\n<li>服务器如何通知浏览器</li>\n<li>浏览器如何更新页面</li>\n<li>如何拿到最新的 Markdown 内容</li>\n<li>如何与 Next.js 开发服务器一起启动</li>\n</ol>\n<h2 id=\"hash-监控文件更新\">监控文件更新</h2>\n<blockquote>\n<p>约定： markdown 文件存放在 Next.js 项目根目录下的 <code>_contents/</code> 中</p>\n</blockquote>\n<p>通过 <code>node:fs.watch</code> 模块递归的监控 <code>_contents</code> 目录，当文件发生变更，触发 listener 执行。\n新建文件 <code>scripts/watch.js</code> 监控 <code>_contents</code> 目录。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> watch <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/_contents'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"hash-通知浏览器\">通知浏览器</h2>\n<p>服务端通过 WebSocket 与浏览器建立连接，当开发服务器发现文件变更后，通过 WS 通知浏览器更新页面。\n浏览器需要知道被更新的文件与当前页面所在路由是否有关，因此，服务端发送给浏览器的消息应至少包含当前\n更新文件对应的页面路由。</p>\n<h3 id=\"hash-WebSocket\">WebSocket</h3>\n<p><code>ws</code> 是一个简单易用、速度极快且经过全面测试的 WebSocket 客户端和服务器实现。通过 <code>ws</code> 启动 WebSocket 服务器。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> watch <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">WebSocketServer</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> wss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocketServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    wss<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ws<span class=\"token punctuation\">,</span> req</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/_contents'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>md</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n            ws<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> <span class=\"token string\">'markdown-changed'</span><span class=\"token punctuation\">,</span> path <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"hash-浏览器连接服务器\">浏览器连接服务器</h2>\n<p>新建一个 <code>HotLoad</code> 组件，负责监听来自服务端的消息，并热实现页面更新。组件满足以下要求：</p>\n<ol>\n<li>通过单例模式维护一个与 WebSocekt Server 的连接</li>\n<li>监听到服务端消息后，判断当前页面路由是否与变更文件有关，无关则忽略</li>\n<li>服务端消息可能会密集发送，需要在加载新版本内容时做防抖处理</li>\n<li>加载 Markdown 文件并完成更新</li>\n<li>该组件仅在 <code>开发模式</code> 下工作</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/router\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Instance</span> <span class=\"token punctuation\">{</span>\n    ws<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">WebSocket</span>\n    timer<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> instance<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Instance</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    ws<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n    timer<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">ws</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">ws</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> instance\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_HotLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> setPost<span class=\"token punctuation\">,</span> params <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> asPath <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">ws</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">event</span> <span class=\"token operator\">===</span> <span class=\"token string\">'markdown-changed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span> <span class=\"token operator\">===</span> asPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getPreviewData</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">setPost</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">ws</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONNECTING</span> <span class=\"token operator\">&#x26;&#x26;</span> instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">ws</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">4001</span><span class=\"token punctuation\">,</span> asPath<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPreviewData</span><span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">timer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">timer</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">timer</span> <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/api/preview/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n                headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                body<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">core</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> setPost<span class=\"token punctuation\">,</span> params <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'development hot load'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    core <span class=\"token operator\">=</span> _HotLoad\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">HotLoad</span> <span class=\"token operator\">=</span> core\n</code></pre></div>\n<h2 id=\"hash-数据预览-API\">数据预览 API</h2>\n<p>创建数据预览 API，读取 Markdown 文件内容，并编译为页面渲染使用的格式。这里的结果\n应与 <code>[...id].tsx</code> 页面中 <code>getStaticProps()</code> 方法返回的页面数据结构完全一致，相关\n逻辑可直接复用。</p>\n<p>新建 API 文件 <code>pages/api/preview.ts</code>，</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> NextApiRequest<span class=\"token punctuation\">,</span> NextApiResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getPostData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../lib/posts'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>\n    req<span class=\"token operator\">:</span> NextApiRequest<span class=\"token punctuation\">,</span>\n    res<span class=\"token operator\">:</span> NextApiResponse<span class=\"token operator\">&#x3C;</span>Data<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n        <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getPostData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"hash-更新页面\">更新页面</h2>\n<p>页面 <code>pages/[...id].tsx</code> 中引入 <code>HotLoad</code> 组件，并传递 <code>setPostData()</code> 及 <code>params</code> 给 <code>HotLoad</code> 组件。</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token spread operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">HotLoad</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../components/hot-load'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Post</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params<span class=\"token punctuation\">,</span> post<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">,</span> next <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Params</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>postData<span class=\"token punctuation\">,</span> setPostData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setPostData</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Layout</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Head</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>postData<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> - Gauliang</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span><span class=\"token class-name\">Head</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">PostContent</span></span> <span class=\"token attr-name\">post</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>postData<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">prev</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>prev<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">next</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>next<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">BackToTop</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">HotLoad</span></span> <span class=\"token attr-name\">setPost</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setPostData<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">params</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>params<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span><span class=\"token class-name\">Layout</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            params<span class=\"token punctuation\">,</span>\n            post<span class=\"token operator\">:</span><span class=\"token keyword\">await</span> <span class=\"token function\">getPostData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> <span class=\"token function\">getAllPostIdByType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        paths<span class=\"token punctuation\">,</span>\n        fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token maybe-class-name\">Post</span>\n</code></pre></div>\n<h2 id=\"hash-启动脚本\">启动脚本</h2>\n<p>更新 <code>package.json</code> 的 <code>dev</code> 脚本：</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node scripts/watch.js &#x26; \\n next dev\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<h2 id=\"hash-总结\">总结</h2>\n<p>上述内容，整体概述了大致的实现逻辑。具体项目落地时，还需考虑一些细节信息，\n如：文件更新时希望能够在命令行提示更的文件名、针对个性化的路由信息调整文件与路由的匹配逻辑等。</p>\n","words":3733,"toc":[{"depth":2,"value":"怎么做","id":"hash-怎么做"},{"depth":2,"value":"监控文件更新","id":"hash-监控文件更新"},{"depth":2,"value":"通知浏览器","id":"hash-通知浏览器"},{"depth":2,"value":"浏览器连接服务器","id":"hash-浏览器连接服务器"},{"depth":2,"value":"数据预览 API","id":"hash-数据预览-API"},{"depth":2,"value":"更新页面","id":"hash-更新页面"},{"depth":2,"value":"启动脚本","id":"hash-启动脚本"},{"depth":2,"value":"总结","id":"hash-总结"}],"title":"监听 Markdown 文件并热更新 Next.js 页面","author":"高国良","type":"posts","series":false,"date":"2022-06-24T09:07:23.954Z","tags":["next.js","fast-refresh"],"description":"Next.js 提供了 Fast-Refresh 能力，它可以为您对 React 组件所做的编辑提供即时反馈。但是，当你通过 Markdown 文件提供网站内容时，由于 Markdown 不是 React 组件，热更新将失效。","draft":false,"cover":false},"prev":{"title":"Throttling and Debounce","date":1606385732000,"draft":false,"description":"节流是指，确保连续发生的事件（函数调用）按指定频率（时间间隔）触发执行器。防抖是指，事件发生（函数调用）后，在指定时间内，同样的操作只有最后一次会生效。","type":"posts","tags":["debounce","throttle","javascript"],"series":false,"author":"GauLiang","cover":"throttle-and-debounce.jpg","path":"/blogs/2020/throttle-and-debounce","slug":"2020/throttle-and-debounce"},"next":{"title":"Javascript 手写 LRU 算法","author":"GauLiang","type":"posts","series":false,"date":1663685743412,"tags":["lru"],"description":"LRU 是 Least Recently Used 的缩写，即最近最少使用。作为一种经典的缓存策略，它的基本思想是长期不被使用的数据，在未来被用到的几率也不大，所以当新的数据进来时我们可以优先把这些数据替换掉。","draft":false,"cover":false,"path":"/blogs/2022/lru-algorithm","slug":"2022/lru-algorithm"}},"__N_SSG":true}