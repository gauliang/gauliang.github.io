{"pageProps":{"params":{"id":["2020","javascript-arrow-function-best-practices"]},"post":{"id":["posts","2020","javascript-arrow-function-best-practices"],"contentHtml":"<div class=\"image-widget\"><img src=\"/posts/2020/javascript-arrow-function-best-practices.files/javascript-arrow-function-best-practices.jpg\" alt=\"Javascript 箭头函数最佳实践\"><div class=\"figcaption\">Javascript 箭头函数最佳实践</div></div>\n<blockquote>\n<p>英文原文： <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://dmitripavlutin.com/javascript-arrow-functions-best-practices/\">5 Best Practices to Write Quality Arrow Functions</a></p>\n</blockquote>\n<p>箭头函数的语法简洁明了，非常适合作为回调使用，这里介绍 5 个有关箭头函数的最佳实践。</p>\n<h2 id=\"hash-一、箭头函数名称推断\">一、箭头函数名称推断</h2>\n<p>JS 中的箭头函数 name 值是一个空字符串，在调试会话或调用堆栈分析期间箭头函数被标记为 anonymous（匿名函数）。\n通过函数名称推断（ES2015 的功能）可以在某些条件下检测到函数名称。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span> <span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ''</span>\n</code></pre></div>\n<p>名称推断的思想是 JavaScript 可以从其语法位置确定箭头函数名称：例如，从保存函数对象的变量名称确定。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increaseNumber</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nincreaseNumber<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'increaseNumber'</span>\n</code></pre></div>\n<p><strong>建议：</strong> 使用函数名称推断来命名箭头函数。</p>\n<h2 id=\"hash-二、尽可能内联\">二、尽可能内联</h2>\n<p>内联函数是仅具有一个表达式的函数。当箭头函数具有一个表达式时，可以轻松删除花括号 <code>{ }</code> 和 <code>return</code> 语句：</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 建议</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不建议</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><strong>建议：</strong> 当函数仅具有一个表达式时，内联箭头函数。</p>\n<h2 id=\"hash-三、箭头函数和比较运算符\">三、箭头函数和比较运算符</h2>\n<p>比较运算符 <code>&#x3C;</code>,<code>></code>,<code>&#x3C;=</code> 视觉上与 <code>=></code> 接近，在箭头函数中使用会造成一些阅读混乱，比如：</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">negativeToZero</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> number <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>为了清楚的把他们区分开，可以这样</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">negativeToZero</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">negativeToZero</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> number <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><strong>建议：</strong> 如果箭头函数中包含比较运算符，则好的做法是将表达式包装在一对括号中，或者使用箭头函数展开形式。</p>\n<h2 id=\"hash-四、构造普通对象\">四、构造普通对象</h2>\n<p>内联箭头函数中的对象字面量触发语法错误，这种情况下 JavaScript 认为花括号是代码块，而不是对象文字。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// throws SyntaxError!</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'number'</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>将对象字面量换成一对括号即可解决此问题，如果对象文字具有很多属性，您甚至可以使用换行符，同时仍然使箭头函数保持内联：</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Works!</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'number'</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Works!</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'number'</span><span class=\"token operator\">:</span> number\n  <span class=\"token string-property property\">'propA'</span><span class=\"token operator\">:</span> <span class=\"token string\">'value A'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'propB'</span><span class=\"token operator\">:</span> <span class=\"token string\">'value B'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><strong>建议：</strong> 在内联箭头函数中使用时，将对象字面量包装在一对括号中。</p>\n<h2 id=\"hash-五、避免过多的嵌套\">五、避免过多的嵌套</h2>\n<p>箭头函数的语法很短，很好。但是，副作用是，当许多箭头函数嵌套时，它可能会变得难以阅读。\n让我们考虑以下情形。单击按钮后，将启动对服务器的请求。响应准备就绪后，将各项信息打印到到控制台：</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\">myButton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token arrow operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      json<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上面的 3 级嵌套，降低了代码可读性。为了提高可读性，第一种方法是引入每个包含箭头函数的变量。\n该变量应能够简明地描述函数功能。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readItemsJson</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">json</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  json<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token arrow operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>readItemsJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleButtonClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>更推荐的是，重构整个函数以使用 <code>async/await</code> 语法，这是解决函数嵌套的好方法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  json<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleButtonClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><strong>建议：</strong> 通过将箭头函数提取为单独的函数或尽可能包含 <code>async/await</code> 语法来避免过多的箭头函数嵌套。</p>\n<h2 id=\"hash-总结\">总结</h2>\n<p>JavaScript 中的箭头函数是匿名的。为了使调试高效，一个好的实践是使用变量来保存箭头函数。这允许 JavaScript 推断函数名称。</p>\n<p>当函数主体具有一个表达式时，使用内联箭头函数非常方便。</p>\n<p>运算符 <code>></code>，<code>&#x3C;</code>，<code>&#x3C;=</code> 和 <code>>=</code> 在视觉上与 <code>=></code> 接近。在行使用这些运算符时必须小心。</p>\n<p>对于对象字面量语法 <code>{ prop: 'value' }</code> 与代码块 <code>{ }</code>，当将对象字面量放置在内联箭头函数中时，需要将其包装在一对括号中：<code>() => ({ prop: 'value' })</code>。</p>\n<p>最后，过多的函数嵌套会掩盖代码意图。减少箭头函数嵌套的一种好方法是将它们提取到变量中。或者，尝试使用更好的做法，例如 <code>async/await</code> 语法。</p>\n","toc":[{"depth":2,"value":"一、箭头函数名称推断","id":"hash-一、箭头函数名称推断"},{"depth":2,"value":"二、尽可能内联","id":"hash-二、尽可能内联"},{"depth":2,"value":"三、箭头函数和比较运算符","id":"hash-三、箭头函数和比较运算符"},{"depth":2,"value":"四、构造普通对象","id":"hash-四、构造普通对象"},{"depth":2,"value":"五、避免过多的嵌套","id":"hash-五、避免过多的嵌套"},{"depth":2,"value":"总结","id":"hash-总结"}],"title":"Javascript 箭头函数最佳实践[译]","date":"2020-09-05T02:51:40.000Z","draft":false,"description":"箭头函数的语法简洁明了，非常适合作为回调使用。本文介绍 5 中关于箭头函数的最佳实践。","type":"posts","tags":["javascript","node.js","arrow-function","best-practices"],"series":false,"author":"Gl","cover":"javascript-arrow-function-best-practices.jpg"},"prev":{"title":"Gitlab CE Work Flow","date":1598659755000,"draft":false,"description":"Gitlab-CE 工作流最佳实践","type":"posts","tags":["devops","gitlab"],"series":false,"author":"Gauliang","cover":"Gitlab-1.png","path":"/blogs/2020/gitlab-ce-work-flow","slug":"2020/gitlab-ce-work-flow"},"next":{"title":"Javascript 模块化概述","date":1599293077000,"draft":false,"description":"当我们提及**模块化**时，通常意味着是由一组高度分离的，不同的功能块存储在模块中组成的。在可能的情况下，通过松散耦合消除依赖关系简化应用程序的可维护性。 本文概述集中流行的模块化规范，以便在不同应用场景中能够快速决策选型。","type":"posts","tags":["javascript","node.js","CommonJS","esm","amd","umd"],"series":false,"author":"Gl","cover":"001.jpg","path":"/blogs/2020/what-are-cjs-amd-umd-and-esm-in-javascript","slug":"2020/what-are-cjs-amd-umd-and-esm-in-javascript"}},"__N_SSG":true}