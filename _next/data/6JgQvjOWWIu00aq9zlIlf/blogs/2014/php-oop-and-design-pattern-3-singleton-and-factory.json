{"pageProps":{"id":["posts","2014","php-oop-and-design-pattern-3-singleton-and-factory"],"post":{"id":["posts","2014","php-oop-and-design-pattern-3-singleton-and-factory"],"contentHtml":"<p>PHP高级程序设计 学习笔记 2014.06.11</p>\n<p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。</p>\n<h2 id=\"hash-单例模式\">单例模式</h2>\n<p>当需要保证某个对象只能有一个实例的时候，单例模式非常有用。它把创建对象的控制权委托到一个单一的点上，任何时候应用程序都只会仅有一个实例存在。单例类不应该可以在类的外部进行实例化一个单例类应该具备以下几个要素。</p>\n<p>必须拥有一个访问级别为 private 的构造函数，有效防止类被随意实例化。</p>\n<p>必须拥有一个保存类的实例的静态变量。</p>\n<p>必须拥有一个访问这个实例的公共的静态方法，该方法通常被命名为 GetInstance()。</p>\n<p>必须拥有一个私有的空的__clone方法，防止实例被克隆复制。</p>\n<p>下面用一个简单的单例类的例子来说明</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">ClassName</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token variable\">$_instance</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\"># code...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\"># empty</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token scope\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">::</span></span><span class=\"token variable\">$_instance</span> <span class=\"token keyword\">instanceof</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token scope\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">::</span></span><span class=\"token variable\">$_instance</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token scope\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">::</span></span><span class=\"token variable\">$_instance</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Hi boy!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$App</span><span class=\"token operator\">=</span> <span class=\"token scope\">ClassName<span class=\"token punctuation\">::</span></span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$App</span><span class=\"token operator\">-></span><span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> *</span>\n<span class=\"token doc-comment comment\"> * Output</span>\n<span class=\"token doc-comment comment\"> *</span>\n<span class=\"token doc-comment comment\"> * Hi boy! </span>\n<span class=\"token doc-comment comment\"> *</span>\n<span class=\"token doc-comment comment\"> */</span>\n</code></pre></div>\n<h2 id=\"hash-简单工厂模式\">简单工厂模式</h2>\n<p>当你有大量的实现同一接口的类的时候，在合适的时候实例化合适的类，如果把这些 new 分散到项目的各个角落，不仅会使业务逻辑变的混乱并且使得项目难以维护。这时候如果引进工厂模式的概念，就能很好的处理这个问题。我们还可以通过应用程序配置或者提供参数的形式让工厂类为我们返回合适的的实例。</p>\n<p>工厂类，它把实例化类的过程放到各工厂类里头，专门用来创建其他类的对象。工厂模式往往配合接口一起使用，这样应用程序就不必要知道这些被实例化的类的具体细节，只要知道工厂返回的是支持某个接口的类可以很方便的使用了。下面简单举例说明下工厂类的使用。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">interface</span> <span class=\"token class-name-definition class-name\">ProductInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">showProductInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">ProductA</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ProductInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">showProductInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'This is product A.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">ProductB</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ProductInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">showProductInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'This is product B.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">ProductFactory</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ProductType</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>        \n        <span class=\"token variable\">$ProductType</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'Product'</span> <span class=\"token operator\">.</span> <span class=\"token function\">strtoupper</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ProductType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">class_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ProductType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$ProductType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Error Processing Request\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//这里需要一个产品型号为 A 的对象</span>\n<span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token scope\">ProductFactory<span class=\"token punctuation\">::</span></span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$x</span> <span class=\"token operator\">-></span> <span class=\"token function\">showProductInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这里需要一个产品型号为 B 的对象</span>\n<span class=\"token variable\">$o</span> <span class=\"token operator\">=</span> <span class=\"token scope\">ProductFactory<span class=\"token punctuation\">::</span></span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$o</span> <span class=\"token operator\">-></span> <span class=\"token function\">showProductInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//都可以调用showProductInfo方法，因为都实现了接口 ProductInterface.</span>\n</code></pre></div>\n<h2 id=\"hash-小结\">小结</h2>\n<p>模式就像是软件工程的基石脉络像大厦的设计图纸一样，这里接触了两种模式：单例模式和工程模式。单例类中存在一个静态变量保存着自身的一个实例，并且提供了获取这个静态变量的静态方法。单例类还应该把构造函数和clone函数标记为私有的，防止破换实例的唯一性。工厂模式根据传入的参数或程序的配置来创建不同的类型实例，工厂类返回的是对象，工厂类在多态性编程实践中是至关重要的。</p>\n","words":1886,"toc":[{"depth":2,"value":"单例模式","id":"hash-单例模式"},{"depth":2,"value":"简单工厂模式","id":"hash-简单工厂模式"},{"depth":2,"value":"小结","id":"hash-小结"}],"title":"PHP 面向对象编程和设计模式 (3/5) - 单例模式和工厂模式","author":"高国良","type":"posts","series":false,"date":"2014-06-11T10:40:00.791Z","tags":["php"],"description":"设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工...","draft":false,"cover":false},"prev":{"title":"PHP 面向对象编程和设计模式 (2/5) - 静态变量、属性和方法及延迟绑定","author":"高国良","type":"posts","series":false,"date":1402360080791,"tags":["php"],"description":"当希望指向最终的实现功能的类时，就可以使用 static，这个限定符会在代码执行之前立即计算出继承层次结构上最后那个类的成员。这一过程被称作延迟绑定。","draft":false,"cover":false,"path":"/blogs/2014/php-oop-and-design-pattern-2-static-variables-properties-methods-and-delayed-binding","slug":"2014/php-oop-and-design-pattern-2-static-variables-properties-methods-and-delayed-binding"},"next":{"title":"PHP 面向对象编程和设计模式 (4/5) - 异常的定义、扩展及捕获","author":"高国良","type":"posts","series":false,"date":1402536000791,"tags":["php","Exception"],"description":"PHP5 增加了类似其他语言的异常处理模块。在PHP代码中所产生的异常可被 throw 语句抛出并被 catch 语句捕获。需要进行异常处理的代码都必须放入到 try 代码���内，以便捕获可能存在的异常。每个try至少对应一个 catch 块。使用多个 catch 可以捕获不同的类所产生的异常。","draft":false,"cover":false,"path":"/blogs/2014/php-oop-and-design-pattern-4-exception","slug":"2014/php-oop-and-design-pattern-4-exception"}},"__N_SSG":true}