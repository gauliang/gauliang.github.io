{"pageProps":{"id":["posts","2014","laravel-composer"],"post":{"id":["posts","2014","laravel-composer"],"contentHtml":"<h2 id=\"hash-Composer-概述\">Composer 概述</h2>\n<p>一开始，最吸引我的当属 Composer 了，因为之前从没用过 Composer。</p>\n<p>Composer 是 PHP 中用来管理依赖关系的工具，你只需在自己的项目中声明所依赖的外部工具库，Composer 就会帮你安装这些依赖的库文件。运行 Composer 需要 PHP 5.3.2+ 以上版本。</p>\n<h2 id=\"hash-使用-Composer\">使用 Composer</h2>\n<p>第一步，声明依赖关系。比方说，你正在创建的一个项目需要一个库来做日志记录。你决定使用<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/Seldaek/monolog\">monolog</a>。为了将它添加到你的项目中，你所需要做的就是创建一个<code>composer.json</code>文件，其中描述了项目的依赖关系。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string double-quoted-string\">\"require\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string double-quoted-string\">\"monolog/monolog\"</span><span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"1.2.*\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>第二步，使用 composer。在项目根目录，执行安装命令，执行完毕后，monolog 就会被下载到<code>vendor/monolog/monolog</code>目录。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ php composer.phar <span class=\"token function\">install</span>\n</code></pre></div>\n<p>第三步，类的自动加载。除了库的下载，Composer 还准备了一个自动加载文件，它可以加载 Composer 下载的库中所有的类文件。\n使用它，你只需要将下面这行代码添加到你项目的引导文件中：</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">require</span> <span class=\"token string single-quoted-string\">'vendor/autoload.php'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这使得你可以很容易的使用第三方代码。例如：如果你的项目依赖 monolog，你就可 ��� 像这样开始使用这个类库，并且他们将被自动加载。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$log</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name class-name-fully-qualified\">Monolog<span class=\"token punctuation\">\\</span>Logger</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$log</span><span class=\"token operator\">-></span><span class=\"token function\">pushHandler</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name class-name-fully-qualified\">Monolog<span class=\"token punctuation\">\\</span>Handler<span class=\"token punctuation\">\\</span>StreamHandler</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'app.log'</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">Monolog<span class=\"token punctuation\">\\</span>Logger<span class=\"token punctuation\">::</span></span><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$log</span><span class=\"token operator\">-></span><span class=\"token function\">addWarning</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2 id=\"hash-Composer-自动加载探秘\">Composer 自动加载探秘</h2>\n<p>在现实世界中使用工具时，如果理解了工具的工作原理，使用起来就会更加有底气。\n对于一个第一次接触 Laravel，且是第一次接触 Composer 的新手来说，如果理解 Composer 是如何工作的，使用起来将会更加自如。</p>\n<p>我的理解是，Composer 根据声明的依赖关系，从相关库的 源 下载代码文件，并根据依赖关系在 Composer 目录下生成供类自动加载的 PHP 脚本，\n使用的时候，项目开始处引入 <code>/vendor/autoload.php</code> 文件，就可以直接实例化这些第三方类库中的类了。\n那么，Composer 是如何实现类的自动加载的呢？接下来，我们从 Laravel 的入口文件开始顺藤摸瓜往里跟进，来一睹 Composer 自动加载的奥妙。</p>\n<p><strong>laravel/public/index.php</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/../bootstrap/autoload.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$app</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require_once</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/../bootstrap/start.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$app</span><span class=\"token operator\">-></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>第一行先是引入了 <code>laravel/bootstrap/autoload.php</code>，不做解释，打开该文件。</p>\n<p><strong>laravel/bootstrap/autoload.php</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'LARAVEL_START'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">microtime</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/../vendor/autoload.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$compiled</span> <span class=\"token operator\">=</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/compiled.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">require</span> <span class=\"token variable\">$compiled</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token scope\">Patchwork<span class=\"token punctuation\">\\</span>Utf8<span class=\"token punctuation\">\\</span>Bootup<span class=\"token punctuation\">::</span></span><span class=\"token function\">initMbstring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>第一行定义了程序开始执行的时间点。紧接着第二行，引入了 <code>laravel/vendor/autoload.php</code>。</p>\n<p>第七行，前面说过，引入 Composer 的 autoload.php 之后就可以直接使用第三方类库中的类了，这里就是直接使用的 Bootup 类。\n下面来看看 <code>/vendor/autoload.php</code> 到底做了什么。</p>\n<p><strong>laravel/vendor/autoload.php</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\"># autoload.php @generated by Composer</span>\n<span class=\"token keyword\">require_once</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/composer'</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/autoload_real.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token scope\">ComposerAutoloaderInit9b2a1b1cf01c9a870ab98748dc5f1256<span class=\"token punctuation\">::</span></span><span class=\"token function\">getLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>到这里，马上就进入自动加在的大门了。</p>\n<p>这个文件很简单，第 5 行的函数名是不是看的一头雾水？别被吓到了,他就是个类名而已。\n这个类是在第 3 行引入的文件 <code>laravel/vendor/composer/autoload_real.php</code> 里头声明的，接下来打开该文件看<code>getLoader()</code>;</p>\n<p><strong>laravel/vendor/composer/autoload_real.php</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// autoload_real.php @generated by Composer</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">ComposerAutoloaderInit9b2a1b1cf01c9a870ab98748dc5f1256</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token variable\">$loader</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">loadClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Composer\\Autoload\\ClassLoader'</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/ClassLoader.php'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">null</span> <span class=\"token operator\">!==</span> <span class=\"token scope\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">::</span></span><span class=\"token variable\">$loader</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token scope\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">::</span></span><span class=\"token variable\">$loader</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">spl_autoload_register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'ComposerAutoloaderInit9b2a1b1cf01c9a870ab98748dc5f1256'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'loadClassLoader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token scope\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">::</span></span><span class=\"token variable\">$loader</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$loader</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name class-name-fully-qualified\"><span class=\"token punctuation\">\\</span>Composer<span class=\"token punctuation\">\\</span>Autoload<span class=\"token punctuation\">\\</span>ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">spl_autoload_unregister</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'ComposerAutoloaderInit9b2a1b1cf01c9a870ab98748dc5f1256'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'loadClassLoader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$vendorDir</span> <span class=\"token operator\">=</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$baseDir</span> <span class=\"token operator\">=</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$vendorDir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$includePaths</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/include_paths.php'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">array_push</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$includePaths</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_include_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_include_path</span><span class=\"token punctuation\">(</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PATH_SEPARATOR</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$includePaths</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/autoload_namespaces.php'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$map</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$namespace</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$loader</span><span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$namespace</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/autoload_psr4.php'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$map</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$namespace</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$loader</span><span class=\"token operator\">-></span><span class=\"token function\">setPsr4</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$namespace</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$classMap</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/autoload_classmap.php'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$classMap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$loader</span><span class=\"token operator\">-></span><span class=\"token function\">addClassMap</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$classMap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$loader</span><span class=\"token operator\">-></span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$includeFiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/autoload_files.php'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$includeFiles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">composerRequire9b2a1b1cf01c9a870ab98748dc5f1256</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$loader</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">composerRequire9b2a1b1cf01c9a870ab98748dc5f1256</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span>及 <span class=\"token variable\">$loader</span><span class=\"token operator\">-></span><span class=\"token function\">addClassMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>第 17 行，<code>getLoader()</code> 中先是判断当前类中的 <code>$loader</code> 值，如果不是 <code>null</code> 就返回，这个可以略过。接着实例化了 ClassLoader 类给 $loader ，<code>laravel/vendor/composer/ClassLoader.php</code></p>\n<p>这里引入了几个文件，这些文件是由 Composer 自动生成的，当依赖关系发生改变时不需要修改这些脚本，运行 Composer 重新生成即可。</p>\n<ul>\n<li>laravel/vendor/composer/autoloade_namespace.php</li>\n<li>laravel/vendor/composer/autoloade_prs4.php</li>\n<li>laravel/vendor/composer/autoloade_classmap.php</li>\n<li>laravel/vendor/composer/autoloade_files.php</li>\n</ul>\n<p>在设置完一堆的 path 信息后，执行了 <code>$loader->set()</code>和 <code>$loader->setPsr4()</code> 及 <code>$loader->addClassMap()</code>，\n然后进行了 <code>$loader->register(true);</code> 现在我们一个个来看。</p>\n<p><strong>laravel/vendor/composer/ClassLoader.php</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/*</span>\n<span class=\"token comment\"> * This file is part of Composer.</span>\n<span class=\"token comment\"> *</span>\n<span class=\"token comment\"> * (c) Nils Adermann &#x3C;naderman@naderman.de></span>\n<span class=\"token comment\"> *     Jordi Boggiano &#x3C;j.boggiano@seld.be></span>\n<span class=\"token comment\"> *</span>\n<span class=\"token comment\"> * For the full copyright and license information, please view the LICENSE</span>\n<span class=\"token comment\"> * file that was distributed with this source code.</span>\n<span class=\"token comment\"> */</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Composer<span class=\"token punctuation\">\\</span>Autoload</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * ClassLoader implements a PSR-0 class loader\n *\n * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\n *\n *     $loader = new \\Composer\\Autoload\\ClassLoader();\n *\n *     // register classes with namespaces\n *     $loader->add('Symfony\\Component', __DIR__.'/component');\n *     $loader->add('Symfony',           __DIR__.'/framework');\n *\n *     // activate the autoloader\n *     $loader->register();\n *\n *     // to enable searching the include path (eg. for PEAR packages)\n *     $loader->setUseIncludePath(true);\n *\n * In this example, if you try to use a class in the Symfony\\Component\n * namespace or one of its children (Symfony\\Component\\Console for instance),\n * the autoloader will first look for the class under the component/\n * directory, and it will then fallback to the framework/ directory if not\n * found before giving up.\n *\n * This class is loosely based on the Symfony UniversalClassLoader.\n *\n * <span class=\"token keyword\">@author</span> Fabien Potencier &#x3C;fabien@symfony.com>\n * <span class=\"token keyword\">@author</span> Jordi Boggiano &#x3C;j.boggiano@seld.be>\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">ClassLoader</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// PSR-4</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$prefixLengthsPsr4</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$prefixDirsPsr4</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$fallbackDirsPsr4</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// PSR-0</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$prefixesPsr0</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$fallbackDirsPsr0</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$useIncludePath</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$classMap</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getPrefixes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">call_user_func_array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'array_merge'</span><span class=\"token punctuation\">,</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getPrefixesPsr4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getFallbackDirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getFallbackDirsPsr4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getClassMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">array</span></span> <span class=\"token parameter\">$classMap</span> Class to filename map\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">addClassMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$classMap</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$classMap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$classMap</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Registers a set of PSR-0 directories for a given prefix, either\n     * appending or prepending to the ones previously set for this prefix.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span>       <span class=\"token parameter\">$prefix</span>  The prefix\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">array</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">string</span></span> <span class=\"token parameter\">$paths</span>   The PSR-0 root directories\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span>         <span class=\"token parameter\">$prepend</span> Whether to prepend the directories\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prepend</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$prepend</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr0</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr0</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr0</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr0</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$first</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$prefix</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$prepend</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">,</span>\n                <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span>\n                <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Registers a set of PSR-4 directories for a given namespace, either\n     * appending or prepending to the ones previously set for this namespace.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span>       <span class=\"token parameter\">$prefix</span>  The prefix/namespace, with trailing '\\\\'\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">array</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">string</span></span> <span class=\"token parameter\">$paths</span>   The PSR-0 base directories\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span>         <span class=\"token parameter\">$prepend</span> Whether to prepend the directories\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">addPsr4</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prepend</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Register directories for the root namespace.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$prepend</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr4</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr4</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr4</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr4</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Register directories for a new namespace.</span>\n            <span class=\"token variable\">$length</span> <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\\\'</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$prefix</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name class-name-fully-qualified\"><span class=\"token punctuation\">\\</span>InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"A non-empty PSR-4 prefix must end with a namespace separator.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixLengthsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$length</span><span class=\"token punctuation\">;</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$prepend</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Prepend directories for an already registered namespace.</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">,</span>\n                <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Append directories for an already registered namespace.</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span>\n                <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Registers a set of PSR-0 directories for a given prefix,\n     * replacing any others previously set for this prefix.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span>       <span class=\"token parameter\">$prefix</span> The prefix\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">array</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">string</span></span> <span class=\"token parameter\">$paths</span>  The PSR-0 base directories\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr0</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Registers a set of PSR-4 directories for a given namespace,\n     * replacing any others previously set for this namespace.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span>       <span class=\"token parameter\">$prefix</span>  The prefix/namespace, with trailing '\\\\'\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">array</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">string</span></span> <span class=\"token parameter\">$paths</span>   The PSR-4 base directories\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setPsr4</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr4</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$length</span> <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\\\'</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$prefix</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name class-name-fully-qualified\"><span class=\"token punctuation\">\\</span>InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"A non-empty PSR-4 prefix must end with a namespace separator.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixLengthsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$length</span><span class=\"token punctuation\">;</span>\n            <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">array</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$paths</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Turns on searching the include path for class files.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token parameter\">$useIncludePath</span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setUseIncludePath</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$useIncludePath</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">useIncludePath</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$useIncludePath</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Can be used to check if the autoloader uses the include path to check\n     * for classes.\n     *\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getUseIncludePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">useIncludePath</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Registers this instance as an autoloader.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token parameter\">$prepend</span> Whether to prepend the autoloader or not\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">register</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prepend</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">spl_autoload_register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'loadClass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prepend</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">     * Unregisters this instance as an autoloader.</span>\n<span class=\"token doc-comment comment\">     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">spl_autoload_unregister</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'loadClass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Loads the given class or interface.\n     *\n     * <span class=\"token keyword\">@param</span>  <span class=\"token class-name\"><span class=\"token keyword\">string</span></span>    <span class=\"token parameter\">$class</span> The name of the class\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">null</span></span> True if loaded, null otherwise\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">findFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">includeFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Finds the path to the file where the class is defined.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token parameter\">$class</span> The name of the class\n     *\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">|</span><span class=\"token keyword\">false</span></span> The path if found, false otherwise\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">findFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// work around for PHP 5.3.0 - 5.3.2 https://bugs.php.net/50731</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\\\'</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// class map lookup</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">findFileWithExtension</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Search for Hack files if we are running on HHVM</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">===</span> <span class=\"token constant\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'HHVM_VERSION'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">findFileWithExtension</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'.hh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">===</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Remember that this class does not exist.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">findFileWithExtension</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ext</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// PSR-4 lookup</span>\n        <span class=\"token variable\">$logicalPathPsr4</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$ext</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$first</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixLengthsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixLengthsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> <span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dir</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logicalPathPsr4</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// PSR-4 fallback dirs</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr4</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dir</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$logicalPathPsr4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// PSR-0 lookup</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant boolean\">false</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$pos</span> <span class=\"token operator\">=</span> <span class=\"token function\">strrpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// namespaced class name</span>\n            <span class=\"token variable\">$logicalPathPsr0</span> <span class=\"token operator\">=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logicalPathPsr4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$pos</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">.</span> <span class=\"token function\">strtr</span><span class=\"token punctuation\">(</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logicalPathPsr4</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$pos</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// PEAR-like class name</span>\n            <span class=\"token variable\">$logicalPathPsr0</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$ext</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$dirs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> <span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$dirs</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dir</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$logicalPathPsr0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// PSR-0 fallback dirs</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr0</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dir</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$logicalPathPsr0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// PSR-0 include paths.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">useIncludePath</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">stream_resolve_include_path</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logicalPathPsr0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * Scope isolated include.</span>\n<span class=\"token doc-comment comment\"> *</span>\n<span class=\"token doc-comment comment\"> * Prevents access to $this/self from included files.</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">includeFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">include</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>$loader->set($namespace, $path);</code> Psr0 标准，设置命名空间对应的路径，以便于随后自动加载相关类文件。</p>\n<p><code>$loader->setPsr4($namespace, $path);</code> Psr4 标准，设置命名空间对应的路径，以便于随后自动加载相关类文件。</p>\n<p><code>$loader->addClassMap($classMap);</code> 设置类文件路径与类名的对应关系，以便于随后自动加载相关类文件。</p>\n<p><code>$loader->register(true);</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">register</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$prepend</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">spl_autoload_register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'loadClass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prepend</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这里设置了欲注册的自动装载函数 $<code>this->loadClass()</code>，关于 <code>spl_autoload_register</code> 和 <code>spl_autoload_unregister</code> 的更多信息随后会有专门的解释。\n现在打开 <code>loadClass()</code> 的定义</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">findFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">includeFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这里有个 <code>findFile()</code> 函数，如果相关类的声明所在文件的路径找到了，就包含并运行该文件，然后返回 <code>true</code> 。接着打开 <code>findFile()</code> 的定义</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">findFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// work around for PHP 5.3.0 - 5.3.2 https://bugs.php.net/50731</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\\\'</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// class map lookup</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">findFileWithExtension</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Search for Hack files if we are running on HHVM</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">===</span> <span class=\"token constant\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'HHVM_VERSION'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">findFileWithExtension</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'.hh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">===</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Remember that this class does not exist.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">classMap</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>先是判断类名是否以<code>\\</code>开始，如果是的话，清除开头的<code>\\</code></p>\n<p>接着，检查当前类的名字是否在 类名与声明当前类的文件的路径的关系数组 中，如果存在，直接返回相关键值（类文件路径信息）</p>\n<p>如果上一步没有返回路径信息，执行 <code>findFileWithExtension($class, '.php')</code> 继续查找类文件路径信息，findFileWithExtension 的定义后面将会列出。</p>\n<p>如果仍未找到类的文件路径信息，返回值为 null 且定义了 HHVM_VERSION 信息，则用<code>.hh</code>后缀继续查找类文件信息。</p>\n<p>HHVM_VERSION 是 HHVM 版本信息？ HHVM 是 Facebook 开发的高性能 PHP 虚拟机，宣称比官方的快 9 倍。</p>\n<p>如果仍未找到，则返回 false 。Remember that this class does not exist.（这句注释很有喜感？哈哈）</p>\n<p>代码清单 <code>findFileWithExtension()</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">findFileWithExtension</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ext</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// PSR-4 lookup</span>\n    <span class=\"token variable\">$logicalPathPsr4</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$ext</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$first</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixLengthsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixLengthsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> <span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixDirsPsr4</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dir</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logicalPathPsr4</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// PSR-4 fallback dirs</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr4</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dir</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$logicalPathPsr4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// PSR-0 lookup</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant boolean\">false</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$pos</span> <span class=\"token operator\">=</span> <span class=\"token function\">strrpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// namespaced class name</span>\n        <span class=\"token variable\">$logicalPathPsr0</span> <span class=\"token operator\">=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logicalPathPsr4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$pos</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">.</span> <span class=\"token function\">strtr</span><span class=\"token punctuation\">(</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logicalPathPsr4</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$pos</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// PEAR-like class name</span>\n        <span class=\"token variable\">$logicalPathPsr0</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$ext</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefixesPsr0</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$dirs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> <span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prefix</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$dirs</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dir</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$logicalPathPsr0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// PSR-0 fallback dirs</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fallbackDirsPsr0</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dir</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$logicalPathPsr0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// PSR-0 include paths.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">useIncludePath</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">stream_resolve_include_path</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logicalPathPsr0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>该函数唯一的目的就是根据刚才通过 <code>$loader->set($namespace, $path)</code> 和 <code>$loader->setPsr4($namespace, $path)</code> 方法设置的信息找出类文件的路径信息。</p>\n<p>接下来，我们回到代码清单 <code>laravel/vendor/composer/autoload_real.php</code> ，为精简篇幅，这里只贴出片段（续上节的 <code>$loader->register(true)</code>）。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// 续上节的 `$loader->register(true)`</span>\n        <span class=\"token variable\">$loader</span><span class=\"token operator\">-></span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$includeFiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/autoload_files.php'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$includeFiles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">composerRequire9b2a1b1cf01c9a870ab98748dc5f1256</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$loader</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">composerRequire9b2a1b1cf01c9a870ab98748dc5f1256</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在经历了一番长途跋涉后，终于从 <code>laravel/vendor/composer/ClassLoader.php</code> 中出来了。\n继 <code>$loader->register(true)</code> 之后，又引入了 <code>laravel/vendor/composer/autoload_files.php</code>,\n相比之下，这个文件要简单得多，只是个数组，列出了几个文件路径。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// autoload_files.php @generated by Composer</span>\n\n<span class=\"token variable\">$vendorDir</span> <span class=\"token operator\">=</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$baseDir</span> <span class=\"token operator\">=</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$vendorDir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n    <span class=\"token variable\">$vendorDir</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/ircmaxell/password-compat/lib/password.php'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$vendorDir</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/swiftmailer/swiftmailer/lib/swift_required.php'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$vendorDir</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/phpseclib/phpseclib/phpseclib/Crypt/Random.php'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$vendorDir</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/laravel/framework/src/Illuminate/Support/helpers.php'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接着就是用 <code>composerRequire9b2a1b1cf01c9a870ab98748dc5f1256()</code> 函数 包含并运行 这几个文件。这四个文件的具体信息，随后会专门写博文来认识。</p>\n<p>最后 ， 返回 ClassLoader 类的实例 <code>$loader</code> 。</p>\n<p>现在在回到 <em>laravel/bootstrap/autoload.php 的第 7 行</em></p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'LARAVEL_START'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">microtime</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span> <span class=\"token constant\">__DIR__</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'/../vendor/autoload.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$compiled</span> <span class=\"token operator\">=</span> <span class=\"token constant\">__DIR__</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'/compiled.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span> <span class=\"token variable\">$compiled</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token scope\">Patchwork<span class=\"token punctuation\">\\</span>Utf8<span class=\"token punctuation\">\\</span>Bootup<span class=\"token punctuation\">::</span></span><span class=\"token function\">initMbstring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>注意这里第 7 行，之所以可以直接像 <code>Patchwork\\Utf8\\Bootup::initMbstring()</code> 这么使用而不需要手动 required Bootup 类文件，\n是因为 前面在 ClassLoader 中的 register() 函数用 spl_autoload_register() 对 Bootup 类进行了注册。下面说一下 spl_autoload_register 。</p>\n<h2 id=\"hash-spl_autoload_register\">spl_autoload_register</h2>\n<p>要使用 spl_autoload_register ，请保证你的 PHP 版本(PHP 5 >= 5.1.2)。</p>\n<p><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.php.net\">www.php.net</a> 对 <code>spl_autoload_register</code> 的解释如下：注册 <code>__autoload()</code>函数，将函数注册到 SPL __autoload 函数栈中。如果该栈中的函数尚未激活，则激活它们。刚接触 PHP 的同学肯定觉得这个解释云里雾里的，看完依然不知道什么意思。要想理解这句话，首先要弄明白 <code>__autoload()</code> 是个什么东西。</p>\n<h2 id=\"hash-__autoload-\">__autoload()</h2>\n<p><code>__autoload()</code> 的作用是尝试加载未定义的类，可以通过定义这个函数来启用类的自动加载。下面举个例子：</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__autoload</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'尝试加载的类的名字是：'</span><span class=\"token operator\">.</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$say</span><span class=\"token operator\">=</span> @ <span class=\"token keyword\">new</span> <span class=\"token class-name\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上例会输出：\"尝试加载的类的名字是 say \"。由于最后一行引用了尚未定义的类 box ，所以 <code>__autoload()</code> 函数将被执行。</p>\n<p>再看下面这段</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">say</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'say 类存在，并说出了hello，所以 __autoload 函数不会执行。'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__autoload</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'尝试加载的类的名字是：'</span><span class=\"token operator\">.</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$say</span><span class=\"token operator\">=</span> @ <span class=\"token keyword\">new</span> <span class=\"token class-name\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这将会输出 :say 类存在，并说出了 hello, 所以 <code>__autoload()</code> 函数不会执行。</p>\n<p>理解完 __autoload 就好办了，再看上面：<strong>将函数注册到 SPL __autoload 函数栈中</strong>，意思是我们可以自定义尝试加载未定义的类时 使用的函数。现在返回代码片段</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">spl_autoload_register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token this keyword\">$this</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'loadClass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prepend</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这下是不是很明白了，当实例化一个类的时候，如果这个类没有定义，就执行 ClassLoader 类中的 loadClass 函数。\nloadClass 的定义前面我们说过了，就是找到声明相关类的文件，然后包含并运行该文件，随后加载相关类。</p>\n<p>至此，composer 的自动加载机制学习完毕。</p>\n","words":17124,"toc":[{"depth":2,"value":"Composer 概述","id":"hash-Composer-概述"},{"depth":2,"value":"使用 Composer","id":"hash-使用-Composer"},{"depth":2,"value":"Composer 自动加载探秘","id":"hash-Composer-自动加载探秘"},{"depth":2,"value":"spl_autoload_register","id":"hash-spl_autoload_register"},{"depth":2,"value":"__autoload()","id":"hash-__autoload-"}],"title":"Composer 概述及其自动加载探秘","author":"高国良","type":"posts","series":false,"date":"2014-05-16T01:58:00.791Z","tags":["Composer","php","laravel"],"description":"刚开始接触 Laravel，一天时间走马观花的看了一些官方文档之后便开始了 Laravel 的学习。这里谈到的都是最基础的东西，各路大神，可直接略过。本节主要记录 Composer 概述及其自动加载相关的流程。","draft":false,"cover":false},"prev":null,"next":{"title":"JavaScript高级编程 (1) - javscript是什么","author":"高国良","type":"posts","series":false,"date":1400520480791,"tags":["javascript"],"description":"《重温javascript》这是一些列 javascript 的学习笔记，部分内容摘自书本或者网络，我这里只是基于自己的理解进行了梳理整理。","draft":false,"cover":false,"path":"/blogs/2014/what-is-the-javscript","slug":"2014/what-is-the-javscript"}},"__N_SSG":true}