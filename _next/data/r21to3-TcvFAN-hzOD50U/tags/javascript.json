{"pageProps":{"tag":"javascript","total":15,"posts":[{"title":"Throttling and Debounce","date":1606385732000,"draft":false,"description":"节流是指，确保连续发生的事件（函数调用）按指定频率（时间间隔）触发执行器。防抖是指，事件发生（函数调用）后，在指定时间内，同样的操作只有最后一次会生效。","type":"posts","tags":["debounce","throttle","javascript"],"series":false,"author":"GauLiang","cover":"throttle-and-debounce.jpg","path":"/blogs/2020/throttle-and-debounce","slug":"2020/throttle-and-debounce"},{"title":"Javascript Closure","date":1602413155000,"draft":false,"description":"函数和与其相关的词法环境（lexical environment）一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域，在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。","type":"posts","tags":["closure","lexical-environment","javascript","node.js","Closure"],"series":false,"author":"GauLiang","cover":"cover.jpg","path":"/blogs/2020/javascript-closure","slug":"2020/javascript-closure"},{"title":"Javascript Promise","date":1599998424000,"draft":false,"description":"Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值。本质上 Promise 是一个函数返回的对象，我们可以在它上面绑定回调函数，这样我们就不需要在一开始把回调函数作为参数传入这个函数了。","type":"posts","tags":["javascript","node.js","promise"],"series":false,"author":"GauLiang","cover":"001.jpg","path":"/blogs/2020/promise","slug":"2020/promise"},{"title":"ECMAScript Modules","date":1599470041000,"draft":false,"description":"ES6 中首次内置了对模块的支持。从理论上讲，ECMAScript模块应该在所有JavaScript环境中通用。实际上，浏览器仍然是ES模块的主要目标。","type":"posts","tags":["esm","javascript"],"series":false,"author":"GauLiang","cover":false,"path":"/blogs/2020/es-modules","slug":"2020/es-modules"},{"title":"CommonJS Modules","date":1599358780000,"draft":false,"description":"在 ES2015 标准之前，JavaScript语言没有模块化组织代码的原生方法，CommonJS 模块格式填补了这一空白。","type":"posts","tags":["javascript","module"],"series":false,"author":"GauLiang","cover":"001.jpg","path":"/blogs/2020/commonJS-modules","slug":"2020/commonJS-modules"},{"title":"Javascript 模块化概述","date":1599293077000,"draft":false,"description":"当我们提及模块化时，通常意味着是由一组高度分离的，不同的功能块存储在模块中组成的。在可能的情况下，通过松散耦合消除依赖关系简化应用程序的可维护性。","type":"posts","tags":["javascript","module"],"series":false,"author":"GauLiang","cover":"001.jpg","path":"/blogs/2020/what-are-cjs-amd-umd-and-esm-in-javascript","slug":"2020/what-are-cjs-amd-umd-and-esm-in-javascript"},{"title":"Javascript 箭头函数最佳实践[译]","date":1599274300000,"draft":false,"description":"箭头函数的语法简洁明了，非常适合作为回调使用。本文介绍 5 中关于箭头函数的最佳实践。","type":"posts","tags":["javascript","node.js","arrow-function","best-practices"],"series":false,"author":"GauLiang","cover":"javascript-arrow-function-best-practices.jpg","path":"/blogs/2020/javascript-arrow-function-best-practices","slug":"2020/javascript-arrow-function-best-practices"},{"title":"Learn Algorithms With Javascript - 基于 Js 进行算法学习","author":"高国良","type":"posts","series":false,"date":1526813520791,"tags":["javascript","Algorithms"],"description":"基于 javascript 学习并实现常用的经典算法。本项目托管在 [GitHub]，欢迎对算法和数学感兴趣的 Js 开发者参与，一起学习共同进步。","draft":false,"cover":false,"path":"/blogs/2018/learn-algorithms-with-javascript","slug":"2018/learn-algorithms-with-javascript"},{"title":"ES 2015/6 新特性汇总","author":"高国良","type":"posts","series":false,"date":1497831600791,"tags":["javascript","web","ES6"],"description":"ES 2015/6 新增内容还是比较多的，这里仅大纲性的列举一下这些特性。其实，每个点挖进去都会有很多学问在里头，本文旨在汇总，所以不对这些特性进行深层次的讨论及研究。随后有时间的话，在单独写几篇博客对常用的点进行深挖，与大家进行深度交流。","draft":false,"cover":false,"path":"/blogs/2017/es-2015-6-features","slug":"2017/es-2015-6-features"},{"title":"Javascript 中的数组","date":1443728040791,"draft":false,"description":"Array 是 javascript 中经常用到的数据类型。本文主要讨论 javascript 中数组的声明、转换、排序、合并、迭代等基本操作。","type":"posts","tags":["array","javascript"],"series":false,"author":"GauLiang","cover":false,"path":"/blogs/2015/array-in-js","slug":"2015/array-in-js"},{"title":"Javascript 的执行环境(execution context)和作用域(scope)及垃圾回收","author":"高国良","type":"posts","series":false,"date":1440280980791,"tags":["javascript","debug","context"],"description":"执行环境有全局执行环境和函数执行环境之分，每次进入一个新执行环境，都会创建一个搜索变量和函数的作用域链。函数的局部环境不仅有权访问函数作用于中的变量，而且可以访问其外部环境，直到全局环境。全局执行环境只能访问全局执行环境的变量和函数，不能直接访问局部环境中的信息；","cover":false,"path":"/blogs/2015/javascript-execution-context-and-scope","slug":"2015/javascript-execution-context-and-scope"},{"title":"Dreamweaver 扩展开发： Calling a C++ function from JavaScript","author":"高国良","type":"posts","series":false,"date":1415404020791,"tags":["javascript","Dreamweaver","c++"],"description":"After you understand how C-level extensibility works in Dreamweaver and its dependency on certain data types and functions, it's useful to know how to build a library and call a function.","draft":false,"cover":false,"path":"/blogs/2014/dw-ext-calling-c-function-javascript","slug":"2014/dw-ext-calling-c-function-javascript"},{"title":"JS 事件调试 - 查找 HTML 元素绑定的事件以及绑定代码所在位置","author":"高国良","type":"posts","series":false,"date":1403780580791,"tags":["javascript","event","debug"],"description":"日常的网页开发调试工作中，经常需要知道指定的某个网页元素绑定了哪些事件以及绑定代码的位置，下面介绍三种用来跟踪页面中的事件的方法。","draft":false,"cover":false,"path":"/blogs/2014/js-event-debug","slug":"2014/js-event-debug"},{"title":"JavaScript高级编程 (2) - HTML 与 JavaScript","author":"高国良","type":"posts","series":false,"date":1402009560791,"tags":["javascript","html"],"description":"向HTML 页面中插入JavaScript 的主要方法，就是使用元素。这个元素由Netscape 创造并在Netscape Navigator 2 中首先实现。后来，这个元素被加入到正式的HTML 规范中。","draft":false,"cover":false,"path":"/blogs/2014/html-and-javascript","slug":"2014/html-and-javascript"},{"title":"JavaScript高级编程 (1) - javscript是什么","author":"高国良","type":"posts","series":false,"date":1400520480791,"tags":["javascript"],"description":"《重温javascript》这是一些列 javascript 的学习笔记，部分内容摘自书本或者网络，我这里只是基于自己的理解进行了梳理整理。","draft":false,"cover":false,"path":"/blogs/2014/what-is-the-javscript","slug":"2014/what-is-the-javscript"}]},"__N_SSG":true}