{"pageProps":{"id":["posts","2018","java-1-basic-knowledge"],"post":{"id":["posts","2018","java-1-basic-knowledge"],"contentHtml":"<p>java 语言规范及相关文档资源</p>\n<p>Java源码：安装目录下 src.zip 文件\r\njava文档：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://docs.oracle.com/en/java/\">https://docs.oracle.com/en/java/</a>\r\n语言规范：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://docs.oracle.com/javase/specs\">http://docs.oracle.com/javase/specs</a>\r\nJAVASE文档：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://docs.oracle.com/javase/8/docs/\">https://docs.oracle.com/javase/8/docs/</a></p>\n<h2 id=\"hash-一、程序结构\">一、程序结构</h2>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>public</code> 是访问修饰符，声明这段代码的访问级别。在这里类 <code>App</code> 作为装载程序逻辑的容器，以驼峰命名法命名（java 区分大小写）,Java 中所有程序内容都须放置在类中。\r\n与其他语言一样，这里的 <code>main</code> 方法是程序入口，必须存在，且是静态方法，<code>args</code> 存储来自命令行的参数。<code>{}</code>用以划分代码块，<code>.</code>用以调用方法。</p>\n<h2 id=\"hash-二、数据类型\">二、数据类型</h2>\n<ol>\n<li>数值</li>\n</ol>\n<p>有两种描述数值的数据类：整型，没有小数部分的数值；浮点类型，表示有小数部分的数值。</p>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td>4字节</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2字节</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8字节</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>1字节</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4 字节</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8字节</td>\n</tr>\n</tbody>\n</table></div>\n<ol start=\"2\">\n<li>char</li>\n<li>boolean</li>\n</ol>\n<h2 id=\"hash-三、变量\">三、变量</h2>\n<p>每个变量都必须声明类型，语法 <code>类型 变量名</code>。 通过 <code>final</code> 关键字声明常量，常量名使用全大写形式。</p>\n<h2 id=\"hash-四、运算符\">四、运算符</h2>\n<p>Math 类包含了各种各样的数学函数。数值类型间可以互相转换，但是要注意，由于不同类型的数值占用的存储空间不同，大空间类型转换为小空间存储类型时会有精度损失。</p>\n<p>自增自减运算符 <code>++、--</code>；关系和bool运算符 <code>== 、 != 、 &#x3C; 、 > 、 >= 、 &#x3C;= 、 &#x26;&#x26; 、 ||</code>；运算符之间存在优先级，配合<code>()</code>可完成更加复杂的逻辑运算。</p>\n<p>枚举类型，适用于变量的取值需要限定在一个集合内的场景。</p>\n<h2 id=\"hash-五、字符串\">五、字符串</h2>\n<p>字符串就是字符序列，可对其进行一些复杂的操作，如裁剪/构建/检测/码点操作等。</p>\n<h2 id=\"hash-六、控制流程\">六、控制流程</h2>\n<ol>\n<li>块作用域 <code>{}</code></li>\n<li>条件语句 <code>if / if - else/ if - else if</code></li>\n<li>循环 <code>while / do - while </code></li>\n<li>选择 <code>switch - case</code></li>\n<li>中断 <code>break / continue</code></li>\n<li>数组 遍历 <code>for each</code>；排序；多维。</li>\n</ol>\n","words":992,"toc":[{"depth":2,"value":"一、程序结构","id":"hash-一、程序结构"},{"depth":2,"value":"二、数据类型","id":"hash-二、数据类型"},{"depth":2,"value":"三、变量","id":"hash-三、变量"},{"depth":2,"value":"四、运算符","id":"hash-四、运算符"},{"depth":2,"value":"五、字符串","id":"hash-五、字符串"},{"depth":2,"value":"六、控制流程","id":"hash-六、控制流程"}],"title":"基础知识整理汇总 - Java基础（一）","author":"高国良","type":"posts","series":false,"date":"2018-10-04T09:05:00.791Z","tags":["java"],"description":false,"draft":false,"cover":false},"prev":{"title":"Android 生态消息推送平台介绍","author":"高国良","type":"posts","series":false,"date":1537305840791,"tags":["Android"],"description":"信息整理收集","draft":false,"cover":false,"path":"/blogs/2018/android-ecological-message-push-platform","slug":"2018/android-ecological-message-push-platform"},"next":{"title":"类与对象 - Java基础（二）","author":"高国良","type":"posts","series":false,"date":1538938380791,"tags":["java","垃圾回收"],"description":"弄清楚类与对象的本质与基本特征，是进一步学习面向对象编程语言的基本要求。面向对象程序设计与面向过程程序设计在思维上存在着很大差别，改变一种思维方式并不是一件容易的事情。","draft":false,"cover":false,"path":"/blogs/2018/java-2-calss-and-object","slug":"2018/java-2-calss-and-object"}},"__N_SSG":true}