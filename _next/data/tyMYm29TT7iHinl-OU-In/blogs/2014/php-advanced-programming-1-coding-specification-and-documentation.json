{"pageProps":{"id":["posts","2014","php-advanced-programming-1-coding-specification-and-documentation"],"post":{"id":["posts","2014","php-advanced-programming-1-coding-specification-and-documentation"],"contentHtml":"<p>PHP 高级程序设计学习笔记 20140612</p>\n<p>软件开发中的一个重要环节就是文档编写。他可以帮助未来的程序维护人员和使用者理解你在开发时的思路。也便于日后重新查看代码时不至于无从下手。文档还有一个重要的作用，在不用了解要访问对象的细节情况下也能很好的在对象之间进行交互。文档的编写有一些成熟的行业标准格式，遵守这些行业标准将有助于创建易于阅读的代表，并使自动生成手册成为可能。</p>\n<h2 id=\"hash-编码规范\">编码规范</h2>\n<p>编码规范可能很多开发人员都有各自的观点也意见，且大家不尽相同。其实只要团队成员之间达成一致，遵循同一个标准就好。</p>\n<p>PHP社区百花齐放，拥有大量的函数库、框架和组件。PHP开发者通常会在自己的项目中使用若干个外部库，因而PHP代码遵循或尽量接近 同一个代码风格就非常重要，可以让开发者方便地把多个代码库集成在自己的项目中。框架互操作组(即PHP标准组)发布了一系列推荐风格。其中有部分是关于代码风格的，即PSR-0，PSR-1，PSR-2和PSR-4。通常情况下，你的PHP代码应该遵循其中一项或多项标准，从而其他开发者可以方便地阅读和使用你的代码。这些标准都是在前一个标准 上附加新的规则，所以使用PSR-1就同时要求遵循PSR-0，但可以不遵循PSR-2。</p>\n<ul>\n<li><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\">阅读PSR-0</a></li>\n<li><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md\">阅读PSR-1</a></li>\n<li><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\">阅读PSR-2</a></li>\n<li><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md\">阅读PSR-4</a></li>\n<li><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://pear.php.net/manual/en/standards.php\">Read about PEAR Coding Standards</a></li>\n<li><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://framework.zend.com/wiki/display/ZFDEV2/Coding+Standards\">Read about Zend Coding Standards</a></li>\n<li><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://symfony.com/doc/current/contributing/code/standards.html\">Read about Symfony Coding Standards</a></li>\n</ul>\n<h2 id=\"hash-注释的类型\">注释的类型</h2>\n<p>PHP 中常用的三种注释方法，注释是增加程序可读性、可维护性的一种方法，而不是唯一方法。可读性和可维护性主要还是在代码命名，项目组织处提高。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">//这是一个单行注释类型</span>\n\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\"> 这是一个多行注释类型</span>\n<span class=\"token comment\"> 第二行注释</span>\n<span class=\"token comment\">*/</span>\n\n<span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> *</span>\n<span class=\"token doc-comment comment\"> * 这种形式的注释被称为 文档注释</span>\n<span class=\"token doc-comment comment\"> */</span>\n</code></pre></div>\n<p>第一种注释可以说是给人看的，一般用来比较简短的注释。第二种，则用在需要大量注释的代码中。第三种注释被称为文档注释，可以被机器解释，且能以固定的格式放到手册中去。注释的种类主要包括：类的注释，属性注释、方法注释、变量注释以及关键算法、重要代码实现等。所有的这些部分编织在一起，使得人们在以后的时间里能够准确的知道你干了什么，为什么这么做。</p>\n<h2 id=\"hash-文法解析\">文法解析</h2>\n<p>从编程语言到可执行代码的转换过程叫做文法解析。当文法解析器遇到一个正常的注释时，它会识别它并忽略它，并且清理掉注释中的数据，因此一般的注释是无法迁入元数据的。</p>\n<h2 id=\"hash-元数据\">元数据</h2>\n<p>元数据的定义是 data about data 。是一种广泛存在的现象，在许多领域有具体的定义和应用。其被定义为：描述数据的数据，对数据及信息资源的描述性信息。PHP包含了大多数编程元素的元数据。然而，你可能需要嵌入更多的元数据，因为元数据在自动生成文档方面非常有用。这种功能可以通过文档注释的解析来模拟。如果创建遵循特定格式的文档注释，解析器可以将注释自动转换称为有意义的文档。</p>\n<h2 id=\"hash-PHPDoc\">PHPDoc</h2>\n<p>PHPDoc 是用于维护PHP文档的解决方案。其为文档注释定一辆一种结构，允许解析器以一致的方式解析它们。有了 PHPDoc 就可以从嵌入文档中创建手册了。 和所有文档注释一样，PHPDoc 要求必须以 <code>/**</code> 注释声明开始。PHPDoc 的特殊之处在于标签。 标签由<code>@</code>开始加上一个预定义的标示符表示。关于 PHPDoc 的更多信息请参考 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.phpdoc.org/docs/latest/index.html\">http://www.phpdoc.org/docs/latest/index.html</a></p>\n<h2 id=\"hash-规范的注释\">规范的注释</h2>\n<p>注释块必须以<code>/**</code>开始，以<code>*/</code>结束。</p>\n<p>开始注释和结束之间的每行都以星号<code>\\*</code>开始。</p>\n<p>标签必须以 at-sign <code>@</code> 开头在新行书写，接着写标有几个标签支持或需要用类型来表示包含在相关元素的值的类型。\n这方面的一个例子是 <code>@param</code> 标记，以确定一个方法或函数参数的类型。</p>\n<p><strong>Here is a full listing：</strong></p>\n<ul>\n<li><code>string：</code>A piece of text of an unspecified length.</li>\n<li><code>int or integer：</code>A whole number that may be either positive or negative.</li>\n<li><code>float：</code>A real, or decimal, number that may be either positive or negative.</li>\n<li><code>bool or boolean：</code>A variable that can only contain the state ‘true’ or ‘false’.</li>\n<li><code>array：</code>A collection of variables of unknown type. It is possible to specify the types of array members, see the chapter on arrays for more information.</li>\n<li><code>resource：</code>A file handler or other system resource as described in the PHP manual.</li>\n<li><code>null：</code>The value contained, or returned, is literally null. This type is not to be confused with void, which is the total absence of a variable or value (usually used with the @return tag).</li>\n<li><code>callable：</code>A function or method that can be passed by a variable, see the PHP manual for more information on callables.</li>\n</ul>\n<h2 id=\"hash-PHPDoc标签\">PHPDoc标签</h2>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@api</td>\n<td>@author</td>\n<td>@category</td>\n<td>@copyright</td>\n<td>@deprecated</td>\n<td>@example</td>\n</tr>\n<tr>\n<td>@filesource</td>\n<td>@global</td>\n<td>@ignore</td>\n<td>@internal</td>\n<td>@license</td>\n<td>@link</td>\n</tr>\n<tr>\n<td>@method</td>\n<td>@package</td>\n<td>@param</td>\n<td>@property</td>\n<td>@property-read</td>\n<td>@property-write</td>\n</tr>\n<tr>\n<td>@return</td>\n<td>@see</td>\n<td>@since</td>\n<td>@source</td>\n<td>@subpackage</td>\n<td>@throws</td>\n</tr>\n<tr>\n<td>@todo</td>\n<td>@uses</td>\n<td>@var</td>\n<td>@version</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n","words":3145,"toc":[{"depth":2,"value":"编码规范","id":"hash-编码规范"},{"depth":2,"value":"注释的类型","id":"hash-注释的类型"},{"depth":2,"value":"文法解析","id":"hash-文法解析"},{"depth":2,"value":"元数据","id":"hash-元数据"},{"depth":2,"value":"PHPDoc","id":"hash-PHPDoc"},{"depth":2,"value":"规范的注释","id":"hash-规范的注释"},{"depth":2,"value":"PHPDoc标签","id":"hash-PHPDoc标签"}],"title":"PHP 高级编程(1/5) - 编码规范及文档编写","author":"高国良","type":"posts","series":false,"date":"2014-06-13T01:03:00.791Z","tags":["php","PHPDoc"],"description":"软件开发中的一个重要环节就是文档编写。他可以帮助未来的程序维护人员和使用者理解你在开发时的思路。也便于日后重新查看代码时不至于无从下手。文档还有一个重要的作用，在不用了解要访问对象的细节情况下也能很好的在对象之间进行交互。文档的编写有一些成熟的行业标准格式，遵守这些行业标准将有助于创建易于阅读的代表，并使自动生成手册成为可能。","draft":false,"cover":false},"prev":{"title":"PHP 面向对象编程和设计模式 (5/5) - PHP 命名空间的使用及名称解析规则","author":"高国良","type":"posts","series":false,"date":1402568580791,"tags":["php","namespace"],"description":"PHP 在 5.3.0 以后的版本开始支持命名空间。什么是命名空间？从广义上来说，命名空间是一种封装事物的方法。在很多地方都可以见到这种抽象概念。在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题","draft":false,"cover":false,"path":"/blogs/2014/php-oop-and-design-pattern-5-namespace","slug":"2014/php-oop-and-design-pattern-5-namespace"},"next":{"title":"PHP 高级编程(2/5) - 反射 API","author":"高国良","type":"posts","series":false,"date":1402776180791,"tags":["php","reflection"],"description":"PHP 5 具有完整的反射 API，添加了对类、接口、函数、方法和扩展进行反向工程的能力。 此外，反射 API 提供了方法来取出函数、类和方法中的文档注释。通过使用反射 API 可以分析其他的类、接口、方法、属性、函数和扩展。","draft":false,"cover":false,"path":"/blogs/2014/php-advanced-programming-2-reflex-api","slug":"2014/php-advanced-programming-2-reflex-api"}},"__N_SSG":true}