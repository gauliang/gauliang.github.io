{"pageProps":{"id":["posts","2014","php-oop-and-design-pattern-4-exception"],"post":{"id":["posts","2014","php-oop-and-design-pattern-4-exception"],"contentHtml":"<p>PHP高级程序设计 学习笔记 2014.06.12</p>\n<p>异常经常被用来处理一些在程序正常执行中遇到的各种类型的错误。比如做数据库链接时，你就要处理数据库连接失败的情况。使用异常可以提高我们程序的容错特性，从而使我们的应用程序更加的稳定和健壮。</p>\n<h2 id=\"hash-使用异常\">使用异常</h2>\n<p>PHP5 增加了类似其他语言的异常处理模块。在PHP代码中所产生的异常可被 throw 语句抛出并被 catch 语句捕获。需要进行异常处理的代码都必须放入到 try 代码块内，以便捕获可能存在的异常。每个try至少对应一个 catch 块。使用多个 catch 可以捕获不同的类所产生的异常。当 try 代码块不再抛出异常或者找不到 catch 能匹配所抛出的异常时，PHP 代码就会在跳转到最后一个 catch 的后面继续执行。当然，PHP 允许在 catch 代码块内再次抛出（throw）异常。</p>\n<h2 id=\"hash-预定义异常-Exception\">预定义异常 Exception</h2>\n<p>Exception 类是所有异常的基类，我们可以通过派生 Exception 类来达到自定义异常的目的。下面的清单列出了 Exception 的基本信息。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\">Exception <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/* 属性 */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$message</span> <span class=\"token punctuation\">;</span>        <span class=\"token comment\">//异常消息内容</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token variable\">$code</span> <span class=\"token punctuation\">;</span>            <span class=\"token comment\">//异常代码</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$file</span> <span class=\"token punctuation\">;</span>        <span class=\"token comment\">//抛出异常的文件名</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token variable\">$line</span> <span class=\"token punctuation\">;</span>            <span class=\"token comment\">//抛出异常在该文件中的行号</span>\n\n    <span class=\"token comment\">/* 方法 */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__construct</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$message</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$code</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Exception</span> <span class=\"token variable\">$previous</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>    <span class=\"token comment\">//异常构造函数</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token function\">getMessage</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span>            <span class=\"token comment\">//获取异常消息内容</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> Exception <span class=\"token function\">getPrevious</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span>        <span class=\"token comment\">//返回异常链中的前一个异常</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token function\">getCode</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span>                <span class=\"token comment\">//获取异常代码</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token function\">getFile</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span>            <span class=\"token comment\">//获取发生异常的程序文件名称</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token function\">getLine</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span>                <span class=\"token comment\">//获取发生异常的代码在文件中的行号</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">array</span> <span class=\"token function\">getTrace</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span>            <span class=\"token comment\">//获取异常追踪信息</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token function\">getTraceAsString</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span>    <span class=\"token comment\">//获取字符串类型的异常追踪信息</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token function\">__toString</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span>                <span class=\"token comment\">//将异常对象转换为字符串</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token function\">__clone</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span>                <span class=\"token comment\">//异常克隆</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>了解完 Exception 后，我们来尝试扩展 exception 类来实现一个自定义异常。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">connectToDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$link</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_connect</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"myhost\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"myuser\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"mypassw\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"mybd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"could not connect to the database.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">connectToDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-></span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这里我们抛出类一个 Exception 类型的异常，并在catch里捕获了这个异常，最终打印出了“could not connect to the database.”。或许你想还想显示数据库连接失败的原因信息。下面及通过扩展exception类来实现我们的自定义信息。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$ErrorInfo</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//构造函里处理一些逻辑，然后将一些信息传递给基类</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token operator\">=</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">ErrorInfo</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'自定义错误类的错误信息'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token scope\"><span class=\"token keyword\">parent</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>    \n\n    <span class=\"token comment\">//提供获取自定义类信息的方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">GetErrorInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">ErrorInfo</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">     *</span>\n<span class=\"token doc-comment comment\">     *这里还可以添加异常日志,只需在上面的构造函数里调用就可以了</span>\n<span class=\"token doc-comment comment\">     *</span>\n<span class=\"token doc-comment comment\">     */</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">log</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fiel</span><span class=\"token punctuation\">,</span><span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">FILE_APPEND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">connectToDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"ErrorMessage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token function\">connectToDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyException</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-></span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-></span><span class=\"token function\">GetErrorInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>set_exception_handler</code> 设置一个用户定义的异常处理函数</p>\n<p>当一个未捕获的异常发生时所调用的函数名称作为<code>set_exception_handler()</code>的参数。\n该函数必须在调用<code>set_exception_handler()</code>之前被定义。该函数接受一个参数，该参数是一个抛出的异常对象。\n这可以用来改进上边提到的异常记录日志处理。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">ExceptionLogger</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$exception</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'ExceptionLog.log'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fiel</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$exception</span><span class=\"token operator\">-></span><span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">FILE_APPEND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">set_exception_handler</span><span class=\"token punctuation\">(</span>ExceptionLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>PHP 允许在 catch 代码块内再次抛出（throw）异常。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">#code...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$e</span><span class=\"token operator\">-></span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">999</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">#进行一些操作</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"hash-总结\">总结</h2>\n<p>异常的功能非常强大，但是不以为着我们可以在项目中肆意的滥用异常机制，特别是大量使用异常日志的机制，这回大大增加系统系统开销降低应用程序的性能。\n利用错误代码我们可以方便的对错误信息进行管理，当一个错误信息被多次平抛出时，使用错误代码是科学的选择。\n我们甚至可以通过错误代码来让错误消息也支持多语言显示。</p>\n","words":2633,"toc":[{"depth":2,"value":"使用异常","id":"hash-使用异常"},{"depth":2,"value":"预定义异常 Exception","id":"hash-预定义异常-Exception"},{"depth":2,"value":"总结","id":"hash-总结"}],"title":"PHP 面向对象编程和设计模式 (4/5) - 异常的定义、扩展及捕获","author":"高国良","type":"posts","series":false,"date":"2014-06-12T01:20:00.791Z","tags":["php","Exception"],"description":"PHP5 增加了类似其他语言的异常处理模块。在PHP代码中所产生的异常可被 throw 语句抛出并被 catch 语句捕获。需要进行异常处理的代码都必须放入到 try 代码块内，以便捕获可能存在的异常。每个try至少对应一个 catch 块。使用多个 catch 可以捕获不同的类所产生的异常。","draft":false,"cover":false},"prev":{"title":"PHP 面向对象编程和设计模式 (3/5) - 单例模式和工厂模式","author":"高国良","type":"posts","series":false,"date":1402483200791,"tags":["php"],"description":"设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工...","draft":false,"cover":false,"path":"/blogs/2014/php-oop-and-design-pattern-3-singleton-and-factory","slug":"2014/php-oop-and-design-pattern-3-singleton-and-factory"},"next":{"title":"PHP 面向对象编程和设计模式 (5/5) - PHP 命名空间的使用及名称解析规则","author":"高国良","type":"posts","series":false,"date":1402568580791,"tags":["php","namespace"],"description":"PHP 在 5.3.0 以后的版本开始支持命名空间。什么是命名空间？从广义上来说，命名空间是一种封装事物的方法。在很多地方都可以见到这种抽象概念。在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题","draft":false,"cover":false,"path":"/blogs/2014/php-oop-and-design-pattern-5-namespace","slug":"2014/php-oop-and-design-pattern-5-namespace"}},"__N_SSG":true}