{"pageProps":{"id":["posts","2014","php-oop-and-design-pattern-2-static-variables-properties-methods-and-delayed-binding"],"post":{"id":["posts","2014","php-oop-and-design-pattern-2-static-variables-properties-methods-and-delayed-binding"],"contentHtml":"<p>PHP高级程序设计 学习笔记 2014.06.10</p>\n<p>Static（静态）关键字用来定义静态方法和属性，static 也可用于定义静态变量以及后期静态绑定。</p>\n<h2 id=\"hash-静态变量-static-variable\">静态变量 static variable</h2>\n<p>静态变量仅在局部函数域中存在，但当程序执行离开此作用域时，其值并不丢失。也就是说，在下一次执行这个函数时，变量仍然会记得原来的值。要将某个变量定义为静态的，只需要在变量前加上static关键字即可。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">testing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$a</span> <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">testing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">testing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">testing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">testing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> *    2</span>\n<span class=\"token doc-comment comment\"> *    4</span>\n<span class=\"token doc-comment comment\"> *    8</span>\n<span class=\"token doc-comment comment\"> *    16</span>\n<span class=\"token doc-comment comment\"> *    [Finished in 0.1s]</span>\n<span class=\"token doc-comment comment\">*/</span>\n</code></pre></div>\n<p>静态变量也提供了一种处理递归函数的方法。递归函数是一种调用自己的函数。写递归函数时要小心，因为可能会无穷递归下去。必须确保有充分的方法来中止递归。</p>\n<p>本例中 <code>testing()</code> 函数在每次执行之后，都会在内部保存 $a 变量的值。在下一次 <code>testing()</code>函数被调用时，$a 的值就会恢复，然后 <code>testing()</code> 函数会将这个值乘以2，并打印。变量的初始默认值为1，这一赋值操作只会在变量第一次被初始化时发生。函数每次执行的过程中，这一操作不会被调用。</p>\n<h2 id=\"hash-类中静态元素的使用\">类中静态元素的使用</h2>\n<p>在类中 static 关键字有两种主要的用法，一种是用来定义静态成员，另一种是用来定义静态方法。声明类属性或方法为静态，就可以不实例化类而直接访问。静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。静态属性不可以由对象通过 -> 操作符来访问。在类的内部我们可以使用作用域限定操作符来访问不同层次作用域的变量。</p>\n<h3 id=\"hash-静态属性\">静态属性</h3>\n<p>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。可以把静态变量看成是属于整个类而不是属于类的某个实例。与一般的实例变量不同的是，静态属性只保留一个变量值，而这个变量值对所有的实例都有效，也就是说所有实例共享这一个属性。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">MyObject</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token scope\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">::</span></span><span class=\"token variable\">$a</span> <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token scope\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">::</span></span><span class=\"token variable\">$a</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$instance1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$instance1</span> <span class=\"token operator\">-></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$instance2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$instance2</span> <span class=\"token operator\">-></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> *</span>\n<span class=\"token doc-comment comment\"> * 2</span>\n<span class=\"token doc-comment comment\"> * 4</span>\n<span class=\"token doc-comment comment\"> * [Finished in 0.1s]</span>\n<span class=\"token doc-comment comment\"> *</span>\n<span class=\"token doc-comment comment\"> */</span>\n</code></pre></div>\n<p><strong>$this</strong> 指标是类的当前实例，是一个到主叫对象的引用。</p>\n<p><strong>self::</strong> 表示的是类本身，使用 self:: 作用域限定符时必须在操作符后面加上 $ 符号，在类之外的代码中不能使用这个操作符，而且它不能识别自己在继承树层次结构中的位置。在扩展类中使用 self:: 作用域时， self 可以调用基类中声明的方法，但它调用的总是已经在扩展类中重写的方法。</p>\n<p><strong>parent::</strong> 在扩展类中，在基类的方法被重写的情况下，如果你要访问基类的方法，可以使用 parent::</p>\n<p><strong>static::</strong> 使我们不再需要使用 self:: 和 parent:: 。当希望指向最终的实现功能的类时，就可以使用static，这个限定符会在代码执行之前立即计算出继承层次结构上最后那个类的成员。</p>\n<h3 id=\"hash-静态方法\">静态方法</h3>\n<p>静态方法的规则和静态变量是相同的。使用static关键字可以将方法标记为静态方法，而通过类的名称 和 作用域限定操作符 (::)可以访问静态方法。</p>\n<p>静态方法和非静态方法之间有一个很重要的区别：在调用静态方法时，我们不在需要拥有类的实例。</p>\n<div class=\"remark-highlight\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">MyObjectBase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token scope\"><span class=\"token keyword\">static</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">MyOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">MyOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'called from MyObject.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">MyExtendObject</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MyObjectBase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">MyOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'called from MyExtendObject.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token scope\">MyExtendObject<span class=\"token punctuation\">::</span></span><span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上例代码会正确的调用MyExtendObject中的 MyOtherMethod 方法，输出called from MyExtendObject. [Finished in 0.1s]。</p>\n<p>如果某个方法中不包含$this 变量，那么这个方法就应该是静态方法。如果不需要类的实例，那么还应该使用静态类，这样可以免去实例化的工作。另外，在静态方法中是不能使用 $this 变量的，因为静态方法不属于某个特定的实例。</p>\n<h3 id=\"hash-延迟绑定\">延迟绑定</h3>\n<p>static:: 使我们不再需要使用 self:: 和 parent:: 。当希望指向最终的实现功能的类时，就可以使用static，这个限定符会在代码执行之前立即计算出继承层次结构上最后那个类的成员。这一过程被称作延迟绑定。</p>\n<h2 id=\"hash-总结\">总结</h2>\n<p>使用static关键字可以创建静态变量，同时还可以提供一个默认的初始化值。静态变量是经过修饰的函数变量，在某个函数执行完成之后，他的值仍保持不丢失。</p>\n<p>static关键字还可以用在类中来修饰属性和方法。用在属性上时，它使属性不再为某个实例保存一个值，而是为整个类自身保存一个值，静态属性可以在成员间共享。</p>\n<p>要访问静态方法可以用(::)，它被称作作用域限定符。这个操作符的左边可以是一个类名或者某个预定义作用域，预定义作用域包括 self parent static。操作符的右边是一个静态方法、属性。</p>\n","words":2328,"toc":[{"depth":2,"value":"静态变量 static variable","id":"hash-静态变量-static-variable"},{"depth":2,"value":"类中静态元素的使用","id":"hash-类中静态元素的使用"},{"depth":2,"value":"总结","id":"hash-总结"}],"title":"PHP 面向对象编程和设计模式 (2/5) - 静态变量、属性和方法及延迟绑定","author":"高国良","type":"posts","series":false,"date":"2014-06-10T00:28:00.791Z","tags":["php"],"description":"当希望指向最终的实现功能的类时，就可以使用 static，这个限定符会在代码执行之前立即计算出继承层次结构上最后那个类的成员。这一过程被称作延迟绑定。","draft":false,"cover":false},"prev":{"title":"PHP 面向对象编程和设计模式 (1/5) - 抽象类、对象接口、instanceof 和契约式编程","author":"高国良","type":"posts","series":false,"date":1402277460791,"tags":["php"],"description":"本文将介绍抽象类、接口和一种称为契约式编程的技术。使用这些 OPP 机制，所编写的代码就不限于只能计算或者输出内容了。这些机制能够在概念层次上定义类之间交互作用的规则，也为应用程序的扩展和定制提供了基础。","draft":false,"cover":false,"path":"/blogs/2014/php-oop-and-design-pattern-1-abstract-interfaces-instanceof-and-contractual-programming","slug":"2014/php-oop-and-design-pattern-1-abstract-interfaces-instanceof-and-contractual-programming"},"next":{"title":"PHP 面向对象编程和设计模式 (3/5) - 单例模式和工厂模式","author":"高国良","type":"posts","series":false,"date":1402483200791,"tags":["php"],"description":"设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工...","draft":false,"cover":false,"path":"/blogs/2014/php-oop-and-design-pattern-3-singleton-and-factory","slug":"2014/php-oop-and-design-pattern-3-singleton-and-factory"}},"__N_SSG":true}