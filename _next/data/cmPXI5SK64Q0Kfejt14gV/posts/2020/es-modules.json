{"pageProps":{"post":{"id":["2020","es-modules"],"contentHtml":"<p>ES6 中首次内置了对模块的支持。从理论上讲，ECMAScript 模块应该在所有 JavaScript 环境中通用。实际上，浏览器仍然是ES模块的主要目标。\n默认情况下，模块具有<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">严格模式</a>。</p>\n<h2 id=\"hash-一、export-语法\">一、export 语法</h2>\n<ol>\n<li>可以在实体前使用 <code>export</code> 关键字实现导出，也可以通过 <code>export</code> 语句导出；</li>\n<li>每个模块中可以有 0 各或者多个具名导出;</li>\n<li>每个模块最多可以具有 1 个默认导出，常用于只有一个函数或类的模块；</li>\n<li>在 <code>export</code> 子句中，可以通过 <code>as</code> 语法重命名导出；</li>\n<li>一个模块可以同时包含<strong>具名导出</strong>和<strong>默认导出</strong>，但是通常最好每个模块都采用一种导出样式；</li>\n<li>未导出的部分，是模块专有的，不能被外部访问。</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 具名导出</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span>f <span class=\"token keyword module\">as</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 默认导出</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token number\">618</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 从另一个模块导出</span>\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token operator\">*</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./module.mjs'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">,</span> b <span class=\"token keyword module\">as</span> bar<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./another-module.mjs'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<blockquote>\n<p><code>default</code> 不能是变量名，但可以是导出名，也可以是属性名</p>\n</blockquote>\n<h2 id=\"hash-二、import-语法\">二、import 语法</h2>\n<p>模块说明符是标识模块的字符串，主要分为以下几类：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 相对路径：以点开头</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">x</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./lib/module.mjs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">x</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../lib/module.mjs'</span>\n\n<span class=\"token comment\">// 绝对路径：以斜线开头</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">x</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'/home/user/module.mjs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">x</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'https://example.com/module.mjs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">x</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'file:///home/user/module.mjs'</span>\n\n<span class=\"token comment\">// 裸路径：不以点，斜线或协议开头，并且由一个没有扩展名的文件名组成</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">x</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token comment\">// 深度导入路径：从一条裸露的路径开始，并且至少有一个斜线</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">x</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'lodash/dist/module.mjs'</span>\n</code></pre></div>\n<ol>\n<li>通过解构语法可以仅导入需要的部分；</li>\n<li>模块是单例的，即使一个模块被多次导入，也仅存在一个实例。</li>\n<li>通过 <code>as</code> 语法能够重命名导入的内容；</li>\n<li>通过 <code>* as</code> 语法可以将整个命名空间导入并重命名；</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 按名称导入</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">,</span> bar <span class=\"token keyword module\">as</span> newBar<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./module.mjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 导入整个模块命名空间</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> api</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./modules.mjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 导入 Default</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">someModule</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./modules.mjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 上面的导入方式还可以组合使用</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">mod<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">,</span> bar <span class=\"token keyword module\">as</span> b<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./modules.mjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 仅执行代码，不导入任何信息</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'./modules.mjs'</span>\n</code></pre></div>\n<h2 id=\"hash-三、只读视图\">三、只读视图</h2>\n<p>导入是导出的只读视图</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">inCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">,</span> incCounter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./counter.mjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 3</span>\n<span class=\"token function\">incCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 4</span>\n\ncounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// error</span>\n</code></pre></div>\n<h2 id=\"hash-四、动态加载\">四、动态加载</h2>\n<p>我们可以通过 import 语句导入模块，但是存在局限性：</p>\n<ol>\n<li>你必须在模块的顶层使用它，无法在块内导入内容。</li>\n<li>模块标识符三固定的，无法根据条件计算模块标识符。</li>\n</ol>\n<p>如果需要动态导入，可以通过 <code>import()</code> 运算符。它接收 <strong>模块标识符</strong> 作为参数，返回 <strong>Promises</strong> 对象。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/modules.mjs</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 在这里通过传递近来的 m 获取导出的内容</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* error */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3 id=\"hash-import-meta\">import.meta</h3>\n<p>另一个与模块相关的新功能是import.meta，它提供有关当前模块的元数据。您获得的确切元数据不在 ECMAScript 规范中，取决于主机环境。\n例如，在浏览器中，您可能会获得与 Node.js 不同的元数据。</p>\n<h2 id=\"hash-五、在浏览器中使用\">五、在浏览器中使用</h2>\n<p>现代浏览器支持 ES 模块，但有一些警告。要加载模块，需添将 <code>script</code> 标签的 <code>type</code> 属性设置为 <code>module</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&#x3C;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>title</span><span class=\"token punctuation\">></span></span>ESM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>el<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>The result is: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> appendResult <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./append.js\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"el\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">appendResult</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>在与 HTML 文件文件统一目录中添加以下文件：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">appendResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerText</span> <span class=\"token operator\">+=</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n","toc":[{"depth":2,"value":"一、export 语法","id":"hash-一、export-语法"},{"depth":2,"value":"二、import 语法","id":"hash-二、import-语法"},{"depth":2,"value":"三、只读视图","id":"hash-三、只读视图"},{"depth":2,"value":"四、动态加载","id":"hash-四、动态加载"},{"depth":2,"value":"五、在浏览器中使用","id":"hash-五、在浏览器中使用"}],"title":"ECMAScript Modules","date":"2020-09-07T09:14:01.000Z","draft":false,"description":"ES6 中首次内置了对模块的支持。从理论上讲，ECMAScript模块应该在所有JavaScript环境中通用。实际上，浏览器仍然是ES模块的主要目标。","type":"posts","tags":["esm","javascript"],"series":[],"author":"Gl","cover":false},"prev":{"title":"CommonJS Modules","date":1599358780000,"draft":false,"description":"在 ES2015 标准之前，JavaScript语言没有模块化组织代码的原生方法，CommonJS 模块格式填补了这一空白。 CommonJS 规范了如何编写模块，以及如何在模块系统之间实现互操作。由于其同步执行特性，CMD 主要用于服务端开发，也可通过打包工具处理后用在浏览器端。","type":"posts","tags":["javascript","node.js","commonjs"],"series":[],"author":"Gl","cover":"001.jpg","slug":"2020/commonJS-modules"},"next":{"title":"Git Rebase","date":1599961161000,"draft":false,"description":"在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。rebase 命令能够将提交到某一分支上的所有修改都应用到另一分支上。","type":"posts","tags":["devops","git","rebase"],"series":[],"author":"Gl","cover":"cover.jpg","slug":"2020/git-rebase"}},"__N_SSG":true}