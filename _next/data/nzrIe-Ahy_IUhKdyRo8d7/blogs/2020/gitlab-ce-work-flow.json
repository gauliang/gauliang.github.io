{"pageProps":{"params":{"id":["2020","gitlab-ce-work-flow"]},"post":{"id":["posts","2020","gitlab-ce-work-flow"],"contentHtml":"<div class=\"image-widget\"><img src=\"/posts/2020/gitlab-ce-work-flow.files/Gitlab-1.png\" alt=\"\"></div>\n<h2 id=\"hash-一、认领-issue\">一、认领 issue</h2>\n<ol>\n<li>在项目仓库首页依次打开左侧菜单 Issues / Boards，进入看板页面；</li>\n<li>左侧 Open 列表中单击待认领的 Issue，在弹出的 Issue 信息面板中， 将其 Assigness 到自己名下。部分 Issue 会在创建时直接 Assigness 到相关人员，此时则无需再次 Assigness 操作；</li>\n<li>把当前 Issue 从左侧 Open 列表移动到 To Do 列表；</li>\n</ol>\n<blockquote>\n<p>注：完成上述操作，页面右上角 To-Do 列表任务数将会加一。</p>\n</blockquote>\n<h2 id=\"hash-二、开发\">二、开发</h2>\n<ol>\n<li>创建分支，打开 Issue 页面，点击 <strong>Create merge request</strong> 按钮右侧下拉箭头，选择  Create branch，输入分支名称，创建分支。</li>\n<li>拉取新创建的分支到本地，开始开发工作。</li>\n<li>完成开发后，Push 当前分支代码到 Git 服务端。</li>\n</ol>\n<h2 id=\"hash-三、创建-MR\">三、创建 MR</h2>\n<ol>\n<li>仓库首页打开 Merge Requests 页面，点击 <strong>New merge request</strong> 按钮。</li>\n<li>选择源分支以及要合并的目标分支，点击 <strong>Compare branches and continue</strong>。</li>\n<li>MR 描述，在'Closes #{branch-id}'之后空出一行，输入当前 MR 相关的描述信息。\n<code>Close #{branch-id}</code> 会确保分支合并后自动关闭相关 Issue，<code>/done</code>确保分支合并后更新 Issue 的 Doing 标签为 Done。\n更多 Quick Actions 请参考 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://gitlab.com/help/user/project/quick_actions.md\">GitLab Quick Actions</a></li>\n<li>Assignee 参与代码审查的人员。如果需要更多人参与评审，可在MR创建完成后，在其评论区 <strong>AT 具体人名</strong>参与评审。</li>\n<li>在 Merge options 处，选中 <code>Delete source branch when merge request is accepted</code>。如果要在合并到 master 时\n压缩 commit 记录，可以选中  <code>Squash commits when merge request is accepted</code>。</li>\n<li>Submit merge request 提交</li>\n</ol>\n<h2 id=\"hash-四、代码审查\">四、代码审查</h2>\n<ol>\n<li>仓库首页打开 Merge Requests ，列出全部 MR 清单，或通过页面右上角的 <code>Merge requests</code> 按钮打开一个仅包含需要你进行代码审查的MR清单。</li>\n<li>选择并打开需要 Review 的 MR 。在 Discussion 界面可以进行沟通，Commits 界面查看当前 MR 源分支上的所有提交，Changes 界面查看\n当前 MR 源分支与目标分支的变更对比。</li>\n<li>在Changes界面可以通过代码行号左侧的讨论图标对代码提出修改意见，这些修改意见的总数量会在 Changes 页面的 Tab 菜单右侧展示。浏览所有变更\n文件，并提出修改意见。</li>\n<li>针对 Review 中提出的问题，开发人员需在MR源分支上进行处理，处理后提交分支代码到服务器，在评论区**@ 相关审查人员**继续进行代码评审。</li>\n<li>审查人员再次对分支代码进行评审，将已经处理好的修改意见标记为 resolved，参考步骤[3]，对于新出现的问题继续提出修改意见。</li>\n<li>循环执行上述步骤 [4-5]，直至分支代码完全符合合并要求。</li>\n<li>当 Review 中提出的所有修改意见，全部被标记为 resolved 之后，在 Discussion 界面<strong>回复 <code>/LGTM</code> 并 AT Master 分支管理员</strong>。</li>\n<li>只要满足上述条件，CI 机器人或 Master 管理员会合并MR源分支到目标分支（Master），合并后，相关MR源分支自动删除，issue自动关闭。</li>\n</ol>\n<h2 id=\"hash-五、完成\">五、完成</h2>\n<ol>\n<li>更新 issue 上的 Doing 标签为 Done。</li>\n</ol>\n","words":1604,"toc":[{"depth":2,"value":"一、认领 issue","id":"hash-一、认领-issue"},{"depth":2,"value":"二、开发","id":"hash-二、开发"},{"depth":2,"value":"三、创建 MR","id":"hash-三、创建-MR"},{"depth":2,"value":"四、代码审查","id":"hash-四、代码审查"},{"depth":2,"value":"五、完成","id":"hash-五、完成"}],"title":"Gitlab CE Work Flow","date":"2020-08-29T00:09:15.000Z","draft":false,"description":"Gitlab-CE 工作流最佳实践","type":"posts","tags":["devops","gitlab"],"series":false,"author":"Gauliang","cover":"Gitlab-1.png"},"prev":{"title":"安装和配置 kubectl & istioctl","date":1596942811000,"draft":false,"description":"本文整理记录 ubuntu 操作系统上常见问题处理说明。","type":"posts","tags":["cloudnative","linux","kubernetes","service-mesh"],"series":false,"author":"Gl","cover":"cover.jpg","path":"/blogs/2020/kubectl-and-istio","slug":"2020/kubectl-and-istio"},"next":{"title":"Javascript 箭头函数最佳实践[译]","date":1599274300000,"draft":false,"description":"箭头函数的语法简洁明了，非常适合作为回调使用。本文介绍 5 中关于箭头函数的最佳实践。","type":"posts","tags":["javascript","node.js","arrow-function","best-practices"],"series":false,"author":"Gl","cover":"javascript-arrow-function-best-practices.jpg","path":"/blogs/2020/javascript-arrow-function-best-practices","slug":"2020/javascript-arrow-function-best-practices"}},"__N_SSG":true}