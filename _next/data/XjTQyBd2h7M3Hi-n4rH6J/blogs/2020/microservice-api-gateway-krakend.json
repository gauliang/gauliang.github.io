{"pageProps":{"params":{"id":["2020","microservice-api-gateway-krakend"]},"post":{"id":["posts","2020","microservice-api-gateway-krakend"],"contentHtml":"<p>KrakenD 是用 Go 编写的开源高性能无状态、分布式、微服务 API 网关，其不仅可以轻松将客户端请求转发到后端服务，还具备强大的数据处理功能，支持转换、过滤、聚合和修剪来自后端服务甚至第三方服务的返回数据，从而消除处理多个 REST 服务的必要性，使客户端与微服务的实现细节隔离开来。这一切通过简单的配置即可实现，本文介绍 KrakendD 如何安装部署并快速投入应用。</p>\n<div class=\"image-widget\"><img src=\"/attachments/posts/2020/microservice-api-gateway-krakend.files/../microservice-api-gateway-kraken.files/KrakendFlow.png\" alt=\"KrakendFlow\"><div class=\"figcaption\">KrakendFlow</div></div>\n<h2 id=\"hash-KrakenD-概述\">KrakenD 概述</h2>\n<p>KrakenD 在具备超高性能的基础上还提供丰富的功能，简要梳理：</p>\n<ol>\n<li>API 数据聚合，将来自多个 API 的数据聚合到一起。</li>\n<li>API 数据过滤，仅公开真正需要的数据。</li>\n<li>强大的配置模板，且支持多种配置格式，但建议使用 JSON 配置，可以实现更加灵活的网关配置。</li>\n<li>无状态、无数据库，在 KrakenD 群集中，所有节点都是自治的，即使关闭了所有其他节点，其仍可继续运行。</li>\n<li>支持在几乎所有环境中运行，无论是虚拟机或容器云环境。</li>\n<li>支持插件扩展，您可以使用 Go 或 Lua 脚本扩展 KrakenD 功能和业务逻辑。</li>\n<li>接口安全，支持速率限制、OAuth、SSL、XSS防护等多种安全策略，且均为开箱即用。</li>\n<li>机器人探测器</li>\n</ol>\n<p>更多功能特性请参考官网文档 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://www.krakend.io/\">krakenD</a></p>\n<h2 id=\"hash-基于-Kubernetes-部署高可用-KrakenD-集群\">基于 Kubernetes 部署高可用 KrakenD 集群</h2>\n<p>KrakenD 是一个独立的二进制文件，可直接运行，不需要任何外部库工作。本节介绍在 Kubernetes 环境安装 KrakenD 的大致步骤。</p>\n<h2 id=\"hash-配置文件\">配置文件</h2>\n<p>KrakenD 服务器启动和操作所需的所有配置都在配置文件中定义，可以通过可视化工具 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://designer.krakend.io/\">KrakenDesigner</a> 生成，可用的常用配置文件格式有 <code>.json</code>，<code>.toml</code> 和 <code>.yaml</code>。配置文件写好后，可以通过 <code>krakend check</code> 进行语法检查。</p>\n<p><strong>1、语法检查</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ krakend check --config ./krakend.toml --debug \n  Syntax OK<span class=\"token operator\">!</span> \n</code></pre></div>\n<p><strong>2、配置文件结构</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"endpoints\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">]</span>\n    <span class=\"token string-property property\">\"extra_config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>你可以在配置文件中放入很多选项，这里我们只关注文件结构。</p>\n<ul>\n<li><code>version</code>： KrakenD 文件格式，当前版本是 2。</li>\n<li><code>endpoints[]</code>： 网关及其关联的后端服务定义。</li>\n<li><code>extra_config{}</code>： 与中间件或插件相关的额外配置。例如，您可能要启用日志记录，这是 API 网关可选的非核心功能。</li>\n</ul>\n<p><strong>3、<code>endpoints</code> 结构</strong></p>\n<p><code>endpoints</code> 是一个有所有可访问端点组成的数组，每个端点包含对外提供服务的端点 url 及与其相对应的后端服务列表。每个端点至少对应 1 个后端服务。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string-property property\">\"endpoints\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"endpoint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/v1/foo-bar\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"backend\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string-property property\">\"url_pattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/foo\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string-property property\">\"host\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://my.api.com\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string-property property\">\"url_pattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/bar\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string-property property\">\"host\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://my.api.com\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>上述配置，声明端点 <code>/v1/foo-bar</code> 对应两个后端服务，当客户端请求 <code>/v1/foo-bar</code> 端点，网关将返回合并后的 <code>/foo</code> 和 <code>/bar</code> 服务的结果。</p>\n<p><strong>4、<code>extra_config</code> 结构</strong></p>\n<p>当注册组件后，将从 <code>extra_config</code> 获取相关配置。<code>extra_config</code> 可以出现在不同的层次，根级别的 <code>extra_config</code> 通常用于服务级别配置，将在全局范围内生效。另一方面，有的组件会在 <code>endpoint</code> 和 <code>backend</code> 内寻找 <code>extra_config</code> 配置，因为其功能仅特定于后端或端点行为。例如，您可能只想将速率限制设置为特定的端点或后端。</p>\n<p>对于外部组件还需定义一个命名空间，用于组件检索配置。例如，<code>gologging</code> 中间件通过 <code>github_com/devopsfaith/krakend-gologging</code> 键读取配置信息。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"extra_config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"github_com/devopsfaith/krakend-gologging\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string-property property\">\"level\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"WARNING\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"prefix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[KRAKEND]\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"syslog\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string-property property\">\"stdout\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>使用组件仓库路径作为配置键是很好的时间，当 <code>extra_config</code> 位于根级别时，注意不要在键名称中包含 <code>.</code> 以避免解析器出现问题，注意上面配置示例中的 <code>github_com</code>。但当 <code>extra_config</code> 出现在 <code>endpoint</code> 或 <code>backend</code> 级别时，这些点可以正常使用。</p>\n<p>下面示例定义了两个同时进行的速率限制策略：将端点限制为 5000 reqs/s，接着又配置其后端的 slow 服务，将其限制在 100 reqs/s 内。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"endpoints\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"endpoint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/limited-to-5000-per-second\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"extra_config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">\"github.com/devopsfaith/krakend-ratelimit/juju/router\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string-property property\">\"maxRate\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"backend\"</span><span class=\"token operator\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">\"host\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"http://slow.backend.com/\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"url_pattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/slow/endpoint\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"extra_config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string-property property\">\"github.com/devopsfaith/krakend-ratelimit/juju/proxy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token string-property property\">\"maxRate\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string-property property\">\"capacity\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">\"host\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"http://fast.backend.com/\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"url_pattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/fast/endpoint\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token spread operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><strong>5、多个配置文件</strong></p>\n<p>目前为止，上面示例中所有配置都在一个名为 <code>krakend.json</code> 的文件中， 对于生产环境数百个端点配置需求，KrakenD 通过 <code>Flexible Configuration</code> 组件允许我们将配置文件分割成不同的片段，以便于更加科学合理的组织接口配置。</p>\n<p>启用 <code>Flexible Configuration</code> 后，KrakenD 假定您的配置文件是一个模板，需要在启动时进行编译。这样，您就有机会生成一个更复杂的配置文件，模板文件利用变量并从外部文件中获取内容。如果要启用 <code>Flexible Configuration</code> 则必须使用 <code>.json</code> 配置文件。</p>\n<p>更多信息请参考 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://www.krakend.io/docs/configuration/flexible-config/\">Flexible Configuration</a>。</p>\n<h2 id=\"hash-高可用集群\">高可用集群</h2>\n<p>硬件随时可能发生故障，网关至关重要，通过运行该服务的计算机集群以确保高可用性。KrakenD 群集由同时运行并协同工作的多个 KrakenD 实例组成，以提供更高的可靠性，更高的吞吐量，可伸缩性和故障转移。</p>\n<p>KrakenD 节点是无状态的，它们不将数据或应用程序状态存储到持久性存储中，而是，通过配置文件配置数据和应用程序状态。节点随时都可被杀掉和更换。</p>\n<p>运行 KrakenD 集群是一个简单的过程，仅需要两个条件：</p>\n<ul>\n<li>在网关前部署负载均衡器。</li>\n<li>运行两个或多个 KrakenD 服务。</li>\n</ul>\n<blockquote>\n<p>如果在 k8s 中，使用普通的 service 关联多个 pod 即可。</p>\n</blockquote>\n<h2 id=\"hash-最佳实践\">最佳实践</h2>\n<p>设置 KrakenD 集群是一个简单的过程，但是这里有一些建议供生产环境参考。</p>\n<ul>\n<li>在负载均衡和 KrakenD API 网关之间启用 HTTP2，以获得最佳性能。</li>\n<li>在负载均衡中添加 SSL 证书，并在负载均衡和 KrakenD 之间使用内部证书。</li>\n<li>启用指标和日志记录，确保您对正在发生的事情具有可见性。至少启用一个 WARNING 级别的日志记录。</li>\n<li>配置有意义的命名信息。</li>\n<li>启动命令将输出重定向到/dev/null。</li>\n</ul>\n","words":3451,"toc":[{"depth":2,"value":"KrakenD 概述","id":"hash-KrakenD-概述"},{"depth":2,"value":"基于 Kubernetes 部署高可用 KrakenD 集群","id":"hash-基于-Kubernetes-部署高可用-KrakenD-集群"},{"depth":2,"value":"配置文件","id":"hash-配置文件"},{"depth":2,"value":"高可用集群","id":"hash-高可用集群"},{"depth":2,"value":"最佳实践","id":"hash-最佳实践"}],"title":"微服务 API 网关 KrakenD","date":"2020-01-11T07:28:13.000Z","draft":false,"description":"KrakenD 是一个高性能无状态、分布式、微服务 API 网关，其不仅可以轻松将客户端请求转发到后端服务，还具备强大的数据处理功能，支持转换、聚合和修剪来自后端服务甚至第三方服务的返回数据，从而消除处理多个 REST 服务的必要性，使客户端与微服务的实现细节隔离开来。这一切通过简单的配置即可实现，本文介绍 KrakendD 如何安装部署并快速投入应用。","type":"posts","tags":["service-mesh","krakend","api-getway"],"series":false,"author":"Gl","cover":false},"prev":{"title":"ubuntu 开发环境备忘指南","date":1576941631000,"draft":false,"description":"本文整理记录 ubuntu 操作系统上常见问题处理说明。","type":"posts","tags":["ubuntu","linux","handbook"],"series":false,"author":"Gauliang","cover":"cover.jpg","path":"/blogs/2020/ubuntu-handbook","slug":"2020/ubuntu-handbook"},"next":{"title":"使用 kubeadm 安装单控制平面 Kubernetes 集群","date":1579437054000,"draft":false,"description":"本文主要介绍如何使用 kubeadm 安装部署单控制平面 Kubernetes v1.17.0 集群，所谓单控制平面，顾名思义就是由一个 Control-plane Node 和多个 Work Node 组成的 Kubernetes 集群。","type":"posts","tags":["kubernetes","docker","dashboard","ingress-nginx"],"series":false,"author":"Gl","cover":"cover.png","path":"/blogs/2020/creating-single-control-plane-cluster-with-kubeadm","slug":"2020/creating-single-control-plane-cluster-with-kubeadm"}},"__N_SSG":true}