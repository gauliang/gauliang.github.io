{"pageProps":{"id":["posts","2020","commonJS-modules"],"post":{"id":["posts","2020","commonJS-modules"],"contentHtml":"<div class=\"image-widget\"><img src=\"/attachments/posts/2020/commonJS-modules.files/001.jpg\" alt=\"CommonJS Modules\"><div class=\"figcaption\">CommonJS Modules</div></div>\n<p>在 ES2015（也被称为ES6） 标准之前，JavaScript语言没有模块化组织代码的原生方法，CommonJS 模块格式填补了这一空白。\nCommonJS 规范了如何编写模块，以及如何在模块系统之间实现互操作。由于其同步执行特性，CMD 主要用于服务端开发。</p>\n<blockquote>\n<p><em>本文代码范例均基于 Node.js (Node.js 模块基于该规范略有不同)。</em></p>\n</blockquote>\n<h2 id=\"hash-模块规范\">模块规范</h2>\n<ol>\n<li>在模块中，有一个可用的 <strong>require</strong> 函数。\n<ol>\n<li><strong>require</strong> 函数接收一个模块标识符</li>\n<li><strong>require</strong> 函数返回外部模块导出的 API</li>\n<li>如果存在依赖循环，则外部模块在其传递依赖要求时可能尚未完成执行；在这种情况下，由 <strong>require</strong> 返回的对象必须至少包含外部模块在调用要求导致当前模块执行之前准备的导出。</li>\n<li>如果要求的模块不能被返回，则 <strong>require</strong> 必须 <strong>throw</strong> 一个错误。</li>\n</ol>\n</li>\n<li>在模块中，有一个名为 <strong>exports</strong> 的自由变量，该变量是模块在执行时可以向其添加 API 的对象。</li>\n<li>模块必须使用 <strong>exports</strong> 对象作为唯一的导出方法。</li>\n</ol>\n<h2 id=\"hash-应用\">应用</h2>\n<p>所有代码都运行在模块作用域，不会污染全局作用域。模块的加载顺序，按照其在代码中的出现顺序。\n接下来，我们尝试用 Commonjs 完成一个简单的小应用。在 <strong>math.js</strong> 中声明一个 CommonJS 模块，并通过 <code>exports</code> 导出名为 <code>add</code> 的方法。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//math.js</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x3C;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>要使用刚才的 add，我们需要 <strong>require</strong> 它，下面我们引用 add 模块，并导出 <code>increment</code> 方法。如果要导出多个方法，\n可以多次执行 <code>exports[api] = any</code> 操作，也可以在模块的最后，将要导出接口以对象形式赋值给 <code>exports</code>，如:<code>exports={any}</code>。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//increment.js</span>\n<span class=\"token keyword\">var</span> add <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'math'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">add</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">increment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在 <strong>program.js</strong> 中引用 <code>increment</code> 模块。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//program.js</span>\n<span class=\"token keyword\">var</span> inc <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<h2 id=\"hash-循环依赖\">循环依赖</h2>\n<p>当有循环require()调用时，模块返回时可能未完成执行。考虑这种情况：</p>\n<p>// a.js：</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a starting'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in a, b.done = %j'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>// b.js：</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b starting'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in b, a.done = %j'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>// main.js：</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main starting'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in main, a.done = %j, b.done = %j'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在 main.js 加载 a.js，然后 a.js 加载 b.js。此时，b.js 尝试加载 a.js。为了防止无限循环，这将返回未完成的 a.js 的 exports 副本给 b.js 模块。随后 b.js 完成加载，并将其 exports 对象提供给 a.js 模块。在 main.js 加载两个模块时，它们都已完成。因此，该程序的输出为：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> main.js\n<span class=\"token comment\"># ---</span>\nmain starting\na starting\nb starting\n<span class=\"token keyword\">in</span> b, a.done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\nb <span class=\"token keyword\">done</span>\n<span class=\"token keyword\">in</span> a, b.done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\na <span class=\"token keyword\">done</span>\n<span class=\"token keyword\">in</span> main, a.done <span class=\"token operator\">=</span> true, b.done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n</code></pre></div>\n<h2 id=\"hash-总结\">总结</h2>\n<p>CommonJS 定义了模块格式，但它在定义时似乎并未考虑有关浏览器环境中的情况，因此，你不能在网页中直接使用 commonjs 模块，需要先通过 webpack 之类的工具进行打包处理。</p>\n","words":2026,"toc":[{"depth":2,"value":"模块规范","id":"hash-模块规范"},{"depth":2,"value":"应用","id":"hash-应用"},{"depth":2,"value":"循环依赖","id":"hash-循环依赖"},{"depth":2,"value":"总结","id":"hash-总结"}],"title":"CommonJS Modules","date":"2020-09-06T02:19:40.000Z","draft":false,"description":"在 ES2015 标准之前，JavaScript语言没有模块化组织代码的原生方法，CommonJS 模块格式填补了这一空白。","type":"posts","tags":["javascript","module"],"series":false,"author":"GauLiang","cover":"001.jpg"},"prev":{"title":"Javascript 模块化概述","date":1599293077000,"draft":false,"description":"当我们提及模块化时，通常意味着是由一组高度分离的，不同的功能块存储在模块中组成的。在可能的情况下，通过松散耦合消除依赖关系简化应用程序的可维护性。","type":"posts","tags":["javascript","module"],"series":false,"author":"GauLiang","cover":"001.jpg","path":"/blogs/2020/what-are-cjs-amd-umd-and-esm-in-javascript","slug":"2020/what-are-cjs-amd-umd-and-esm-in-javascript"},"next":{"title":"ECMAScript Modules","date":1599470041000,"draft":false,"description":"ES6 中首次内置了对模块的支持。从理论上讲，ECMAScript模块应该在所有JavaScript环境中通用。实际上，浏览器仍然是ES模块的主要目标。","type":"posts","tags":["esm","javascript"],"series":false,"author":"GauLiang","cover":false,"path":"/blogs/2020/es-modules","slug":"2020/es-modules"}},"__N_SSG":true}