{"pageProps":{"id":["posts","2022","lru-algorithm"],"post":{"id":["posts","2022","lru-algorithm"],"contentHtml":"<p>LRU 是 Least Recently Used 的缩写，即最近最少使用。它的基本思想是长期不被使用的数据，在未来被用到的几率也不大，所以当新的数据进来时我们可以优先把这些数据替换掉。</p>\n<h2 id=\"hash-基本要求\">基本要求</h2>\n<ol>\n<li>固定大小：限制内存使用。</li>\n<li>快速访问：缓存插入和查找操作应该很快，最好是 O(1) 时间。</li>\n<li>在达到内存限制的情况下替换条目：缓存应该具有有效的算法来在内存已满时驱逐条目。</li>\n</ol>\n<h2 id=\"hash-数据结构\">数据结构</h2>\n<p>下面提供两种实现方式，并完成相关代码。</p>\n<h3 id=\"hash-Map\">Map</h3>\n<p>在 Javascript 中，Map 的 key 是有序的，当迭代的时候，他们以插入的顺序返回键值。结合这个特性，我们也通过 Map 实现 LRU 算法。</p>\n<h3 id=\"hash-Doubly-Linked-List\">Doubly Linked List</h3>\n<p>我们也可通过双向链表（Doubly Linked List）维护缓存条目，通过对链表的增、删、改实现数据管理。为确保能够从链表中快速读取某个节点的数据，我们可以通过 Map 来存储对链表中节点的引用。</p>\n<h2 id=\"hash-Map-实现\">Map 实现</h2>\n<p>在 <strong>初始化时</strong> 完成两件事情：</p>\n<ol>\n<li>配置存储限制，当大于此限制，缓存条目将按照最近读取情况被驱逐。</li>\n<li>创建一个用于存储缓存数据的 Map 。</li>\n</ol>\n<p>在 <strong>添加数据</strong> 时：</p>\n<ol>\n<li>判断当前存储数据中是否包含新进数据，如果存在，则删除当前数据</li>\n<li>判断当前存储空间是否被用尽，如果已用尽则删除 Map 头部的数据。<br>\n<code>map.delete(map.keys().next().value)</code></li>\n<li>插入新数据到 Map 的尾部</li>\n</ol>\n<p>基于 Javascript Map 实现 LRU，代码如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token punctuation\">{</span>\n    size <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span> <span class=\"token operator\">=</span> size <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 存在即更新</span>\n            <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword control-flow\">return</span> temp\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span> <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cache</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"hash-双向链表实现\">双向链表实现</h2>\n<h3 id=\"hash-定义节点类\">定义节点类</h3>\n<p>包含 <code>prev</code>，<code>next</code>，<code>data</code> 三个属性，分别用以存储指向前后节点的引用，以及当前节点要存储的数据。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n    prev<span class=\"token operator\">:</span> Node\n    next<span class=\"token operator\">:</span> Node\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"hash-定义链表类\">定义链表类</h3>\n<p>包含 <code>head</code>、<code>tail</code> 属性，分别指向链表的 <strong>头节点</strong> 和 <strong>尾节点</strong>。</p>\n<p>当从链表中读取数据时，需要将当前读取的数据移动到链表头部；添加数据时，将新节点插入到头部；当链表节点数量大于限定的阀值，需要从链表尾部删除节点。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n    head<span class=\"token operator\">:</span> Node\n    next<span class=\"token operator\">:</span> Node\n    <span class=\"token function\">moveNodeToHead</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">insertNodeToHead</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">deleteLastNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"hash-定义-LRU-类\">定义 LRU 类</h3>\n<p>为 <strong>LRU</strong> 定义属性：<code>linkLine</code> 用以存储指向链表的引用；<code>size</code> 用以配置存储空间大小限制；\n为简化从链表中查找节点，再定义 <code>map</code> 属性，用以存储不同键指向链表节点的引用。</p>\n<p>定义成员方法，<code>set(key,value)</code> 用以添加数据，<code>get(key)</code> 读取一条数据。</p>\n<h3 id=\"hash-set-key,value-\">set(key,value)</h3>\n<ol>\n<li>如果 map 中存在当前 key，则修改当前节点的值，然后从链表中把当前节点移动到链表头部；</li>\n<li>否则：\n<ol>\n<li>判断当前链表节点数量是否达到了存储上线，如果是，则删除链表尾部的节点。同时从 map 中移除相应的节点引用；</li>\n<li>创建新节点，然后插入到链表头部，并添加 map 引用。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"hash-get-key-\">get(key)</h3>\n<p>如果 map 中存在当前 key，从链表中读取节点，将其移动到链表头部，并返回结果，否则返回空。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n    linkLine<span class=\"token operator\">:</span> LinkLine\n    map<span class=\"token operator\">:</span> Map\n    size<span class=\"token operator\">:</span> Number\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"hash-代码实现\">代码实现</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkNode</span> <span class=\"token punctuation\">{</span>\n    prev <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span>\n    next <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkLine</span> <span class=\"token punctuation\">{</span>\n\n    head <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span>\n    tail <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> headNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'head'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'head'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> tailNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tail'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tail'</span><span class=\"token punctuation\">)</span>\n\n        headNode<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> tailNode\n        tailNode<span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span> <span class=\"token operator\">=</span> headNode\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">head</span> <span class=\"token operator\">=</span> headNode\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">tail</span> <span class=\"token operator\">=</span> tailNode\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">moveNodeToFirst</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">insertNodeToFirst</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">insertNodeToFirst</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">head</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">head</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> node\n        node<span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">head</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> second\n        second<span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span> <span class=\"token operator\">=</span> node\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">deleteLastNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">tail</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">tail</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span> <span class=\"token operator\">=</span> last<span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span>\n        last<span class=\"token punctuation\">.</span><span class=\"token property-access\">prev</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">tail</span>\n        <span class=\"token keyword control-flow\">return</span> last\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token punctuation\">{</span>\n    linkLine <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span>\n    map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    size <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span> <span class=\"token operator\">=</span> size <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">linkLine</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkLine</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> value\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">map</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">map</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n            value <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">linkLine</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">moveNodeToFirst</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> value\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">map</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">map</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">=</span> value\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">linkLine</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">moveNodeToFirst</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 删除最后一个元素</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">map</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> lastNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">linkLine</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deleteLastNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">map</span><span class=\"token punctuation\">[</span>lastNode<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkNode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">linkLine</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">insertNodeToFirst</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">map</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newNode\n        <span class=\"token punctuation\">}</span>       \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n","words":3029,"toc":[{"depth":2,"value":"基本要求","id":"hash-基本要求"},{"depth":2,"value":"数据结构","id":"hash-数据结构"},{"depth":2,"value":"Map 实现","id":"hash-Map-实现"},{"depth":2,"value":"双向链表实现","id":"hash-双向链表实现"}],"title":"Javascript 手写 LRU 算法","author":"GauLiang","type":"posts","series":false,"date":"2022-09-20T14:55:43.412Z","tags":["lru"],"description":"LRU 是 Least Recently Used 的缩写，即最近最少使用。它的基本思想是长期不被使用的数据，在未来被用到的几率也不大，所以当新的数据进来时我们可以优先把这些数据替换掉。","draft":true,"cover":false},"prev":{"title":"监听 Markdown 文件并热更新 Next.js 页面","author":"高国良","type":"posts","series":false,"date":1656061643954,"tags":["next.js","fast-refresh"],"description":"Next.js 提供了 Fast-Refresh 能力，它可以为您对 React 组件所做的编辑提供即时反馈。但是，当你通过 Markdown 文件提供网站内容时，由于 Markdown 不是 React 组件，热更新将失效。","draft":false,"cover":false,"path":"/blogs/2022/watch-markdown-files-and-hot-load-the-nextjs-page","slug":"2022/watch-markdown-files-and-hot-load-the-nextjs-page"},"next":null},"__N_SSG":true}