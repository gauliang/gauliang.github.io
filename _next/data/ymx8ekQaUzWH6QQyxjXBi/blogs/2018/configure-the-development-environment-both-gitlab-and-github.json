{"pageProps":{"id":["posts","2018","configure-the-development-environment-both-gitlab-and-github"],"post":{"id":["posts","2018","configure-the-development-environment-both-gitlab-and-github"],"contentHtml":"<p>Git 客户端与服务器端的通信支持多种协议，ssh 最常用。ssh的公钥登录流程：用户将自己的公钥存储在远程主机，登录时，远程主机会向用户发送一条消息，用户用自己的私钥加密后，再发给服务器。远程主机用事先存储的公钥进行解密，如果成功，就证明用户可信。</p>\n<div class=\"image-widget\"><img src=\"/attachments/posts/2018/configure-the-development-environment-both-gitlab-and-github.files/http://images2017.cnblogs.com/blog/634103/201801/634103-20180124162449147-1441048241.png\" alt=\"\"></div>\n<h2 id=\"hash-生成公私密钥\">生成公私密钥</h2>\n<p>用户必须事先提供自己的公钥给服务器，如果没有，可以用 <code>ssh-keygen</code> 命令生成。该命令会生成两个文件（公钥 and 私钥）,默认路径在用户根目录下的<code>.ssh</code>文件夹中。</p>\n<p><strong>注意：</strong> 默认生成的文件名是 <code>id_rsa/id_rsa.pub</code>，由于这里需要两套密钥，所以需为它们分别命名，以防止互相覆盖。</p>\n<p>执行下面命令生成密钥：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"token string\">\"注册 gitlab 账户的邮箱\"</span>\n</code></pre></div>\n<p>提示要输入名称时输入 <code>id_rsa_gitlab</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"token string\">\"注册 github 账户的邮箱\"</span>\n</code></pre></div>\n<p>提示要输入名称时输入 <code>id_rsa_github</code></p>\n<h2 id=\"hash-提供公钥给服务器\">提供公钥给服务器</h2>\n<ol>\n<li>复制 <code>~/.ssh/id_rsa_gitlab.pub</code>文件内容，进入gitlab / profile / SSH Keys，将公钥内容添加至 gitlab 。</li>\n<li>复制 <code>~/.ssh/id_rsa_github.pub</code>文件内容，进入github / setting / SSH and GPG keys / New SSH key 将公钥内容添加至 github 。</li>\n</ol>\n<h2 id=\"hash-更新SSH配置\">更新SSH配置</h2>\n<p>SSH 配置信息加载顺序如下：</p>\n<ol>\n<li>命令行配置参数</li>\n<li>用户级别的配置文件<code>~/.ssh/config</code></li>\n<li>系统级别的配置文件 <code>/etc/ssh/ssh_config</code></li>\n</ol>\n<p>根据我们实际情况，更新用户级别配置信息即可，打开 SSH 客户端配置文件 <code>~/.ssh/config</code> 增加配置项，如果没有就创建一个（是文本文件）。</p>\n<p>SSH配置项有很多，详见：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://man.openbsd.org/ssh_config\">https://man.openbsd.org/ssh_config</a> 或r <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://www.ssh.com/ssh/config/\">https://www.ssh.com/ssh/config/</a></p>\n<p>在配置文件中加入以下内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-markdown\"><code class=\"language-markdown\">Host github.com\n    HostName github.com\n    User githubuser@xyz.com\n    IdentityFile ~/.ssh/id_rsa_github\n\nHost gitlab.com\n    HostName gitlab.com\n    User gitlabuser@xyz.com\n    IdentityFile ~/.ssh/id_rsa_gitlab\n</code></pre></div>\n<h2 id=\"hash-配置仓库用户信息\">配置仓库用户信息</h2>\n<p>Git 配置信息也有三个地方可以存储，根据加载顺序依次为：</p>\n<ol>\n<li><code>/etc/gitconfig</code> 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。</li>\n<li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件只针对当前用户。 可以传递 --global 选项让 Git 读写此文件。</li>\n<li>当前使用仓库的 Git 目录中的 config 文件（就是 <code>.git/config</code>）</li>\n</ol>\n<p>不同仓库链接不同的服务器，所用的git用户信息也不同。可以把常用的git用户信息配置到 <code>~/.gitconfig</code> 中，不常用的我们在仓库中单独配置。以常用 gitlab 为例：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"githubuser\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"githubuser@xyz.com\"</span>\n</code></pre></div>\n<p>进入本地 github 仓库配置 git 用户信息</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">~/github$ <span class=\"token function\">git</span> config --local user.name <span class=\"token string\">\"githubuser\"</span>\n~/github$ <span class=\"token function\">git</span> config --local user.email <span class=\"token string\">\"githubuser@xyz.com\"</span>\n</code></pre></div>\n<h2 id=\"hash-写在后面\">写在后面</h2>\n<p>本文地址：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://www.cnblogs.com/kelsen/p/8342239.html\">https://www.cnblogs.com/kelsen/p/8342239.html</a></p>\n<p>如果您有任何建议或疑问请在下面留言交流。</p>\n","words":1760,"toc":[{"depth":2,"value":"生成公私密钥","id":"hash-生成公私密钥"},{"depth":2,"value":"提供公钥给服务器","id":"hash-提供公钥给服务器"},{"depth":2,"value":"更新SSH配置","id":"hash-更新SSH配置"},{"depth":2,"value":"配置仓库用户信息","id":"hash-配置仓库用户信息"},{"depth":2,"value":"写在后面","id":"hash-写在后面"}],"title":"配置同时使用 Gitlab 和 Github 的开发环境","author":"高国良","type":"posts","series":false,"date":"2018-01-24T16:21:00.791Z","tags":["git","gitlab","github","ssh"],"description":"Git 客户端与服务器端的通信支持多种协议，ssh 最常用。ssh的公钥登录流程：用户将自己的公钥存储在远程主机，登录时，远程主机会向用户发送一条消息，用户用自己的私钥加密后，再发给服务器。远程主机用事先存储的公钥进行解密，如果成功，就证明用户可信。 生成公私密钥 用户必须事先提供自己的公钥给服务器","draft":false,"cover":false},"prev":{"title":"浏览器是如何工作的 - 译文","author":"高国良","type":"posts","series":false,"date":1499761860791,"tags":[],"description":"英文原文 http__ERR__//taligarsiel.com/Projects/howbrowserswork1.htm 引言 浏览器可能是最广泛使用的软件了，本书我将介绍浏览器是如何在幕后工作的。我们会了解到从你在浏览器地址栏中输入“google.com”直至浏览器屏幕上显示Google页面的整个过程中","draft":false,"cover":false,"path":"/blogs/2017/how-browsers-work","slug":"2017/how-browsers-work"},"next":{"title":"Learn Algorithms With Javascript - 基于 Js 进行算法学习","author":"高国良","type":"posts","series":false,"date":1526813520791,"tags":["web","javascript","nodejs","this","github","数学","Algorithms"],"description":"基于 __ERR__javascript__ERR__ 学习并实现常用的经典算法。本项目托管在 [GitHub]，欢迎对算法和数学感兴趣的 Js 开发者参与，一起学习共同进步。","draft":false,"cover":false,"path":"/blogs/2018/learn-algorithms-with-javascript","slug":"2018/learn-algorithms-with-javascript"}},"__N_SSG":true}