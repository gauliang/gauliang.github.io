{"pageProps":{"id":["posts","2019","rancher-2.2.2-ha-cluster"],"post":{"id":["posts","2019","rancher-2.2.2-ha-cluster"],"contentHtml":"<p>对于生产环境，需以高可用的配置安装 Rancher，确保用户始终可以访问 Rancher Server。当安装在Kubernetes集群中时，Rancher将与集群的 etcd 集成，并利用Kubernetes 调度实现高可用。</p>\n<p>为确保高可用，本文所部署的 Kubernetes 集群将专用于运行 Rancher ，Rancher 运行起来后，可再创建或导入集群以运行具体的工作负载。</p>\n<h2 id=\"hash-一、推荐架构\">一、推荐架构</h2>\n<ul>\n<li>Rancher的DNS 应解析到 4层(TCP) 负载均衡上。</li>\n<li>负载均衡应将端口 TCP/80 和 TCP/443 转发到 Kubernetes 集群中的所有3个节点。</li>\n<li>Ingress-controller 将 HTTP 重定向到HTTPS并终止端口 TCP/443 上的 SSL/TLS（SSL数字证书在这里部署）。</li>\n<li>Ingress-controller 将流量转发到 pod 的 TCP/80 端口。</li>\n</ul>\n<p>下面是一张从官网拉过来的图片,更直观一些。</p>\n<div class=\"image-widget\"><img src=\"/attachments/posts/2019/rancher-2.2.2-ha-cluster.files/https://rancher.com/docs/img/rancher/ha/rancher2ha.svg\" alt=\"image\"><div class=\"figcaption\">image</div></div>\n<h2 id=\"hash-二、准备工作\">二、准备工作</h2>\n<h3 id=\"hash-1-服务器准备\">1. 服务器准备</h3>\n<ol>\n<li>1台 Linux服务器，配置不用很高，用于四层负载均衡</li>\n<li>3台 Linux服务器，Rancker-server-node 节点</li>\n<li>n台 Linux服务器，Rancker-agent-node 节点(n&#x3C;=50)</li>\n</ol>\n<p>节点服务器的硬件配置，可根据实际情况依据该表自行选择。</p>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th>规模</th>\n<th>集群</th>\n<th>节点</th>\n<th>CPU</th>\n<th>内存</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>小</td>\n<td>最多5个</td>\n<td>高达50</td>\n<td>2</td>\n<td>8 GB</td>\n</tr>\n<tr>\n<td>中</td>\n<td>最多15个</td>\n<td>最多200</td>\n<td>4</td>\n<td>16 GB</td>\n</tr>\n<tr>\n<td>大</td>\n<td>高达50</td>\n<td>最多500个</td>\n<td>8</td>\n<td>32 GB</td>\n</tr>\n<tr>\n<td>超大</td>\n<td>最多100个</td>\n<td>高达1000</td>\n<td>32</td>\n<td>128 GB</td>\n</tr>\n<tr>\n<td>更大规模</td>\n<td>100+</td>\n<td>1000+</td>\n<td>联系 Rancher</td>\n<td>联系 Rancher</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id=\"hash-2-工具安装\">2.工具安装</h3>\n<p>这些工具软件将在部署过程中用到，需提前安装好，并确保通过 $PATH 变量可以找到。</p>\n<p><strong>安装 kubectl</strong></p>\n<p>这是一个 kubernetes 命令行工具，<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl\">安装参考</a> K8S 官网</p>\n<p>这里要注意的是，官网的安装过程是到谷歌云平台下载，这里我门修改下载链接为 RANCHER 提供的镜像地址。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 下载目前最新版</span>\n<span class=\"token function\">wget</span> https://www.cnrancher.com/download/kubernetes/linux-amd64-v1.14.1-kubectl\n<span class=\"token comment\"># 设置执行权限</span>\n<span class=\"token function\">chmod</span> +x ./linux-amd64-v1.14.1-kubectl \n<span class=\"token comment\"># 将其移动到 /usr/locak/bin/kubectl </span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> ./linux-amd64-v1.14.1-kubectl /usr/local/bin/kubectl\n</code></pre></div>\n<p><strong>安装 RKE</strong></p>\n<p>RKE 全称 Rancher Kubernetes Engine，是一个用于构建 kubernets 集群的命令行工具。网络原因，我们切换到 Rancher 提供的镜像地址下载安装</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 下载目前最新版</span>\n<span class=\"token function\">wget</span> https://www.cnrancher.com/download/rke/v0.1.18-rke_linux-amd64\n<span class=\"token comment\"># 设置执行权限</span>\n<span class=\"token function\">chmod</span> +x v0.1.18-rke_linux-amd64\n<span class=\"token comment\"># 将其移动到 /usr/locak/bin/kubectl </span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> v0.1.18-rke_linux-amd64 /usr/local/bin/rke\n<span class=\"token comment\"># 验证安装</span>\nrke --version <span class=\"token comment\"># rke version v0.1.18</span>\n</code></pre></div>\n<p><strong>安装 helm</strong></p>\n<p>helm 是Kubernetes的包管理器。Helm版本需高于 <code>v2.12.1</code>。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 网络原因，切换到 Rancher 提供的镜像连接</span>\n<span class=\"token function\">wget</span> https://www.cnrancher.com/download/helm/helm-v2.13.1-linux-amd64.tar.gz\n<span class=\"token comment\"># 解压</span>\n<span class=\"token function\">tar</span> -zxvf helm-v2.0.0-linux-amd64.tgz\n<span class=\"token comment\"># 移动到 /usr/local/bin/helm</span>\n<span class=\"token function\">mv</span> linux-amd64/helm /usr/local/bin/helm\n</code></pre></div>\n<h2 id=\"hash-三、创建节点和负载均衡\">三、创建节点和负载均衡</h2>\n<p>这些节点须在同一个网络区域或数据中心。</p>\n<h3 id=\"hash-1-节点准备\">1. 节点准备</h3>\n<p><strong>操作系统</strong></p>\n<p>所有节点安装 ubuntu 18.04(64-bit x86)</p>\n<p><strong>网络要求</strong>\r\n注意参考 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://rancher.com/docs/rancher/v2.x/en/installation/requirements/#\">官网</a>放行相关端口。本文 ip 清单（仅用于演示）：</p>\n<div class=\"table-responsive\"><table>\n<thead>\n<tr>\n<th>NODE</th>\n<th>IP</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NODE-LB</td>\n<td>公网 168.168.168.1 / 内网 10.0.0.1</td>\n<td>四层负载均衡</td>\n</tr>\n<tr>\n<td>NODE-SERVER</td>\n<td>公网 168.168.168.6 / 内网 10.0.0.6</td>\n<td>local 集群</td>\n</tr>\n<tr>\n<td>NODE-SERVER</td>\n<td>公网 168.168.168.7 / 内网 10.0.0.7</td>\n<td>local 集群</td>\n</tr>\n<tr>\n<td>NODE-SERVER</td>\n<td>公网 168.168.168.8 / 内网 10.0.0.8</td>\n<td>local 集群</td>\n</tr>\n<tr>\n<td>NODE-WORKER</td>\n<td>公网 168.168.168.16 / 内网 10.0.0.16</td>\n<td>工作负载</td>\n</tr>\n<tr>\n<td>NODE-WORKER</td>\n<td>公网 168.168.168.17 / 内网 10.0.0.17</td>\n<td>工作负载</td>\n</tr>\n<tr>\n<td>NODE-WORKER</td>\n<td>公网 168.168.168.18 / 内网 10.0.0.18</td>\n<td>工作负载</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>docker-ce</strong></p>\n<p>并安装最新stable版 docker-ce:18.09.6</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 删除旧版本docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove <span class=\"token function\">docker</span> docker-engine docker.io containerd runc\n\n<span class=\"token comment\"># 更新 apt </span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n\n<span class=\"token comment\"># 安装工具包</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token punctuation\">\\</span>\n    apt-transport-https <span class=\"token punctuation\">\\</span>\n    ca-certificates <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">curl</span> <span class=\"token punctuation\">\\</span>\n    gnupg-agent <span class=\"token punctuation\">\\</span>\n    software-properties-common\n\n<span class=\"token comment\"># 添加Docker官方 GPG key</span>\n$ <span class=\"token function\">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n\n<span class=\"token comment\"># 添加 stable apt 源</span>\n$ <span class=\"token function\">sudo</span> add-apt-repository <span class=\"token punctuation\">\\</span>\n   <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> \\\n   stable\"</span>\n\n<span class=\"token comment\"># 安装 Docker CE</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io\n\n<span class=\"token comment\"># 将当前用户加入\"docker\"用户组，加入到该用户组的账号在随后安装过程会用到。用于节点访问的SSH用户必须是节点上docker组的成员：</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG <span class=\"token function\">docker</span> <span class=\"token environment constant\">$USER</span>\n</code></pre></div>\n<h3 id=\"hash-2-配置四层负载均衡\">2. 配置四层负载均衡</h3>\n<p>RKE 将会在每个节点上配置一个 Ingress-controller pod，这个 pod 将绑定到该节点的 TCP/80 和 TCP/443 端口，作为 Rancher-server 的HTTPS流量入口点。</p>\n<p>将负载均衡器配置为基本的第4层TCP转发器，这里采用 NGINX 作四层负载均衡。</p>\n<p>*<strong>安装 Nginx</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> nginx\n<span class=\"token comment\"># /usr/sbin/nginx：主程序</span>\n<span class=\"token comment\"># /etc/nginx：存放配置文件</span>\n<span class=\"token comment\"># /usr/share/nginx：存放静态文件</span>\n<span class=\"token comment\"># /var/log/nginx：存放日志</span>\n</code></pre></div>\n<p>更新配置文件 <code>/etc/nginx/nginx.conf</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">worker_processes 4;\r\nworker_rlimit_nofile 40000;\r\n\r\nevents {\r\n    worker_connections 8192;\r\n}\r\n\r\nstream {\r\n    upstream rancher_servers_http {\r\n        least_conn;\r\n        server 10.0.0.6:80 max_fails=3 fail_timeout=5s;\r\n        server 10.0.0.7:80 max_fails=3 fail_timeout=5s;\r\n        server 10.0.0.8:80 max_fails=3 fail_timeout=5s;\r\n    }\r\n    server {\r\n        listen     80;\r\n        proxy_pass rancher_servers_http;\r\n    }\r\n\r\n    upstream rancher_servers_https {\r\n        least_conn;\r\n        server 10.0.0.6:443 max_fails=3 fail_timeout=5s;\r\n        server 10.0.0.7:443 max_fails=3 fail_timeout=5s;\r\n        server 10.0.0.8:443 max_fails=3 fail_timeout=5s;\r\n    }\r\n    \r\n    server {\r\n        listen     443;\r\n        proxy_pass rancher_servers_https;\r\n    }\r\n}</code></pre></div>\n<blockquote>\n</blockquote>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">注意：将local群集专用于Rancher。</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">勿将此负载均衡（即local群集Ingress）对 Rancher 以外的应用程序进行负载转发。</code></pre></div>\n<h2 id=\"hash-四、使用-RKE-安装-kubernetes\">四、使用 RKE 安装 kubernetes</h2>\n<p>下面使用 RKE(Kubernetes Engine) 安装高可用的 Kubernetes。</p>\n<h3 id=\"hash-1-NODE-SERVER-之间建立-ssh-信任\">1. NODE-SERVER 之间建立 ssh 信任</h3>\n<p>我们目前有三台服务器用作 local 集群，首先要确保我们主机能够通过 ssh 访问到另外两台主机并执行相关操作。比如执行 docker 命令，还记得前面我们加入 docker 用户组的用户吧。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 根据需求配置相关信息生成 rsa 公钥密钥</span>\nssh-keygen\n\n<span class=\"token comment\"># 复制当前主机上的公钥到另外两台上面，实现免密码登录</span>\nssh-copy-id -i ~/.ssh/id_rsa.pub user@x.x.x.x\n\n<span class=\"token comment\"># 要注意这里也要跟自己注册注册一下 ：ssh-copy-id -i ~/.ssh/id_rsa.pub user@本机ip</span>\n</code></pre></div>\n<h3 id=\"hash-2-编写-rancher-cluster-yml-文件\">2. 编写 rancher-cluster.yml 文件</h3>\n<p>这里需要注意，这个文件没有明确配置rsa文件名，默认会使用 <code>$HOME/.ssh/id_rsa</code> 建立连接。内容如下</p>\n<div class=\"remark-highlight\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">nodes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> 168.168.168.6\n    <span class=\"token key atrule\">internal_address</span><span class=\"token punctuation\">:</span> 10.0.0.6\n    <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> ubuntu\n    <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>controlplane<span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">,</span>etcd<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> 168.168.168.7\n    <span class=\"token key atrule\">internal_address</span><span class=\"token punctuation\">:</span> 10.0.0.7\n    <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> ubuntu\n    <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>controlplane<span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">,</span>etcd<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> 168.168.168.8\n    <span class=\"token key atrule\">internal_address</span><span class=\"token punctuation\">:</span> 10.0.0.8\n    <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> ubuntu\n    <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>controlplane<span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">,</span>etcd<span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">etcd</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">snapshot</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">creation</span><span class=\"token punctuation\">:</span> 6h\n    <span class=\"token key atrule\">retention</span><span class=\"token punctuation\">:</span> 24h\n</code></pre></div>\n<h3 id=\"hash-3-运行-RKE-构建-kubernetes-集群\">3. 运行 RKE 构建 kubernetes 集群</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">rke up --config ./rancher-cluster.yml\n<span class=\"token comment\"># 验证：返回类似下面的消息则说明执行成功，有问题欢迎留言交流。</span>\n<span class=\"token comment\"># Finished building Kubernetes cluster successfully.</span>\n</code></pre></div>\n<p>执行成功会在当前目录生成一个文件 <code>kube_config_rancher-cluster.yml</code>，将该文件复制到 <code>.kube/kube_config_rancher-cluster.yml</code>。</p>\n<p>或者</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">KUBECONFIG</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span>/kube_config_rancher-cluster.yml\n</code></pre></div>\n<h3 id=\"hash-4-测试集群\">4. 测试集群</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl get nodes\n<span class=\"token comment\"># 返回下面信息说明集群创建成功</span>\nNAME           STATUS   ROLES                      AGE   VERSION\n<span class=\"token number\">168.168</span>.168.6   Ready    controlplane,etcd,worker   13m   v1.13.5\n<span class=\"token number\">168.168</span>.168.7   Ready    controlplane,etcd,worker   13m   v1.13.5\n<span class=\"token number\">168.168</span>.168.8   Ready    controlplane,etcd,worker   13m   v1.13.5\n</code></pre></div>\n<h3 id=\"hash-5-保存好相关配置文件\">5. 保存好相关配置文件</h3>\n<p>当排除故障、升级群集时需要用到以下文件，请将其副本保存在一个安全的位置。</p>\n<p><code>rancher-cluster.yml</code>：RKE集群配置文件。\r\n<code>kube_config_rancher-cluster.yml</code>：群集的Kubeconfig文件，此文件包含完全访问群集的凭据。\r\n<code>rancher-cluster.rkestate</code>：Kubernetes群集状态文件，此文件包含完全访问群集的凭据。</p>\n<h3 id=\"hash-6-初始化-Helm\">6. 初始化 Helm</h3>\n<p>一开始，我们安装了 Helm ，Helm 是 Kubernetes 首选的包管理工具。为了能够使用 Helm，需要在群集上安装服务器端组件 tiller。</p>\n<p>Kubernetes APIServer 开启了 RBAC 访问控制，所以需要创建 tiller 使用的service account: tiller 并分配合适的角色给它。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 在 kube-system 命名空间下创建一个 serviceaccount ,并将角色绑定给 tiller</span>\nkubectl -n kube-system create serviceaccount tiller\n\n<span class=\"token comment\"># 然后， heml 就可以在集群上安装 tiller 了</span>\n<span class=\"token comment\"># 同样，网络原因，我们需要配置一个镜像仓库地址</span>\nhelm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.13.1 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts\n\n<span class=\"token comment\"># 输出：$HELM_HOME has been configured at /home/ubuntu/.helm.</span>\n</code></pre></div>\n<h3 id=\"hash-7-测试-tiller-安装是否成功\">7. 测试 tiller 安装是否成功</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl -n kube-system  rollout status deploy/tiller-deploy\n<span class=\"token comment\"># 输出 deployment \"tiller-deploy\" successfully rolled out</span>\n\nhelm version\n<span class=\"token comment\"># Client: &#x26;version.Version{SemVer:\"v2.13.1\", GitCommit:\"618447cbf203d147601b4b9bd7f8c37a5d39fbb4\", GitTreeState:\"clean\"}</span>\n<span class=\"token comment\"># Server: &#x26;version.Version{SemVer:\"v2.13.1\", GitCommit:\"618447cbf203d147601b4b9bd7f8c37a5d39fbb4\", GitTreeState:\"clean\"}</span>\n</code></pre></div>\n<h2 id=\"hash-五、安装-Rancher\">五、安装 Rancher</h2>\n<p>这里注意选择 stable 版本，首先添加 heml 源仓库。</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">helm repo <span class=\"token function\">add</span> rancher-stable https://releases.rancher.com/server-charts/stable\n</code></pre></div>\n<h3 id=\"hash-1-部署-Rancher-并配置-SSL-数字证书\">1. 部署 Rancher 并配置 SSL 数字证书</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">helm <span class=\"token function\">install</span> rancher-stable/rancher <span class=\"token punctuation\">\\</span>\n  --name rancher <span class=\"token punctuation\">\\</span>\n  --namespace cattle-system <span class=\"token punctuation\">\\</span>\n  --set <span class=\"token assign-left variable\">hostname</span><span class=\"token operator\">=</span>cloud.jfjbapp.cn <span class=\"token punctuation\">\\</span>\n  --set ingress.tls.source<span class=\"token operator\">=</span>secret\n\n</code></pre></div>\n<h3 id=\"hash-2-将通过-CA-机构签发的数字证书准备好，\">2. 将通过 CA 机构签发的数字证书准备好，</h3>\n<h3 id=\"hash-3-检查-rancher-是否成功可用\">3. 检查 rancher 是否成功可用</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl -n cattle-system rollout status deploy/rancher\nWaiting <span class=\"token keyword\">for</span> deployment <span class=\"token string\">\"rancher\"</span> rollout to finish: <span class=\"token number\">0</span> of <span class=\"token number\">3</span> updated replicas are available<span class=\"token punctuation\">..</span>.\ndeployment <span class=\"token string\">\"rancher\"</span> successfully rolled out\n</code></pre></div>\n<h3 id=\"hash-4-访问-Rancher-UI\">4. 访问 Rancher UI</h3>\n<p>浏览器打开 <code>https://your.doamin</code>，为 <code>admin</code>账户设置初始密码，并登入系统。提示设置<code>server-url</code>，确保你的地址无误，确认即可。随后稍等皮片刻，待系统完成初始化。</p>\n<p>如果出现local集群一直停留在等待状态，并提示 <code>Waiting for server-url setting to be set</code>，可以尝试点击 全局->local->升级->添加一个成员角色（admin/ClusterOwner）->保存即可。</p>\n<h2 id=\"hash-六、结语\">六、结语</h2>\n<p>至此，已完成 Rancher 2.2.2 的 HA 安装，后续再做一些安全加固，检查各项配置确保无安全风险，即可开始提供服务。随后会抽空再写一篇文章简单介绍微服务架构应用的部署。</p>\n","words":7104,"toc":[{"depth":2,"value":"一、推荐架构","id":"hash-一、推荐架构"},{"depth":2,"value":"二、准备工作","id":"hash-二、准备工作"},{"depth":2,"value":"三、创建节点和负载均衡","id":"hash-三、创建节点和负载均衡"},{"depth":2,"value":"四、使用 RKE 安装 kubernetes","id":"hash-四、使用-RKE-安装-kubernetes"},{"depth":2,"value":"五、安装 Rancher","id":"hash-五、安装-Rancher"},{"depth":2,"value":"六、结语","id":"hash-六、结语"}],"title":"Rancher 2.2.2 - HA 部署高可用k8s集群","author":"高国良","type":"posts","series":false,"date":"2019-05-09T07:33:00.791Z","tags":["rancher","kubernetes","k8s","docker","ubuntu"],"description":"对于生产环境，需以高可用的配置安装 Rancher，确保用户始终可以访问 Rancher Server。当安装在Kubernetes集群中时，Rancher将与集群的 etcd 集成，并利用Kubernetes 调度实现高可用。","draft":false,"cover":false},"prev":{"title":"VLC-FM PLAYLIST","author":"高国良","type":"posts","series":false,"date":1556741760791,"tags":[],"description":"VLC FM PLAYLIST.xspf","draft":false,"cover":false,"path":"/blogs/2019/vlc-fm-playlist","slug":"2019/vlc-fm-playlist"},"next":{"title":"Fedora 30 安装 Gradle","author":"高国良","type":"posts","series":false,"date":1557673620791,"tags":[],"description":"当前的 Gradle 最新版本是5.4.1。您可以从发布页面下载所有 Gradle 版本的二进制文件和查看文档。 先决条件 Gradle 能够在所有主流操作系统上运行，只要具备 Java JDK/JRE 环境即可，Java 版本必须为 8或更高。 安装 1、下载 Gradle 目前的Gradle版本","draft":false,"cover":false,"path":"/blogs/2019/install-gradle-on-fedora30","slug":"2019/install-gradle-on-fedora30"}},"__N_SSG":true}