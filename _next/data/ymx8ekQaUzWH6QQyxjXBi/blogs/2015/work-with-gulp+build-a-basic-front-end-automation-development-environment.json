{"pageProps":{"id":["posts","2015","work-with-gulp+build-a-basic-front-end-automation-development-environment"],"post":{"id":["posts","2015","work-with-gulp+build-a-basic-front-end-automation-development-environment"],"contentHtml":"<p>通过前面几节的准备工作，对于npm / node / gulp 应该已经有了基本的认识，本节主要介绍如何构建一个基本的前端自动化开发环境。 下面将逐步构建一个可以自动编译 sass 文件、压缩 javascript 文件、多终端多浏览器同步测试的开发环境，并且还可以通过 piblish 命令对项目下的文件进行打包操作。</p>\n<blockquote>\n<p>相关连接导航</p>\n<p><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.cnblogs.com/kelsen/p/4608119.html\">在windows下安装gulp —— 基于 Gulp 的前端集成解决方案（一）</a></p>\n<p><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.cnblogs.com/kelsen/p/4611102.html\">执行 $Gulp 时发生了什么 —— 基于 Gulp 的前端集成解决方案（二）</a></p>\n<p><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.cnblogs.com/kelsen/p/4643762.html\">常用 Gulp 插件汇总 —— 基于 Gulp 的前端集成解决方案（三）</a></p>\n<p><a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.cnblogs.com/kelsen/p/4993169.html\">构建一个基本的前端自动化开发环境 —— 基于 Gulp 的前端集成解决方案（四）</a></p>\n</blockquote>\n<h2 id=\"hash-一、创建目录结构\">一、创建目录结构</h2>\n<p>建立如下目录结构，learn-gulp 作为我们的项目根目录。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">learn-gulp/├── app/│   ├── sass/│   │   └─ main.scss│   ├── scripts/│   │   └─ javascript.js│   └── index.html├── dist/└── release/</code></pre></div>\n<p>app 为工作目录，所有操作都在该目录下进行。gulp 检测到文件变动会自动对文件进行处理并分发至 dist 目录。</p>\n<p>dist 目标文件目录，这里是编译、压缩过的文件。</p>\n<p>release 可以发布至服务器的文件。</p>\n<h2 id=\"hash-二、初始化npm软件包信息\">二、初始化npm软件包信息</h2>\n<p>在learn-gulp 目录下执行 npm init。这一步主要是创建一个 package.json 文件，便于与开发团队其他成员分享当前环境信息。</p>\n<p>运行 npm init 会要求输入项目名称、版本号、描述、入口程序名称、关键字、作者、license 等信息，根据实际情况输入即可。下面是我输入相关信息后生成的 package.json 文件，供参考：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">{  &#x26;quot;name&#x26;quot;: &#x26;quot;fedis&#x26;quot;,  &#x26;quot;version&#x26;quot;: &#x26;quot;1.0.4&#x26;quot;,  &#x26;quot;description&#x26;quot;: &#x26;quot;fedis - Front-End development integration solution&#x26;quot;,  &#x26;quot;main&#x26;quot;: &#x26;quot;index.js&#x26;quot;,  &#x26;quot;keywords&#x26;quot;: [    &#x26;quot;gulp&#x26;quot;,    &#x26;quot;sass&#x26;quot;,    &#x26;quot;browser-sync&#x26;quot;,    &#x26;quot;style&#x26;quot;,    &#x26;quot;html&#x26;quot;  ],  &#x26;quot;author&#x26;quot;: &#x26;quot;kelsen&#x26;quot;,  &#x26;quot;license&#x26;quot;: &#x26;quot;MIT&#x26;quot;,  &#x26;quot;bugs&#x26;quot;: {    &#x26;quot;url&#x26;quot;: &#x26;quot;&#x26;quot;  },  &#x26;quot;homepage&#x26;quot;: &#x26;quot;&#x26;quot;,  &#x26;quot;repository&#x26;quot;: {    &#x26;quot;type&#x26;quot;: &#x26;quot;git&#x26;quot;,    &#x26;quot;url&#x26;quot;: &#x26;quot;https://github.com/&#x26;quot;  }}</code></pre></div>\n<p>注意：部分选项可以不填写，如 git 仓库选项。</p>\n<h2 id=\"hash-三、安装-npm-软件包\">三、安装 npm 软件包</h2>\n<p>通过命令 npm install package-name 安装 npm 软件包，建议带上--save 参数，这样就会把你安装的软件都记录在dependencies 字段下，便于分享你的开发环境给其他人。关于 install 以及--save 参数的相关信息请参考<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.cnblogs.com/kelsen/p/4947859.html\">NPM 入门 - 基础使用</a>。</p>\n<p>下面列出了要安装的软件包</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;quot;dependencies&#x26;quot;: {    &#x26;quot;browser-sync&#x26;quot;: &#x26;quot;2.10.0&#x26;quot;,    &#x26;quot;browsersync-ssi&#x26;quot;: &#x26;quot;0.2.4&#x26;quot;,    &#x26;quot;gulp&#x26;quot;: &#x26;quot;^3.9.0&#x26;quot;,    &#x26;quot;gulp-concat&#x26;quot;: &#x26;quot;^2.6.0&#x26;quot;,    &#x26;quot;gulp-minify&#x26;quot;: &#x26;quot;0.0.5&#x26;quot;,&#x26;quot;gulp-plumber&#x26;quot;: &#x26;quot;^1.0.1&#x26;quot;,&#x26;quot;gulp-sass&#x26;quot;: &#x26;quot;2.1.0&#x26;quot;,    &#x26;quot;gulp-zip&#x26;quot;: &#x26;quot;^3.0.2&#x26;quot;}</code></pre></div>\n<p>这些软件包的基本介绍请参考<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.cnblogs.com/kelsen/p/4643762.html\">常用 Gulp 插件汇总 —— 基于 Gulp 的前端集成解决方案（三）</a>。</p>\n<h2 id=\"hash-四、构建-gulp-任务\">四、构建 gulp 任务</h2>\n<p>安装完所有软件包后，在项目目录 learn-gulp 中新建一个javascript文件，命名为 gulpfile.js ，在该文件中定义任务。如果要了解更详细的有关 <strong>任务</strong> 的信息，请参考<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.cnblogs.com/kelsen/p/4611102.html\">执行 $Gulp 时发生了什么 —— 基于 Gulp 的前端集成解决方案（二）</a>。</p>\n<p>1、加载 gulp 插件。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;#39;use strict&#x26;#39;;var gulp        = require(&#x26;#39;gulp&#x26;#39;),    browserSync = require(&#x26;#39;browser-sync&#x26;#39;).create(),    SSI         = require(&#x26;#39;browsersync-ssi&#x26;#39;),    concat      = require(&#x26;#39;gulp-concat&#x26;#39;),    minify      = require(&#x26;#39;gulp-minify&#x26;#39;),    plumber     = require(&#x26;#39;gulp-plumber&#x26;#39;),    sass        = require(&#x26;#39;gulp-sass&#x26;#39;),    zip         = require(&#x26;#39;gulp-zip&#x26;#39;);</code></pre></div>\n<p>这里注意，第一行的'use strict';</p>\n<p>2、构建一个处理静态文件的 server ，并监听工作目录，当工作目录有文件变化时立即进行相关操作并执行 browserSync.reload重新加载页面。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">gulp.task(&#x26;#39;serve&#x26;#39;, function() {    browserSync.init({        server: {            baseDir:[&#x26;quot;./dist&#x26;quot;],            middleware:SSI({                baseDir:&#x26;#39;./dist&#x26;#39;,                ext:&#x26;#39;.shtml&#x26;#39;,                version:&#x26;#39;2.10.0&#x26;#39;            })        }    });    gulp.watch(&#x26;quot;app/scss/**/*.scss&#x26;quot;, [&#x26;#39;sass&#x26;#39;]);    gulp.watch(&#x26;quot;app/scripts/**/*.js&#x26;quot;, [&#x26;#39;js&#x26;#39;]);    gulp.watch(&#x26;quot;app/**/*.html&#x26;quot;, [&#x26;#39;html&#x26;#39;]);    gulp.watch(&#x26;quot;dist/**/*.html&#x26;quot;).on(&#x26;quot;change&#x26;quot;,browserSync.reload);});</code></pre></div>\n<p>如有疑问可参考官网文档：browsersync.io</p>\n<p>3、编译 sass 文件、并自动注入到浏览器</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// Compile sass into CSS &#x26;amp; auto-inject into browsersgulp.task(&#x26;#39;sass&#x26;#39;, function() {        return gulp.src(&#x26;quot;app/scss/**/*.scss&#x26;quot;)        .pipe(plumber())        .pipe(sass.sync().on(&#x26;#39;error&#x26;#39;, sass.logError))        .pipe(sass({outputStyle:&#x26;quot;compact&#x26;quot;}))        .pipe(gulp.dest(&#x26;quot;dist/styles&#x26;quot;))        .pipe(browserSync.stream());});</code></pre></div>\n<p>这里需要注意app/scss/**/*.scss ，是app/scss/ 目录下所有SCSS文件的意思。</p>\n<p>4、压缩 javascript 文件</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// javscript files operategulp.task(&#x26;#39;js&#x26;#39;, function(){    return gulp.src(&#x26;#39;app/scripts/**/*.js&#x26;#39;)        .pipe(plumber())        .pipe(minify())        .pipe(gulp.dest(&#x26;quot;dist/scripts&#x26;quot;))        .pipe(browserSync.stream());});</code></pre></div>\n<p>对 learn-gulp/app/scripts/ 下的所有 javascript 文件进行压缩处理并分发至learn-gulp/dist/scripts/ 目录下，每个文件都会对应的生成相应的压缩文件, 如 file.js &#x26; file.min.js</p>\n<p>5、处理 html 文件</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">gulp.task(&#x26;#39;html&#x26;#39;, function() {        return gulp.src(&#x26;quot;app/*.html&#x26;quot;)        .pipe(plumber())                .pipe(gulp.dest(&#x26;quot;dist/&#x26;quot;))        .pipe(browserSync.stream());});</code></pre></div>\n<p>这里并未对 html 文件做任何改动，你可以根据实际情况进行一些操作。</p>\n<p>6、打包发布目标文件</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// publishgulp.task(&#x26;#39;publish&#x26;#39;, function(){    return gulp.src(&#x26;#39;dist/**/*&#x26;#39;)        .pipe(plumber())        .pipe(zip(&#x26;#39;publish.zip&#x26;#39;))        .pipe(gulp.dest(&#x26;#39;release&#x26;#39;))});</code></pre></div>\n<p>该任务负责把 learn-gulp/dist 目录下的文件打包成一个 zip 文件并分发至 learn-gulp/release 目录下。</p>\n<p>运行命令 <em>$ gulp publish</em> 可执行该任务。</p>\n<p>7、编辑默认任务</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">gulp.task(&#x26;#39;default&#x26;#39;, [&#x26;#39;html&#x26;#39;,&#x26;#39;serve&#x26;#39;]);</code></pre></div>\n<p>default 任务是运行 gulp 时执行的第一个任务。我们通过 default 任务来执行 serve 任务。</p>\n<h2 id=\"hash-五、开始工作\">五、开始工作</h2>\n<p>1、运行 gulp 命令，如果没有异常 gulp 就已经开始工作了，浏览器会自动打开。</p>\n<p>2、打开 learn-gulp/app/scss/main.scss 输入如下内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">.fedis-main{    background-image: linear-gradient(135deg, #573e81, #133259 40%, #133259);    color: #FFF;    padding: 80px;        h1{font-size: 6em; font-family: Arial, Helvetica, sans-serif; text-align: center;font-weight: 100; }}.footer{color:#888 }</code></pre></div>\n<p>当按下 Ctrl+S 保存时，sass 任务会自动执行，执行完成后 learn-gulp/dist/styles/ 目录下会生成css文件 main.css</p>\n<p>3、打开编辑器在 learn-gulp/app/index.html 文件中输入下面内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;!DOCTYPE html&#x26;gt;&#x26;lt;html lang=&#x26;quot;en&#x26;quot;&#x26;gt;&#x26;lt;head&#x26;gt;    &#x26;lt;meta charset=&#x26;quot;UTF-8&#x26;quot;&#x26;gt;    &#x26;lt;meta name=&#x26;quot;viewport&#x26;quot; content=&#x26;quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&#x26;quot;&#x26;gt;    &#x26;lt;title&#x26;gt;Welcome - Fedis&#x26;lt;/title&#x26;gt;    &#x26;lt;link rel=&#x26;quot;stylesheet&#x26;quot; href=&#x26;quot;//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css&#x26;quot;&#x26;gt;    &#x26;lt;link rel=&#x26;quot;stylesheet&#x26;quot; href=&#x26;quot;//cdn.bootcss.com/font-awesome/4.4.0/css/font-awesome.css&#x26;quot;&#x26;gt;    &#x26;lt;link rel=&#x26;quot;stylesheet&#x26;quot; href=&#x26;quot;styles/main.css&#x26;quot;&#x26;gt;&#x26;lt;/head&#x26;gt;&#x26;lt;body&#x26;gt;    &#x26;lt;div class=&#x26;quot;container&#x26;quot; id=&#x26;quot;main&#x26;quot;&#x26;gt;        &#x26;lt;div class=&#x26;quot;row&#x26;quot;&#x26;gt;            &#x26;lt;div class=&#x26;quot;col-md-12&#x26;quot;&#x26;gt;                &#x26;lt;div class=&#x26;quot;jumbotron text-center fedis-main&#x26;quot;&#x26;gt;                    &#x26;lt;h1&#x26;gt;Fedis&#x26;lt;/h1&#x26;gt;                                        &#x26;lt;p&#x26;gt;Front-End development integration solution&#x26;lt;/p&#x26;gt;                    &#x26;lt;small&#x26;gt;                        &#x26;lt;a class=&#x26;quot;btn btn-success&#x26;quot; href=&#x26;quot;http://shang.qq.com/wpa/qunwpa?idkey=1aab8e1fc1e992b7390185551e84701163bb9dbdc32a769b185d9f8fd6e70262&#x26;quot; target=&#x26;quot;_blank&#x26;quot;&#x26;gt;&#x26;lt;i class=&#x26;quot;fa fa-qq&#x26;quot;&#x26;gt;&#x26;lt;/i&#x26;gt;加入Q 群&#x26;lt;br&#x26;gt;221702761&#x26;lt;/a&#x26;gt;                    &#x26;lt;/small&#x26;gt;                &#x26;lt;/div&#x26;gt;                &#x26;lt;hr&#x26;gt;                &#x26;lt;div class=&#x26;quot;footer text-center&#x26;quot;&#x26;gt;                    &#x26;lt;small&#x26;gt;Fedis 1.0.0 &#x26;amp;middot; Created by Kelsen&#x26;lt;/small&#x26;gt;                &#x26;lt;/div&#x26;gt;            &#x26;lt;/div&#x26;gt;        &#x26;lt;/div&#x26;gt;    &#x26;lt;/div&#x26;gt;        &#x26;lt;script src=&#x26;quot;http://lib.sinaapp.com/js/jquery/1.9.1/jquery-1.9.1.min.js&#x26;quot;&#x26;gt;&#x26;lt;/script&#x26;gt;    &#x26;lt;script src=&#x26;quot;scripts/javascript.js&#x26;quot;&#x26;gt;&#x26;lt;/script&#x26;gt;&#x26;lt;/body&#x26;gt;&#x26;lt;/html&#x26;gt;</code></pre></div>\n<p>此时按下Ctrl+S 后 learn-gulp/dist/ 下相应位置的 index.html 文件将被新版本替换，紧接着浏览器会自动显示最新效果。</p>\n<h2 id=\"hash-写在最后\">写在最后</h2>\n<p>如果您有任何建议或疑问请在下面留言交流。</p>\n","words":5455,"toc":[{"depth":2,"value":"一、创建目录结构","id":"hash-一、创建目录结构"},{"depth":2,"value":"二、初始化npm软件包信息","id":"hash-二、初始化npm软件包信息"},{"depth":2,"value":"三、安装 npm 软件包","id":"hash-三、安装-npm-软件包"},{"depth":2,"value":"四、构建 gulp 任务","id":"hash-四、构建-gulp-任务"},{"depth":2,"value":"五、开始工作","id":"hash-五、开始工作"},{"depth":2,"value":"写在最后","id":"hash-写在最后"}],"title":"构建一个基本的前端自动化开发环境 —— 基于 Gulp 的前端集成解决方案（四）","author":"高国良","type":"posts","series":false,"date":"2015-11-25T08:25:00.791Z","tags":["gulp","sass","npm","nodejs"],"description":"在对于 npm / node / gulp 有了基本的认识之后，本文主要介绍如何构建一个基本的前端自动化开发环境。下面将逐步构建一个可以自动编译 sass 文件、压缩 javascript 文件、多终端多浏览器同步测试的开发环境，并且还可以通过 piblish 命令对项目下的文件进行打包操作。","draft":false,"cover":false},"prev":{"title":"网络原因导致 npm 软件包 node-sass / gulp-sass 安装失败的处理办法","author":"高国良","type":"posts","series":false,"date":1447884420791,"tags":["install","sass","npm","nodejs","node-sass"],"description":"如果你正在构建一个基于 gulp 的前端自动化开发环境，那么极有可能会用到 gulp-sass ,由于网络原因你可能会安装失败，因为安装过程中部分细节会到亚马逊云服务器上获取文件。本文主要讨论在不变更网络环境的前提下安装 gulp-sass / node-sass 。","draft":false,"cover":false,"path":"/blogs/2015/node-sass-gulp-sass installation failure ","slug":"2015/node-sass-gulp-sass installation failure "},"next":{"title":"Linux 内核概述 - Linux Kernel","author":"高国良","type":"posts","series":false,"date":1472217300791,"tags":["linux","Kernel","C"],"description":"Linux 内核学习笔记整理。 Unix unix 已有40历史，但计算机科学家仍认为其是现存操作系统中最大和最优秀的系统，它已成为一种传奇的存在，历经时间的考验却依然声名不坠。 1973 年，在用 C 语言重写了 Unix 系统后，大量的Unix衍生版本开始出现，许多公司把 unix 移植到新的机","draft":false,"cover":false,"path":"/blogs/2016/linux-kernel","slug":"2016/linux-kernel"}},"__N_SSG":true}