{"pageProps":{"id":["posts","2015","node-sass-gulp-sass installation failure "],"post":{"id":["posts","2015","node-sass-gulp-sass installation failure "],"contentHtml":"<p>如果你正在构建一个基于 gulp 的前端自动化开发环境，那么极有可能会用到 gulp-sass ,由于网络原因你可能会安装失败，因为安装过程中部分细节会到亚马逊云服务器上获取文件。本文主要讨论在不变更网络环境的前提下安装 gulp-sass / node-sass 。</p>\n<h1 id=\"hash-问题描述\">问题描述</h1>\n<p>执行 npm install 安装软件包 gulp-sass</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ npm install gulp-sass</code></pre></div>\n<p>这个过程中会先安装 node-sass ，因为 gulp-sass 依赖于 node-sass 。中间出现的错误信息类似下面这样：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Cannot download https://github.com/sass/node-sass/releases/download/v3.4.2/win32-x64-46_binding.nodeHint: If github.com is not accessible in your locationtry setting a proxy via HTTP_PROXY, e.g. export HTTP_PROXY=http://example.com:1234or configure npm proxy vianpm config set proxy http://example.com:8080&#x26;#39;</code></pre></div>\n<h1 id=\"hash-处理思路\">处理思路</h1>\n<p>看现象很有可能是这些二进制文件使用了GitHub 的 lfs 服务，而 lfs 使用的是亚马逊云，由于网络原因，这些服务器无法访问。</p>\n<p>现在解决问题的办法思路就很清晰了，下载源码自己编译一个这样的二进制文件，或下载官方的二进制文件。只要解决该文件的下载问题就可以继续往后安装。</p>\n<p>打开 github 看一下该项目<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/sass/node-sass%EF%BC%8C%E5%9C%A8releases\">https://github.com/sass/node-sass，在releases</a> 页面能找到下失败的文件 win32-x64-46_binding.node，这里还可以下载到 source code，下载后里头有 C++ 项目 使用 visualstudio2015 自己编译一个就可以了。</p>\n<p>同时，在<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/sass\">https://github.com/sass</a> 下，还发现一个名字叫node-sass-binaries 的项目，这里头其实也有刚才的那个二进制文件，并且这里的是可以直接下载的（貌似没使用 lfs）。</p>\n<p>我不想自找麻烦，所以下面说一下直接使用该项目中的二进制文件进行安装 node-sass 过程。</p>\n<h1 id=\"hash-操作\">操作</h1>\n<p>npm 是一个功能超级强悍的工具，安装一个软件包的方式也当然不仅仅是 npm install packagename 这一种方式，当然这是最快捷的使用公共软件包的安装方式。</p>\n<p>首先到官网（<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/sass/node-sass/releases%EF%BC%89%E4%B8%8B%E8%BD%BD\">https://github.com/sass/node-sass/releases）下载</a> node-sass 项目源码，下载后解压至相应的 node_modules 目录中。</p>\n<p>接下来，打开 package.json 文件，检查 script 字段</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;quot;scripts&#x26;quot;: {    &#x26;quot;coverage&#x26;quot;: &#x26;quot;node scripts/coverage.js&#x26;quot;,    &#x26;quot;install&#x26;quot;: &#x26;quot;node scripts/install.js&#x26;quot;,    &#x26;quot;postinstall&#x26;quot;: &#x26;quot;node scripts/build.js&#x26;quot;,    &#x26;quot;pretest&#x26;quot;: &#x26;quot;node_modules/.bin/jshint bin lib scripts test&#x26;quot;,    &#x26;quot;test&#x26;quot;: &#x26;quot;node_modules/.bin/mocha test&#x26;quot;  },</code></pre></div>\n<p>打开 install 字段对应的文件scripts/install.js，可以看到checkAndDownloadBinary() 在下载这个二进制文件，URL使用的是process.sass.binaryUrl，我们可以直接在这里覆盖这个变量，把改地址修改为上面提到的那个能够下载的二进制文件地址。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">download(process.sass.binaryUrl, process.sass.binaryPath, function(err) {    ....}</code></pre></div>\n<p>或者，找出上面提到的sass.binaryUrl() 方法，打开../lib/extensions.js 文件，大约108行左右，修改为如下样子即可</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">function getBinaryUrl() {  var site = flags[&#x26;#39;--sass-binary-site&#x26;#39;] ||             process.env.SASS_BINARY_SITE  ||             process.env.npm_config_sass_binary_site ||             (pkg.nodeSassConfig &#x26;amp;&#x26;amp; pkg.nodeSassConfig.binarySite) ||             &#x26;#39;https://github.com/sass/node-sass/releases/download&#x26;#39;;    //return [site, &#x26;#39;v&#x26;#39; + pkg.version, sass.binaryName].join(&#x26;#39;/&#x26;#39;);  return &#x26;#39;https://github.com/sass/node-sass-binaries/blob/master/win32-x64-46_binding.node&#x26;#39;;}</code></pre></div>\n<h1 id=\"hash-重新安装\">重新安装</h1>\n<p>进入node-sass 项目根目录执行 install 命令：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ cd node_modules/node-sass$ npm install </code></pre></div>\n<p>如果不出意外，这个安装过程很快就会结束。</p>\n<p>node-sass 安装完成后，gulp-sass 的依赖问题也就解决了，然后跳出去 node_modules 目录继续安装 gulp 。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ cd ../..npm install gulp-sass</code></pre></div>\n<h1 id=\"hash-写在最后\">写在最后</h1>\n<p>关于本文如果您有任何建议或疑问请在下面留言交流。</p>\n","words":2301,"toc":[],"title":"网络原因导致 npm 软件包 node-sass / gulp-sass 安装失败的处理办法","author":"高国良","type":"posts","series":false,"date":"2015-11-18T22:07:00.791Z","tags":["install","sass","npm","nodejs","node-sass"],"description":"如果你正在构建一个基于 gulp 的前端自动化开发环境，那么极有可能会用到 gulp-sass ,由于网络原因你可能会安装失败，因为安装过程中部分细节会到亚马逊云服务器上获取文件。本文主要讨论在不变更网络环境的前提下安装 gulp-sass / node-sass 。","draft":false,"cover":false},"prev":{"title":"常用 Gulp 插件汇总 —— 基于 Gulp 的前端集成解决方案（三）","author":"高国良","type":"posts","series":false,"date":1447609800791,"tags":["gulp","npm","nodejs"],"description":"前两篇文章讨论了 Gulp 的安装部署及基本概念，借助于 Gulp 强大的 插件生态 可以完成很多常见的和不常见的任务。本文主要汇总常用的 Gulp 插件及其基本使用，需要读者对 Gulp 有一个基本的了解。如果你对 Gulp 还不是很了解，可以通过下面两篇文章快速了解 Gulp 。 由于几乎所有的","draft":false,"cover":false,"path":"/blogs/2015/work-with-gulp+summary-of-common-gulp-plug-ins","slug":"2015/work-with-gulp+summary-of-common-gulp-plug-ins"},"next":{"title":"构建一个基本的前端自动化开发环境 —— 基于 Gulp 的前端集成解决方案（四）","author":"高国良","type":"posts","series":false,"date":1448439900791,"tags":["gulp","sass","npm","nodejs"],"description":"在对于 npm / node / gulp 有了基本的认识之后，本文主要介绍如何构建一个基本的前端自动化开发环境。下面将逐步构建一个可以自动编译 sass 文件、压缩 javascript 文件、多终端多浏览器同步测试的开发环境，并且还可以通过 piblish 命令对项目下的文件进行打包操作。","draft":false,"cover":false,"path":"/blogs/2015/work-with-gulp+build-a-basic-front-end-automation-development-environment","slug":"2015/work-with-gulp+build-a-basic-front-end-automation-development-environment"}},"__N_SSG":true}