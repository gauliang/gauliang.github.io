{"pageProps":{"id":["posts","2017","debugging-web-page-on-ios-safari-via-chrome"],"post":{"id":["posts","2017","debugging-web-page-on-ios-safari-via-chrome"],"contentHtml":"<p>本文重点讨论如何在 Windows 系统中通过chrome 浏览器调试运行在 iPhone Safari 浏览器中的网页。如果你有一台 iMac/MacBook，可忽略该文档。iMac 环境下，直接通过 USB 将 iphone 与 iMac/MacBook 链接，之后在 iMac/MacBook 中打开 Safari 进入调试模式，即可对运行在手机中的页面进行调试。详情见：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://webdesign.tutsplus.com/articles/quick-tip-using-web-inspector-to-debug-mobile-safari--webdesign-8787\">Using Web Inspector to Debug Mobile Safari</a>或<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://developer.apple.com/library/content/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/GettingStarted/GettingStarted.html\">Safari Web Inspector Guide</a></p>\n<h2 id=\"hash-安装-iTunes\">安装 iTunes</h2>\n<p>Windows 系统首先要安装 iTunes ，打开 Apple 官网下载 <a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://www.apple.com/cn/itunes/download/\">iTunes</a>并完成 iTunes 安装，否则计算机无法正确识别 iPhone 设备。</p>\n<h2 id=\"hash-开启调试模式\">开启调试模式</h2>\n<p>要远程调试 IOS Safari ，必须启用 <strong>Web 检查</strong> 功能，打开 iPhone 依次进入 <strong>设置 >Safari > 高级 > Web 检查 ></strong> 启用。</p>\n<h2 id=\"hash-ios-webkit-debug-proxy\">ios-webkit-debug-proxy</h2>\n<p>ios-webkit-debug-proxy 是一个 DevTools proxy ，项目托管在 Github 上。其使得开发者可以发送命令到真实（或虚拟）IOS设备中的 Safari 浏览器或 UIWebViews 。</p>\n<p><strong>安装部署</strong></p>\n<p>项目地址：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/artygus/ios-webkit-debug-proxy-win32%E3%80%82\">https://github.com/artygus/ios-webkit-debug-proxy-win32。</a></p>\n<p>在 Binaries 小节点击下载链接。</p>\n<p>下载后完成解压缩，将<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://github.com/artygus/ios-webkit-debug-proxy-win32\">ios-webkit-debug-proxy-win32</a>目录复制到 <strong>C:\\</strong> 盘。</p>\n<p>在系统环境变量添加<strong>C:\\ios-webkit-debug-proxy-win32</strong>。</p>\n<h2 id=\"hash-启动-proxy\">启动 proxy</h2>\n<p>打开命令行终端，执行：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ios_webkit_debug_proxy-win32.exe -f chrome-devtools://devtools/bundled/inspector.html</code></pre></div>\n<p>输出结果如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ios_webkit_debug_proxy-win32.exe -f chrome-devtools://devtools/bundled/inspector.htmlListing devices on :9221 Connected :9222 to iPhone (c356a29f73043a36aa6de64b088d55aeeda8f034)</code></pre></div>\n<h2 id=\"hash-开始调试\">开始调试</h2>\n<p>打开 chrome 浏览器，在地址栏输入<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://localhost:9221/\">http://localhost:9221/</a> ，这里会显示所有已连接的设备清单，选择一个设备并点击打开。</p>\n<p>打开的页面可看到当前 iphone 中 Safari 浏览器打开的所有页面，点击要调试的页面链接打开即可进入调试界面。此时可能会有一个错误提示如下</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Note: Your browser may block1,2 the above links with JavaScript console error:  Not allowed to load local resource: chrome-devtools://...To open a link: right-click on the link (control-click on Mac), &#x26;#39;Copy Link Address&#x26;#39;, and paste it into address bar.</code></pre></div>\n<p>提示浏览器禁止页面加载本地资源，需在上面的链接上点击右键复制链接，然后手动新建一个标签页将链接粘贴进去，回车访问。</p>\n<p>根据提示说明复制链接并打开，即可看到常见的 chrome 调试窗口。</p>\n<p>接下来，就可以进行正常的调试工作了。</p>\n<h2 id=\"hash-最后\">最后</h2>\n<p>本文地址：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"http://www.cnblogs.com/kelsen/p/6368550.html\">http://www.cnblogs.com/kelsen/p/6368550.html</a></p>\n<p>如果您有任何建议或疑问请在下面留言交流。</p>\n","words":1896,"toc":[{"depth":2,"value":"安装 iTunes","id":"hash-安装-iTunes"},{"depth":2,"value":"开启调试模式","id":"hash-开启调试模式"},{"depth":2,"value":"ios-webkit-debug-proxy","id":"hash-ios-webkit-debug-proxy"},{"depth":2,"value":"启动 proxy","id":"hash-启动-proxy"},{"depth":2,"value":"开始调试","id":"hash-开始调试"},{"depth":2,"value":"最后","id":"hash-最后"}],"title":"通过 Chrome 调试运行在 IOS-safari 上的页面","author":"高国良","type":"posts","series":false,"date":"2017-02-15T17:51:00.791Z","tags":["ios_webkit_debug_proxy","调试","debug"],"description":"ios-webkit-debug-proxy 是一个 DevTools proxy  ，项目托管在 Github 上。其使得开发者发送命令到真实（或虚拟）IOS设备中的 Safari 浏览器或 UIWebViews 中,以实现对 IOS 中 Safari 页面的调试。","draft":false,"cover":false},"prev":{"title":"用 Visual Studio Code 调试运行在 homestead 环境中的 laravel 程序","author":"高国良","type":"posts","series":false,"date":1486331880791,"tags":["laravel","php","vagrant","Nginx","debug","vscode"],"description":"通过 visualstudio 实现对基于 homestead 环境的 laravel 项目进行开发调试。本文重点讨论如何通过配置 visualstudio code、 homestead、Xdebug 以实现对 laravel 项目的调试，并不讨论涉本文中涉及到的其他软件的安装及部署细节。","draft":false,"cover":false,"path":"/blogs/2017/debugging-laravel-in-homestead-with-visual-studio-code","slug":"2017/debugging-laravel-in-homestead-with-visual-studio-code"},"next":{"title":"ES 2015/6 新特性汇总","author":"高国良","type":"posts","series":false,"date":1497831600791,"tags":["javascript","web","ES6","ES2015"],"description":"ES 2015/6 新增内容还是比较多的，这里仅大纲性的列举一下（不一定全面）这些特性。其实，每个点挖进去都会有很多学问在里头，本文旨在汇总，所以不对这些特性进行深层次的讨论及研究。随后有时间的话，在单独写几篇博客对常用的点进行深挖，与大家进行深度交流。","draft":false,"cover":false,"path":"/blogs/2017/es-2015-6-features","slug":"2017/es-2015-6-features"}},"__N_SSG":true}