{"pageProps":{"id":["posts","2020","array-in-js"],"post":{"id":["posts","2020","array-in-js"],"contentHtml":"<p>Array 是 javascript 中经常用到的数据类型。Javascript 的数组与其他语言中数组的最大的区别是其每个数组项都可以保存任何类型的数据。本文主要讨论 javascript 中数组的声明、转换、排序、合并、迭代等基本操作。</p>\n<p>原文：<a target=\"_blank\" target=\"_blank\" class=\"ext-link\" href=\"https://www.cnblogs.com/leonkao/p/4850274.html\">https://www.cnblogs.com/kelsen/p/4850274.html</a></p>\n<h2 id=\"hash-创建数组\">创建数组</h2>\n<p>1、<strong>使用 Array 构造函数</strong> 创建数组。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//创建一个空数组</span>\n<span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//创建一个指定长度的数组</span>\n<span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//向构造函数传递数组项</span>\n<span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这里要注意的是，当只传递一个参数给Array构造函数时，如果参数是数字则会创建一个指定长度的数组，如果参数是一个字符串则创建一个只包含该字符串的长度为1 的数组。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//[undefined × 1]</span>\n<span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//[\"BMW\"]    </span>\n</code></pre></div>\n<p>另外使用 Array 构造函数创建数组时也可以省略掉 new 操作符，和上面的一样只是去掉new关键字即可，这里不做演示。</p>\n<p>2、使用 <strong>数组字面量法</strong> 创建数组</p>\n<p>这种方法使用一对方括号 <code>[]</code> 表示数组，直接把数组项书写在方括号中，多个数组项之间用逗号 <code>,</code> 隔开。注意：为避免兼容性问题请不要在最后一个项后面添加 <code>,</code> 。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//创建一个空数组</span>\n<span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//创建一个包含3个项的数组</span>\n<span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在读取和设置数组的值时，只需通过方括号提供相应项的索引即可</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"Mercedes-benz\"</span>\n\ncars<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Jeep'</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 把Audi修改为Jeep</span>\ncars<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Audi'</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 增加第四项 Audi</span>\n</code></pre></div>\n<p>通过数组的 <code>length</code> 属性可读取数组的长度，但是该属性不是只读的，通过修改该属性可以变更数组的长度。如果新 <code>length</code> 小于原 <code>length</code> 则会删掉原数组中多余的数组项；\n若新 <code>length</code> 大于原 <code>length</code> 则数组中仍保持原来的数组项，但是 <code>length</code> 被增加到了新 <code>length</code>,当访问这些不存在的项时会返回 <code>undefined</code>。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 3</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\", \"Audi\"]</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\"]</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\"]</span>\ncars                        <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\", undefined × 2]</span>\n</code></pre></div>\n<h2 id=\"hash-检测数组\">检测数组</h2>\n<p>有两种方法可以检测某个对象是否为数组 <code>value instanceof Array</code> 和 <code>Array.isArray(value)</code>。\n<code>Array.isArray()</code> 方法是ES5中新增的方法，其优势在于当页面中的多个框架间传递数组时，仍可正确返回数据类型。</p>\n<h2 id=\"hash-数组转换\">数组转换</h2>\n<p><code>toString()</code> 方法可以返回由数组中项组成的字符串，项与项之间由 <code>,</code> 连接。当进行转换时会调用数组中每个项的 <code>toString()</code> 方法；<code>toLocaleString()</code> 会返回与 <code>tostring</code> 类似的结果，只不过其调用的是数组中每项的 <code>toLocaleString()</code>； <code>valueOf</code> 会返回数组本身； <code>join()</code> 函数接受一个字符串类型的参数，返回之类似 <code>tostring()</code>，不同之处在于该函数使用传递给他的参数作为数组项之间的连接符。</p>\n<h2 id=\"hash-队列和栈\">队列和栈</h2>\n<p>通过 <code>push()</code> 和 <code>pop()</code> 函数可实现 LIFO（Last-in-first-out）。<code>push()</code> 方法接收任意数量的参数，把它们逐个添加到当前数组的末尾，返回修改后数组的长度。而 <code>pop()</code> 方法则从数组末尾移出最后一项，减少数组的 <code>length</code> 值，然后返回数组移除的项。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 2</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\"]</span>\n\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 3</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\", \"Audi\"]</span>\n\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// \"Audi\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\"]</span>\n</code></pre></div>\n<p>与 <code>pop()</code> 类似，还有 <code>shift()</code> 方法，不同之处在于，<code>shift()</code> 从数组的前端移除项。两者使用可以实现 FIFO(First-In-First-Out)。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 2</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\"]</span>\n\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 3</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\", \"Audi\"]</span>\n\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// \"Mercedes-benz\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// [\"BMW\", \"Audi\"]</span>\n</code></pre></div>\n<h2 id=\"hash-数组合并\">数组合并</h2>\n<p>该方法会基于当前数组中的所有项创建一个新数组，先创建一个当前数组的副本，然后将接受到的参数添加到这个副本的末尾，最后返回新构建的数组。如果没有为方法提供参数，则会仅复制当前数组并返回该副本。传递给<code>concat()</code> 的参数可以是一个或多个数组，该方法会将这些数组中的项都添加到新构建的结果数组中。如果传递的参数不是数组，这些值会被简单的添加到结果数组的末尾处。</p>\n<h2 id=\"hash-数组拼接\">数组拼接</h2>\n<p>上面提到的方法都是在数组的结尾或头部进行操作，<code>splice()</code> 不同，它可用于在数组的任意位置删除指定数量的项并在当前位置插入新项。</p>\n<p>删除任意数量的项，需指定两个参数：第一个参数指定要删除的第一个项的位置，第二个参数是要删除的项数。如 <code>splice(0,2)</code> 会删除当前数组的前两项。</p>\n<p>插入任意数量的项，需指定三个参数：第一个参数指定要插入的第一个项的位置，第二个参数是 0，第三至 n 个参数是需要插入的任意的项。如 <code>splice(2,0,'a','b')</code></p>\n<p>替换任意数量的项，需指定三个参数：第一个参数指定需替换的第一个项的位置，第二个参数指定需替换的项的个数，第三个以后的参数为要替换的新项。如 <code>splice(2,2,'a','b')</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// ['BMW','Audi'];</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mercedes-benz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\", \"Audi\"]</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Tesla\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// [\"Mercedes-benz\", \"BMW\", \"Tesla\"]</span>\n</code></pre></div>\n<h2 id=\"hash-项的位置\">项的位置</h2>\n<p>ES5中提供了两个位置方法 <code>indexOf()</code> 和 <code>lastIndexOf()</code>。这两个方法都接收两个参数，第一个参数为要查找的项，第二个参数为在数组中查找时的起点位置。\n这两个方法的唯一区别在于 <code>indexOf()</code> 由前往后查找，<code>lastindexof()</code> 是由后往前查找。它们都返回要查找的项在数组中的位置，如果没找到则返回 -1 。\n在比较参数是否与数组中的项相等时是使用全等操作符 <code>===</code>。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Tesla'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 1</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bmw'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// -1</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 1</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// -1</span>\n\n<span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Tesla'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bmw'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// -1</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// -1</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1</span>\n</code></pre></div>\n<h2 id=\"hash-数组排序\">数组排序</h2>\n<p>实际应用中经常会遇到要对数组进行排序的情况，javascript 中有两个可以直接用来排序的法 <code>reverse()</code> 和 <code>sort()</code>。一个用来反转数组排序，另一个用来排序。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Audi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tesla'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// [\"Audi\", \"BMW\", \"Mercedes-benz\", \"Tesla\"]</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// [1, 14, 15, 16, 2, 3]</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// [\"Tesla\", \"Mercedes-benz\", \"BMW\", \"Audi\"]</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// [3, 2, 16, 15, 14, 1]</span>\n</code></pre></div>\n<p><code>reverse()</code> 方法可以反转数组中的项。<code>sort()</code> 方法在排序时会调用较数组中各项的 <code>toString()</code> 然后进行比较，所以在对 numbers 排序后，数组项 <code>16</code> 排在了 <code>2</code> 和 <code>3</code> 前面。\n由此可见，默认情况下 <code>sort()</code> 在排序时并不总是如人所愿。其实 <code>sort()</code> 方法还可以接收一个比较函数作为参数以干预 <code>sort()</code> 的排序行为。</p>\n<p>比较函数接受两个参数，第一个参数应该位于第二个参数前则返回<code>负数</code>，如果两个参数相等返回 <code>0</code>，如果第一个参数应该位于第二个参数后面则返回 <code>正数</code>。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// [1, 2, 3, 14, 15, 16]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item1<span class=\"token punctuation\">,</span>item2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> item1 <span class=\"token operator\">-</span> item2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"hash-数组迭代\">数组迭代</h2>\n<p>ES5 中定义了迭代数组的方法，每个方法都接受两个参数，第一个参数为要在每个项上执行的函数，第二个参数为作用域对象（可选）。传入这些方法的函数接受3个参数：数组中的项、该项在数组中的索引、数组本身。</p>\n<ul>\n<li><code>every()</code> 对数组中的每个项执行给定函数，如果每项都返回true则返回true。</li>\n<li><code>some()</code> 对数组中的每个项执行给定函数，如果任何一项返回true则返回true。</li>\n<li><code>filter()</code> 对数组中的每个项执行给定函数，返回所有返回值为true的项组成的数组。</li>\n<li><code>map()</code> 对数组中的每个项执行给定函数，返回每个数组项的执行结果组成的数组。</li>\n<li><code>forEach()</code> 对数组中的每个项执行给定函数。</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mercedes-benz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BMW'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Tesla'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword control-flow\">return</span> item<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token operator\">></span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// false</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword control-flow\">return</span> item<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token operator\">></span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// true</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword control-flow\">return</span> item<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token operator\">></span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// [\"Mercedes-benz\", \"Tesla\"]</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword control-flow\">return</span> <span class=\"token string\">'New-'</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// [\"New-Mercedes-benz\", \"New-BMW\", \"New-Audi\", \"New-Tesla\"]</span>\ncars<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">// code</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>reduce()</code> 和 <code>reduceRight()</code> 会逐个遍历数组中的每个项，并用给定函数将前两项的计算结果作为基础参与下一个项的计算，依次递归，直至结束。<code>reduceRight</code> 与 <code>reduce</code> 的不同之处仅仅在于递归顺序的不同， <code>reduceRight</code> 是从结尾向前递归。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> pre <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 28</span>\n</code></pre></div>\n<h2 id=\"hash-总结\">总结</h2>\n<p>Javascript 中有很多对数组进行操作的方法，熟练使用它们非常有助提高写代码的速度和代码执行的效率（一般情况下，要尽量避免自己实现JS已有的方法），需要注意的是对于部分新增方法，使用时需考虑浏览器支持情况。</p>\n","words":5491,"toc":[{"depth":2,"value":"创建数组","id":"hash-创建数组"},{"depth":2,"value":"检测数组","id":"hash-检测数组"},{"depth":2,"value":"数组转换","id":"hash-数组转换"},{"depth":2,"value":"队列和栈","id":"hash-队列和栈"},{"depth":2,"value":"数组合并","id":"hash-数组合并"},{"depth":2,"value":"数组拼接","id":"hash-数组拼接"},{"depth":2,"value":"项的位置","id":"hash-项的位置"},{"depth":2,"value":"数组排序","id":"hash-数组排序"},{"depth":2,"value":"数组迭代","id":"hash-数组迭代"},{"depth":2,"value":"总结","id":"hash-总结"}],"title":"Javascript 中的数组","date":"2020-12-05T10:17:44.000Z","draft":false,"description":"Array 是 javascript 中经常用到的数据类型。本文主要讨论 javascript 中数组的声明、转换、排序、合并、迭代等基本操作。","type":"posts","tags":["array","javascript"],"series":false,"author":"Gl","cover":false},"prev":{"title":"Throttling and Debounce","date":1606385732000,"draft":false,"description":"节流是指，确保连续发生的事件（函数调用）按指定频率（时间间隔）触发执行器。防抖是指，事件发生（函数调用）后，在指定时间内，同样的操作只有最后一次会生效。","type":"posts","tags":["debounce","throttle","javascript"],"series":false,"author":"Gl","cover":"throttle-and-debounce.jpg","path":"/blogs/2020/throttle-and-debounce","slug":"2020/throttle-and-debounce"},"next":{"title":"监听 Markdown 文件并热更新 Next.js 页面","author":"高国良","type":"posts","series":false,"date":1656061643954,"tags":["next.js","fast-refresh"],"description":"Next.js 提供了 Fast-Refresh 能力，它可以为您对 React 组件所做的编辑提供即时反馈。但是，当你通过 Markdown 文件提供网站内容时，由于 Markdown 不是 React 组件，热更新将失效。","draft":false,"cover":false,"path":"/blogs/2022/watch-markdown-files-and-hot-load-the-nextjs-page","slug":"2022/watch-markdown-files-and-hot-load-the-nextjs-page"}},"__N_SSG":true}