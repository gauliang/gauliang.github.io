{"pageProps":{"id":["posts","2018","docker-and-fe-2-docker-overview"],"post":{"id":["posts","2018","docker-and-fe-2-docker-overview"],"contentHtml":"<h2 id=\"hash-一、Docker-系统架构\">一、Docker 系统架构</h2>\n<p><strong>守护进程</strong><br>\n负责容器的创建、运行和监控，还负责镜像的构建和存储。<code>docker demon</code> 命令可启动 Docker 守护进程。</p>\n<p><strong>Docker 客户端</strong><br>\n通过http与 docker 守护进程通信。与docker守护进程通信的 API 有非常清晰的定义和文档，开发者也可以利用 API 直接和守护进程通信，而不通过 docker 客户端。</p>\n<p><strong>Docker 镜像仓库</strong><br>\n默认的寄存服务为 Docker Hub, 负责镜像的存储和发布。根据实际需要，我们也可以构建和运营自己的docker服务。</p>\n<h3 id=\"hash-底层技术\">底层技术</h3>\n<p><strong>cgroups</strong><br>\n负责管理容器使用的资源，如内存和CPU；</p>\n<p><strong>namespaces</strong><br>\n负责容器之间的隔离；确保系统的其他部分与容器的文件系统、主机名、用户、网络和进程都是分开的。</p>\n<p><strong>UFS (union file system)</strong><br>\n负责存储容器的镜像层。</p>\n<h3 id=\"hash-周边技术\">周边技术</h3>\n<p><strong>swarm</strong><br>\ndocker 集群解决方案</p>\n<p><strong>compose</strong><br>\n负责构建和运行多个docker容器所组成的应用程序的工具。主要用于开发和测试环境。</p>\n<p><strong>machine</strong><br>\n非Linux系统（Windows、MacOS）上的GUI，用于运行和管理docker容器；</p>\n<p><strong>docker trusted registry</strong><br>\n管理和存储docker镜像。</p>\n<p><strong>网络连接</strong><br>\noverlay</p>\n<p><strong>服务发现</strong><br>\nconsul、skyDNS</p>\n<p><strong>服务编排及集群管理</strong><br>\nkubernetes,swarm等等</p>\n<p><strong>专门用于托管容器的操作系统</strong><br>\n虽然docker在大部分的Linux发行版本上 都运行的很好，但还是出现了一些新的发行版项目，他们只考虑需要运行容器的环境，希望做出体积小二容易管理的发行版，尤其是针对数据中心或集群的使用场景。</p>\n<h2 id=\"hash-二、镜像是如何生成的\">二、镜像是如何生成的</h2>\n<p>创建镜像的主要方法是通过 <code>Dockerfile</code> 和 <code>docker build</code>。</p>\n<h3 id=\"hash-构建环境的上下文\">构建环境的上下文</h3>\n<p>命令 <code>docker build</code>需要 <code>Dockerfile</code>和<code>build context</code>。 build context 是一组本地文件和目录，他可以被 Dockerfile 的 <code>ADD</code> 和 <code>COPY</code> 指令引用，通常以目录路径的形式指定。</p>\n<p>如果提供的URL以http开头，它会被假定位直接指向 dockerfile ，这样做没什么用，因为该 <code>Dockerfile</code>没有与任何上下文关联。</p>\n<p>也可以将git仓库作为构建环境上下文。这种情况下，docker客户端会将Git仓库colone到本地，然后传递给守护进程作为构建环境上下文。</p>\n<p>还可以通过stdin输入构建环境的上下文，方法是在需要输入上下文的地方使用 <code>-</code>参数。该输入可以是一个归档文件，支持 tar.gz / xz / bzip2 格式。</p>\n<p>从构建环境的上下文中排除不必要的文件，可以使用<code>.dockerignore</code>文件，该文件类似 <code>.gitignore</code>。</p>\n<h3 id=\"hash-镜像\">镜像</h3>\n<p>Dockerfile 中的每个指令执行后都会生成一个镜像层，这个镜像层可以用来启动容器。一个新的镜像层的建立，使用上一个镜像层启动容器，然后执行dockerfile中的指令，再把它保存为一个新镜像。</p>\n<p>当dockerfile 执行成功后，中间的那些容器会被删掉，除非提供 <code>--rm=false</code> 参数。</p>\n<p>由于每个指令的最终结果都只是个静态的镜像，本质上是一个文件系统以及一些元数据，因此即使指令中的持久进程，最终都会被停掉。比如你在一条指令中开启一个数据库服务的进程，但到了下一条指令，或启动容器的时候，它就已经不存在了。</p>\n<p>如果你需要在启动容器的时候同事运行一个进程或服务，他必须从<code>ENTRYPOINT</code> 或 <code>CMD</code> 指令中启动。</p>\n<p>Docker 为了加快镜像构建的速度，会将每一个镜像层缓存下来。 Docker的缓存特性能大大提高工作效率。</p>\n<h3 id=\"hash-基础镜像\">基础镜像</h3>\n<p>基于镜像分层的特点，当我们需要一个环境时，无需重头开始去构建一个镜像。最理想的做法是完全不用创建镜像，直接使用某个现有的镜像，然后把配置文件和数据挂在上去即可。对于常用软件，比如数据库、web服务器，这是非常可行的。一般情况下使用官方镜像比自己创建一个镜像好得多，因为其他人已经找到使得该软件以最佳方式运行在容器中的方法。</p>\n<p>如果你需要使用一个基础镜像以运行应用程序，那么应该先检查一下，应用程序所使用的编程语言或框架是否已提供了官方的镜像。如果只是需要一个小而完整的Linux 发行版本，可以选择 <code>alpine</code>,他的大小仅仅5MB多一点，但仍提供了一个包管理器，可以轻松安装大量应用和工具。</p>\n<h3 id=\"hash-Dockerfile\">Dockerfile</h3>\n<h4 id=\"hash-Exec-与-Shell-的对比\">Exec 与 Shell 的对比</h4>\n<p>一些指令（<code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>）能够接受 shell 和 exec 这两种格式。exec 格式需要用到一个JSON数组，如：[\"executable\",\"param1\",\"param2\"]，其中第一个元素是可执行文件，其他元素是他执行时所使用的参数。shell格式使用的是自由形式的字符串，字符串会传给 <code>/bin/sh -c</code> 执行。exec格式适用于需要规避 shell 对字符串做出错误解析的情况，或者当径向力没有包含 <code>/bin/sh</code> 时。</p>\n<h4 id=\"hash-常用指令\">常用指令</h4>\n<p>这些指令在 docker 网站上都可以找到非常详细的说明文档，随着docker的持续发展，文档也会有调整，下列指令描述如果与官方文档不一致，请以官网文档为准。</p>\n<p><strong>ADD</strong><br>\n从构建环境上下文或远程URL将文件复制至镜像。如果是从一个本地路径添加一个压缩文件，他会被自动解压。</p>\n<p><strong>CMD</strong><br>\n当容器启动执行时执行特定的指令。如果还定义了 ENTRYPOINT , 该指令将被解释为 ENTRYPOINT 的参数（这时候请确保使用的是 exec 格式）。CMD指令也会被 docker run 命令中镜像名称后面的参数覆盖。加入定义了多个CMD，只有最后一个会生效。</p>\n<p><strong>COPY</strong><br>\n从构建环境上下文复制文件至镜像。它有两种形式，COPY src dest 或 COPY [\"SRC\",\"DEST\"]，如果路径中有空格的话，必须使用第二种格式。</p>\n<p><strong>ENTRYPOINT</strong><br>\n设置一个在容器启动时运行的可执行文件（以及默认参数）。任何CMD指令或docker run 命令中镜像名称之后的参数，将作为参数传递给这个可执行文件。 ENTRYPOINT 指令通常用于提供“启动”脚本，目的是在解析参数之前，对变量和服务进行初始化。</p>\n<p><strong>ENV</strong><br>\n设置镜像内的环境变量。这些变量可以被随后的指令应用。</p>\n<p><strong>EXPOSE</strong><br>\n向 Docker 表示该容器将会有一个进程监听所指定的端口。提供这个信息的目的是用于连接容器或在执行 docker run 命令式通过 -p 参数把端口发布出来； EXPOSE 本身不会对网络有实质性的改变。</p>\n<p><strong>FROM</strong><br>\n设置 Dockerfile 使用的基础镜像；随后的指令将基于该镜像之上。 FROM 必须为 Dockerfile 的第一条指令。</p>\n<p><strong>MAINTAINER</strong><br>\n设置镜像维护者的姓名和联系方式</p>\n<p><strong>ONBUILD</strong><br>\n指定当镜像被用作另一个镜像的基础镜像时将会执行的指令。</p>\n<p><strong>RUN</strong>\r\n在容器内执行指定的指令，并把结果保存下来。</p>\n<p><strong>USER</strong><br>\n设置任何后续的RUN、CMD或ENTRYPOINT指令执行时所用的用户（用户名或UID）。</p>\n<p><strong>VOLUME</strong>　\r\n指定为数据卷的文件或目录。如果该文件或目录已经在镜像中存在，那么当容器启动时，他就会被复制到这个卷。如果提供了多个参数，那么就将被解释成多个数据卷。</p>\n<p><strong>WORKDIR</strong><br>\n对任何后续的 RUN、CMD、ENTRYPOINT、ADD、COPY指令设置的工作目录。这个指令可多次使用。</p>\n<h2 id=\"hash-三、外部可访问-端口转发\">三、外部可访问 &#x26;&#x26; 端口转发</h2>\n<p>假设你在容器中运行一个 Nginx web服务器，你如何使外界可以访问他呢？通过 <code>-p</code> 或 <code>-P</code> 选项来发布端口。比如：</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token variable\">$docker</span> run -d -p <span class=\"token number\">8000</span>:80 nginx\n</code></pre></div>\n<p>容器启动后，我们可以通过 <code>localhost:8000</code> 访问到容器内的 web 服务。其中 <code>-p 8000:80</code> 参数告诉 docker 将主机的 8000 端口转发到容器的 80 端口。或者可以使用 <code>-P</code> 参数来告诉 Docker 自动选择一个主机上未使用的端口。</p>\n<h2 id=\"hash-四、数据卷-数据容器\">四、数据卷 &#x26;&#x26; 数据容器</h2>\n<p>数据卷，是一个目录，但并不属于UFS的一部分，它只是在主机上被绑定挂在到容器的一个普通目录。有三种方式可以挂载数据卷：</p>\n<p>执行 Docker 时，通过 <code>-v</code> 选项来指定数据卷</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">docker run -it --name test -v /data debian /bin/bash</code></pre></div>\n<p>通过 Dockerfile 的 VOLUME 命令</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">FROM debian\nVOLUME /data\n</code></pre></div>\n<p>指定数据卷要绑定的主机目录</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">docker run -v /home/data:/data debian ls /data</code></pre></div>\n<p>这个例子把主机的 /home/data 目录绑定到容器的 /data 目录，容器能够使用主机 /home/data 目录下的文件。</p>\n<p>在执行 docker run 命令时，我们通过传入 <code>--volumes-from container</code> 参数可以实现容器间的数据共享。一个常用的做法是，创建数据容器，这种容器的唯一目的就是与其他容器分享数据。</p>\n<h2 id=\"hash-五、Docker-常用命令\">五、Docker 常用命令</h2>\n<ol>\n<li><strong>docker build</strong> 从dockerfile构建镜像。</li>\n<li><strong>docker images</strong> 列出所有本地镜像。</li>\n<li><strong>docker run</strong> 这是一个相对复杂的命令，支持非常多参数。</li>\n<li><strong>docker attach</strong> 查看容器内主进程，并与之交互</li>\n<li><strong>docker create</strong> 创建容器但不启动运行</li>\n<li><strong>docker exec</strong> 在同期中运行一个命令</li>\n<li><strong>docker rm</strong> 删除一个或多个容器</li>\n</ol>\n<p>其实经常用到的命令还有很多，可以在 <code>http://docs.docker.com</code> 查阅完整的释义，也可以在命令行通过 <code>--help</code>参数查看具体使用说明。</p>\n","words":4042,"toc":[{"depth":2,"value":"一、Docker 系统架构","id":"hash-一、Docker-系统架构"},{"depth":2,"value":"二、镜像是如何生成的","id":"hash-二、镜像是如何生成的"},{"depth":2,"value":"三、外部可访问 && 端口转发","id":"hash-三、外部可访问-端口转发"},{"depth":2,"value":"四、数据卷 && 数据容器","id":"hash-四、数据卷-数据容器"},{"depth":2,"value":"五、Docker 常用命令","id":"hash-五、Docker-常用命令"}],"title":"Docker 基础 -  Docker 与前端（二）","author":"高国良","type":"posts","series":false,"date":"2018-09-10T23:03:00.791Z","tags":["docker","linux"],"description":"Docker 相关的基础知识点非常多，比如基本概念，镜像管理，数据卷（容器）管理，常用命令，周边生态等等。在这里梳理出个大概框架，方便后续学习使用。《Docker 与前端》系列文章，旨在分享学习如何通过 docker 构建一个相对完备的前端自动化开发环境。","draft":false,"cover":false},"prev":{"title":"Docker 安装 - Docker 与前端（一）","author":"高国良","type":"posts","series":false,"date":1533663300791,"tags":["linux","docker"],"description":"Docker 作为一种新兴的虚拟化方式，跟传统的虚拟化方式相比具有众多优势。《Docker 与前端》系列文章，旨在记录如何通过 docker 构建一个相对完备的前端自动化开发环境。","draft":false,"cover":false,"path":"/blogs/2018/docker-and-fe-2-docker-installation","slug":"2018/docker-and-fe-2-docker-installation"},"next":{"title":"Android 生态消息推送平台介绍","author":"高国良","type":"posts","series":false,"date":1537305840791,"tags":["Android"],"description":"一、手机厂商平台 华为消息推送服务 华为推送（Push）是为开发者提供的消息推送平台，建立了从云端到手机端的消息推送通道，使应用可以将最新信息及时通知用户，从而构筑良好的用户关系，提升用户的感知和活跃度。 1. 推送透传消息：以透传方式将自定义的内容发送给应用。开发者的应用自主解析自定义的内容，并触","draft":false,"cover":false,"path":"/blogs/2018/android-ecological-message-push-platform","slug":"2018/android-ecological-message-push-platform"}},"__N_SSG":true}