{"pageProps":{"tag":"node.js","total":7,"posts":[{"title":"深入 React Redux","date":1605399854000,"draft":false,"description":"React Redux是React的官方Redux UI绑定库 。 如果您同时使用Redux和React，则还应该使用React Redux绑定这两个库。","type":"posts","tags":["react","redux","flux","javascript","node.js"],"series":false,"author":"GauLiang","cover":"dive-react-redux.jpg","path":"/blogs/2020/dive-react-redux","slug":"2020/dive-react-redux"},{"title":"深入 Webpack","date":1604536490000,"draft":false,"description":"大多数情况下，网站不再只是用带有一些可选 JavaScript 的纯 HTML 编写，它们通常完全由 JavaScript 构建。因此，我们必须将代码打包，最小化和翻译成所有浏览器都能理解的东西，这就是webpack的用武之地。","type":"posts","tags":["webpack","devops","node.js","esm"],"series":false,"author":"GauLiang","cover":"webpack.jpg","path":"/blogs/2020/dive-into-webpack","slug":"2020/dive-into-webpack"},{"title":"Javascript Closure","date":1602413155000,"draft":false,"description":"函数和与其相关的词法环境（lexical environment）一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域，在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。","type":"posts","tags":["closure","lexical-environment","javascript","node.js","Closure"],"series":false,"author":"GauLiang","cover":"cover.jpg","path":"/blogs/2020/javascript-closure","slug":"2020/javascript-closure"},{"title":"Javascript Promise","date":1599998424000,"draft":false,"description":"Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值。本质上 Promise 是一个函数返回的对象，我们可以在它上面绑定回调函数，这样我们就不需要在一开始把回调函数作为参数传入这个函数了。","type":"posts","tags":["javascript","node.js","promise"],"series":false,"author":"GauLiang","cover":"001.jpg","path":"/blogs/2020/promise","slug":"2020/promise"},{"title":"CommonJS Modules","date":1599358780000,"draft":false,"description":"在 ES2015 标准之前，JavaScript语言没有模块化组织代码的原生方法，CommonJS 模块格式填补了这一空白。 CommonJS 规范了如何编写模块，以及如何在模块系统之间实现互操作。由于其同步执行特性，CMD 主要用于服务端开发，也可通过打包工具处理后用在浏览器端。","type":"posts","tags":["javascript","node.js","commonjs"],"series":false,"author":"GauLiang","cover":"001.jpg","path":"/blogs/2020/commonJS-modules","slug":"2020/commonJS-modules"},{"title":"Javascript 模块化概述","date":1599293077000,"draft":false,"description":"当我们提及模块化时，通常意味着是由一组高度分离的，不同的功能块存储在模块中组成的。在可能的情况下，通过松散耦合消除依赖关系简化应用程序的可维护性。","type":"posts","tags":["javascript","node.js","CommonJS","esm","amd","umd"],"series":false,"author":"GauLiang","cover":"001.jpg","path":"/blogs/2020/what-are-cjs-amd-umd-and-esm-in-javascript","slug":"2020/what-are-cjs-amd-umd-and-esm-in-javascript"},{"title":"Javascript 箭头函数最佳实践[译]","date":1599274300000,"draft":false,"description":"箭头函数的语法简洁明了，非常适合作为回调使用。本文介绍 5 中关于箭头函数的最佳实践。","type":"posts","tags":["javascript","node.js","arrow-function","best-practices"],"series":false,"author":"GauLiang","cover":"javascript-arrow-function-best-practices.jpg","path":"/blogs/2020/javascript-arrow-function-best-practices","slug":"2020/javascript-arrow-function-best-practices"}]},"__N_SSG":true}